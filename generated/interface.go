// Code generated by steamworkswebapigen. DO NOT EDIT.
// generated version: v0.1.0
package steamworks

import (
	"fmt"
)

type iClientStats1046930 struct {
}

type IClientStats_1046930 interface {
	ReportEventV1(input IClientStats_1046930ReportEventV1Input) (Response, error)
}

func NewIClientStats_1046930() IClientStats_1046930 {
	return &iClientStats1046930{}
}

type IClientStats_1046930ReportEventV1Input struct {
}

func (i *iClientStats1046930) ReportEventV1(
	input IClientStats_1046930ReportEventV1Input,
) (Response, error) {
	p := getPath("IClientStats_1046930", "ReportEvent", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type icsgoPlayers730 struct {
}

type ICSGOPlayers_730 interface {
	GetNextMatchSharingCodeV1(input ICSGOPlayers_730GetNextMatchSharingCodeV1Input) (Response, error)
}

func NewICSGOPlayers_730() ICSGOPlayers_730 {
	return &icsgoPlayers730{}
}

type ICSGOPlayers_730GetNextMatchSharingCodeV1Input struct {
	Steamid    uint64
	Steamidkey string
	Knowncode  string
}

func (i *icsgoPlayers730) GetNextMatchSharingCodeV1(
	input ICSGOPlayers_730GetNextMatchSharingCodeV1Input,
) (Response, error) {
	p := getPath("ICSGOPlayers_730", "GetNextMatchSharingCode", 1)
	request := map[string]string{
		"steamid":    fmt.Sprintf(`%v`, input.Steamid),
		"steamidkey": fmt.Sprintf(`%v`, input.Steamidkey),
		"knowncode":  fmt.Sprintf(`%v`, input.Knowncode),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type icsgoServers730 struct {
}

type ICSGOServers_730 interface {
	GetGameMapsPlaytimeV1(input ICSGOServers_730GetGameMapsPlaytimeV1Input) (Response, error)
	GetGameServersStatusV1(input ICSGOServers_730GetGameServersStatusV1Input) (Response, error)
}

func NewICSGOServers_730() ICSGOServers_730 {
	return &icsgoServers730{}
}

type ICSGOServers_730GetGameMapsPlaytimeV1Input struct {
	Interval string
	Gamemode string
	Mapgroup string
}

func (i *icsgoServers730) GetGameMapsPlaytimeV1(
	input ICSGOServers_730GetGameMapsPlaytimeV1Input,
) (Response, error) {
	p := getPath("ICSGOServers_730", "GetGameMapsPlaytime", 1)
	request := map[string]string{
		"interval": fmt.Sprintf(`%v`, input.Interval),
		"gamemode": fmt.Sprintf(`%v`, input.Gamemode),
		"mapgroup": fmt.Sprintf(`%v`, input.Mapgroup),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type ICSGOServers_730GetGameServersStatusV1Input struct {
}

func (i *icsgoServers730) GetGameServersStatusV1(
	input ICSGOServers_730GetGameServersStatusV1Input,
) (Response, error) {
	p := getPath("ICSGOServers_730", "GetGameServersStatus", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type icsgoTournaments730 struct {
}

type ICSGOTournaments_730 interface {
	GetTournamentFantasyLineupV1(input ICSGOTournaments_730GetTournamentFantasyLineupV1Input) (Response, error)
	GetTournamentItemsV1(input ICSGOTournaments_730GetTournamentItemsV1Input) (Response, error)
	GetTournamentLayoutV1(input ICSGOTournaments_730GetTournamentLayoutV1Input) (Response, error)
	GetTournamentPredictionsV1(input ICSGOTournaments_730GetTournamentPredictionsV1Input) (Response, error)
	UploadTournamentFantasyLineupV1(input ICSGOTournaments_730UploadTournamentFantasyLineupV1Input) (Response, error)
	UploadTournamentPredictionsV1(input ICSGOTournaments_730UploadTournamentPredictionsV1Input) (Response, error)
}

func NewICSGOTournaments_730() ICSGOTournaments_730 {
	return &icsgoTournaments730{}
}

type ICSGOTournaments_730GetTournamentFantasyLineupV1Input struct {
	Event      uint32
	Steamid    uint64
	Steamidkey string
}

func (i *icsgoTournaments730) GetTournamentFantasyLineupV1(
	input ICSGOTournaments_730GetTournamentFantasyLineupV1Input,
) (Response, error) {
	p := getPath("ICSGOTournaments_730", "GetTournamentFantasyLineup", 1)
	request := map[string]string{
		"event":      fmt.Sprintf(`%v`, input.Event),
		"steamid":    fmt.Sprintf(`%v`, input.Steamid),
		"steamidkey": fmt.Sprintf(`%v`, input.Steamidkey),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type ICSGOTournaments_730GetTournamentItemsV1Input struct {
	Event      uint32
	Steamid    uint64
	Steamidkey string
}

func (i *icsgoTournaments730) GetTournamentItemsV1(
	input ICSGOTournaments_730GetTournamentItemsV1Input,
) (Response, error) {
	p := getPath("ICSGOTournaments_730", "GetTournamentItems", 1)
	request := map[string]string{
		"event":      fmt.Sprintf(`%v`, input.Event),
		"steamid":    fmt.Sprintf(`%v`, input.Steamid),
		"steamidkey": fmt.Sprintf(`%v`, input.Steamidkey),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type ICSGOTournaments_730GetTournamentLayoutV1Input struct {
	Event uint32
}

func (i *icsgoTournaments730) GetTournamentLayoutV1(
	input ICSGOTournaments_730GetTournamentLayoutV1Input,
) (Response, error) {
	p := getPath("ICSGOTournaments_730", "GetTournamentLayout", 1)
	request := map[string]string{
		"event": fmt.Sprintf(`%v`, input.Event),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type ICSGOTournaments_730GetTournamentPredictionsV1Input struct {
	Event      uint32
	Steamid    uint64
	Steamidkey string
}

func (i *icsgoTournaments730) GetTournamentPredictionsV1(
	input ICSGOTournaments_730GetTournamentPredictionsV1Input,
) (Response, error) {
	p := getPath("ICSGOTournaments_730", "GetTournamentPredictions", 1)
	request := map[string]string{
		"event":      fmt.Sprintf(`%v`, input.Event),
		"steamid":    fmt.Sprintf(`%v`, input.Steamid),
		"steamidkey": fmt.Sprintf(`%v`, input.Steamidkey),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type ICSGOTournaments_730UploadTournamentFantasyLineupV1Input struct {
	Event      uint32
	Steamid    uint64
	Steamidkey string
	Sectionid  uint32
	Pickid0    uint32
	Itemid0    uint64
	Pickid1    uint32
	Itemid1    uint64
	Pickid2    uint32
	Itemid2    uint64
	Pickid3    uint32
	Itemid3    uint64
	Pickid4    uint32
	Itemid4    uint64
}

func (i *icsgoTournaments730) UploadTournamentFantasyLineupV1(
	input ICSGOTournaments_730UploadTournamentFantasyLineupV1Input,
) (Response, error) {
	p := getPath("ICSGOTournaments_730", "UploadTournamentFantasyLineup", 1)
	request := map[string]string{
		"event":      fmt.Sprintf(`%v`, input.Event),
		"steamid":    fmt.Sprintf(`%v`, input.Steamid),
		"steamidkey": fmt.Sprintf(`%v`, input.Steamidkey),
		"sectionid":  fmt.Sprintf(`%v`, input.Sectionid),
		"pickid0":    fmt.Sprintf(`%v`, input.Pickid0),
		"itemid0":    fmt.Sprintf(`%v`, input.Itemid0),
		"pickid1":    fmt.Sprintf(`%v`, input.Pickid1),
		"itemid1":    fmt.Sprintf(`%v`, input.Itemid1),
		"pickid2":    fmt.Sprintf(`%v`, input.Pickid2),
		"itemid2":    fmt.Sprintf(`%v`, input.Itemid2),
		"pickid3":    fmt.Sprintf(`%v`, input.Pickid3),
		"itemid3":    fmt.Sprintf(`%v`, input.Itemid3),
		"pickid4":    fmt.Sprintf(`%v`, input.Pickid4),
		"itemid4":    fmt.Sprintf(`%v`, input.Itemid4),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type ICSGOTournaments_730UploadTournamentPredictionsV1Input struct {
	Event      uint32
	Steamid    uint64
	Steamidkey string
	Sectionid  uint32
	Groupid    uint32
	Index      uint32
	Pickid     uint32
	Itemid     uint64
}

func (i *icsgoTournaments730) UploadTournamentPredictionsV1(
	input ICSGOTournaments_730UploadTournamentPredictionsV1Input,
) (Response, error) {
	p := getPath("ICSGOTournaments_730", "UploadTournamentPredictions", 1)
	request := map[string]string{
		"event":      fmt.Sprintf(`%v`, input.Event),
		"steamid":    fmt.Sprintf(`%v`, input.Steamid),
		"steamidkey": fmt.Sprintf(`%v`, input.Steamidkey),
		"sectionid":  fmt.Sprintf(`%v`, input.Sectionid),
		"groupid":    fmt.Sprintf(`%v`, input.Groupid),
		"index":      fmt.Sprintf(`%v`, input.Index),
		"pickid":     fmt.Sprintf(`%v`, input.Pickid),
		"itemid":     fmt.Sprintf(`%v`, input.Itemid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type idota2matchStats205790 struct {
}

type IDOTA2MatchStats_205790 interface {
	GetRealtimeStatsV1(input IDOTA2MatchStats_205790GetRealtimeStatsV1Input) (Response, error)
}

func NewIDOTA2MatchStats_205790() IDOTA2MatchStats_205790 {
	return &idota2matchStats205790{}
}

type IDOTA2MatchStats_205790GetRealtimeStatsV1Input struct {
	ServerSteamId uint64
}

func (i *idota2matchStats205790) GetRealtimeStatsV1(
	input IDOTA2MatchStats_205790GetRealtimeStatsV1Input,
) (Response, error) {
	p := getPath("IDOTA2MatchStats_205790", "GetRealtimeStats", 1)
	request := map[string]string{
		"serverSteamId": fmt.Sprintf(`%v`, input.ServerSteamId),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type idota2matchStats570 struct {
}

type IDOTA2MatchStats_570 interface {
	GetRealtimeStatsV1(input IDOTA2MatchStats_570GetRealtimeStatsV1Input) (Response, error)
}

func NewIDOTA2MatchStats_570() IDOTA2MatchStats_570 {
	return &idota2matchStats570{}
}

type IDOTA2MatchStats_570GetRealtimeStatsV1Input struct {
	ServerSteamId uint64
}

func (i *idota2matchStats570) GetRealtimeStatsV1(
	input IDOTA2MatchStats_570GetRealtimeStatsV1Input,
) (Response, error) {
	p := getPath("IDOTA2MatchStats_570", "GetRealtimeStats", 1)
	request := map[string]string{
		"serverSteamId": fmt.Sprintf(`%v`, input.ServerSteamId),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type idota2match205790 struct {
}

type IDOTA2Match_205790 interface {
	GetLiveLeagueGamesV1(input IDOTA2Match_205790GetLiveLeagueGamesV1Input) (Response, error)
	GetMatchDetailsV1(input IDOTA2Match_205790GetMatchDetailsV1Input) (Response, error)
	GetMatchHistoryV1(input IDOTA2Match_205790GetMatchHistoryV1Input) (Response, error)
	GetMatchHistoryBySequenceNumV1(input IDOTA2Match_205790GetMatchHistoryBySequenceNumV1Input) (Response, error)
	GetTeamInfoByTeamIDV1(input IDOTA2Match_205790GetTeamInfoByTeamIDV1Input) (Response, error)
	GetTopLiveEventGameV1(input IDOTA2Match_205790GetTopLiveEventGameV1Input) (Response, error)
	GetTopLiveGameV1(input IDOTA2Match_205790GetTopLiveGameV1Input) (Response, error)
	GetTopWeekendTourneyGamesV1(input IDOTA2Match_205790GetTopWeekendTourneyGamesV1Input) (Response, error)
	GetTournamentPlayerStatsV1(input IDOTA2Match_205790GetTournamentPlayerStatsV1Input) (Response, error)
	GetTournamentPlayerStatsV2(input IDOTA2Match_205790GetTournamentPlayerStatsV2Input) (Response, error)
}

func NewIDOTA2Match_205790() IDOTA2Match_205790 {
	return &idota2match205790{}
}

type IDOTA2Match_205790GetLiveLeagueGamesV1Input struct {
	LeagueId uint32
	MatchId  uint64
	Dpc      bool
}

func (i *idota2match205790) GetLiveLeagueGamesV1(
	input IDOTA2Match_205790GetLiveLeagueGamesV1Input,
) (Response, error) {
	p := getPath("IDOTA2Match_205790", "GetLiveLeagueGames", 1)
	request := map[string]string{
		"leagueId": fmt.Sprintf(`%v`, input.LeagueId),
		"matchId":  fmt.Sprintf(`%v`, input.MatchId),
		"dpc":      fmt.Sprintf(`%v`, input.Dpc),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IDOTA2Match_205790GetMatchDetailsV1Input struct {
	MatchId             uint64
	IncludePersonaNames bool
}

func (i *idota2match205790) GetMatchDetailsV1(
	input IDOTA2Match_205790GetMatchDetailsV1Input,
) (Response, error) {
	p := getPath("IDOTA2Match_205790", "GetMatchDetails", 1)
	request := map[string]string{
		"matchId":             fmt.Sprintf(`%v`, input.MatchId),
		"includePersonaNames": fmt.Sprintf(`%v`, input.IncludePersonaNames),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IDOTA2Match_205790GetMatchHistoryV1Input struct {
	HeroId           uint32
	GameMode         uint32
	Skill            uint32
	MinPlayers       string
	AccountId        string
	LeagueId         string
	StartAtMatchId   uint64
	MatchesRequested string
}

func (i *idota2match205790) GetMatchHistoryV1(
	input IDOTA2Match_205790GetMatchHistoryV1Input,
) (Response, error) {
	p := getPath("IDOTA2Match_205790", "GetMatchHistory", 1)
	request := map[string]string{
		"heroId":           fmt.Sprintf(`%v`, input.HeroId),
		"gameMode":         fmt.Sprintf(`%v`, input.GameMode),
		"skill":            fmt.Sprintf(`%v`, input.Skill),
		"minPlayers":       fmt.Sprintf(`%v`, input.MinPlayers),
		"accountId":        fmt.Sprintf(`%v`, input.AccountId),
		"leagueId":         fmt.Sprintf(`%v`, input.LeagueId),
		"startAtMatchId":   fmt.Sprintf(`%v`, input.StartAtMatchId),
		"matchesRequested": fmt.Sprintf(`%v`, input.MatchesRequested),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IDOTA2Match_205790GetMatchHistoryBySequenceNumV1Input struct {
	StartAtMatchSeqNum uint64
	MatchesRequested   uint32
}

func (i *idota2match205790) GetMatchHistoryBySequenceNumV1(
	input IDOTA2Match_205790GetMatchHistoryBySequenceNumV1Input,
) (Response, error) {
	p := getPath("IDOTA2Match_205790", "GetMatchHistoryBySequenceNum", 1)
	request := map[string]string{
		"startAtMatchSeqNum": fmt.Sprintf(`%v`, input.StartAtMatchSeqNum),
		"matchesRequested":   fmt.Sprintf(`%v`, input.MatchesRequested),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IDOTA2Match_205790GetTeamInfoByTeamIDV1Input struct {
	StartAtTeamId  uint64
	TeamsRequested uint32
}

func (i *idota2match205790) GetTeamInfoByTeamIDV1(
	input IDOTA2Match_205790GetTeamInfoByTeamIDV1Input,
) (Response, error) {
	p := getPath("IDOTA2Match_205790", "GetTeamInfoByTeamID", 1)
	request := map[string]string{
		"startAtTeamId":  fmt.Sprintf(`%v`, input.StartAtTeamId),
		"teamsRequested": fmt.Sprintf(`%v`, input.TeamsRequested),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IDOTA2Match_205790GetTopLiveEventGameV1Input struct {
	Partner int32
}

func (i *idota2match205790) GetTopLiveEventGameV1(
	input IDOTA2Match_205790GetTopLiveEventGameV1Input,
) (Response, error) {
	p := getPath("IDOTA2Match_205790", "GetTopLiveEventGame", 1)
	request := map[string]string{
		"partner": fmt.Sprintf(`%v`, input.Partner),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IDOTA2Match_205790GetTopLiveGameV1Input struct {
	Partner int32
}

func (i *idota2match205790) GetTopLiveGameV1(
	input IDOTA2Match_205790GetTopLiveGameV1Input,
) (Response, error) {
	p := getPath("IDOTA2Match_205790", "GetTopLiveGame", 1)
	request := map[string]string{
		"partner": fmt.Sprintf(`%v`, input.Partner),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IDOTA2Match_205790GetTopWeekendTourneyGamesV1Input struct {
	Partner      int32
	HomeDivision int32
}

func (i *idota2match205790) GetTopWeekendTourneyGamesV1(
	input IDOTA2Match_205790GetTopWeekendTourneyGamesV1Input,
) (Response, error) {
	p := getPath("IDOTA2Match_205790", "GetTopWeekendTourneyGames", 1)
	request := map[string]string{
		"partner":      fmt.Sprintf(`%v`, input.Partner),
		"homeDivision": fmt.Sprintf(`%v`, input.HomeDivision),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IDOTA2Match_205790GetTournamentPlayerStatsV1Input struct {
	AccountId string
	LeagueId  string
	HeroId    string
	TimeFrame string
	MatchId   uint64
}

func (i *idota2match205790) GetTournamentPlayerStatsV1(
	input IDOTA2Match_205790GetTournamentPlayerStatsV1Input,
) (Response, error) {
	p := getPath("IDOTA2Match_205790", "GetTournamentPlayerStats", 1)
	request := map[string]string{
		"accountId": fmt.Sprintf(`%v`, input.AccountId),
		"leagueId":  fmt.Sprintf(`%v`, input.LeagueId),
		"heroId":    fmt.Sprintf(`%v`, input.HeroId),
		"timeFrame": fmt.Sprintf(`%v`, input.TimeFrame),
		"matchId":   fmt.Sprintf(`%v`, input.MatchId),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IDOTA2Match_205790GetTournamentPlayerStatsV2Input struct {
	AccountId string
	LeagueId  string
	HeroId    string
	TimeFrame string
	MatchId   uint64
	PhaseId   uint32
}

func (i *idota2match205790) GetTournamentPlayerStatsV2(
	input IDOTA2Match_205790GetTournamentPlayerStatsV2Input,
) (Response, error) {
	p := getPath("IDOTA2Match_205790", "GetTournamentPlayerStats", 2)
	request := map[string]string{
		"accountId": fmt.Sprintf(`%v`, input.AccountId),
		"leagueId":  fmt.Sprintf(`%v`, input.LeagueId),
		"heroId":    fmt.Sprintf(`%v`, input.HeroId),
		"timeFrame": fmt.Sprintf(`%v`, input.TimeFrame),
		"matchId":   fmt.Sprintf(`%v`, input.MatchId),
		"phaseId":   fmt.Sprintf(`%v`, input.PhaseId),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type idota2match570 struct {
}

type IDOTA2Match_570 interface {
	GetLiveLeagueGamesV1(input IDOTA2Match_570GetLiveLeagueGamesV1Input) (Response, error)
	GetMatchDetailsV1(input IDOTA2Match_570GetMatchDetailsV1Input) (Response, error)
	GetMatchHistoryV1(input IDOTA2Match_570GetMatchHistoryV1Input) (Response, error)
	GetMatchHistoryBySequenceNumV1(input IDOTA2Match_570GetMatchHistoryBySequenceNumV1Input) (Response, error)
	GetTeamInfoByTeamIDV1(input IDOTA2Match_570GetTeamInfoByTeamIDV1Input) (Response, error)
	GetTopLiveEventGameV1(input IDOTA2Match_570GetTopLiveEventGameV1Input) (Response, error)
	GetTopLiveGameV1(input IDOTA2Match_570GetTopLiveGameV1Input) (Response, error)
	GetTopWeekendTourneyGamesV1(input IDOTA2Match_570GetTopWeekendTourneyGamesV1Input) (Response, error)
	GetTournamentPlayerStatsV1(input IDOTA2Match_570GetTournamentPlayerStatsV1Input) (Response, error)
	GetTournamentPlayerStatsV2(input IDOTA2Match_570GetTournamentPlayerStatsV2Input) (Response, error)
}

func NewIDOTA2Match_570() IDOTA2Match_570 {
	return &idota2match570{}
}

type IDOTA2Match_570GetLiveLeagueGamesV1Input struct {
	LeagueId uint32
	MatchId  uint64
	Dpc      bool
}

func (i *idota2match570) GetLiveLeagueGamesV1(
	input IDOTA2Match_570GetLiveLeagueGamesV1Input,
) (Response, error) {
	p := getPath("IDOTA2Match_570", "GetLiveLeagueGames", 1)
	request := map[string]string{
		"leagueId": fmt.Sprintf(`%v`, input.LeagueId),
		"matchId":  fmt.Sprintf(`%v`, input.MatchId),
		"dpc":      fmt.Sprintf(`%v`, input.Dpc),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IDOTA2Match_570GetMatchDetailsV1Input struct {
	MatchId             uint64
	IncludePersonaNames bool
}

func (i *idota2match570) GetMatchDetailsV1(
	input IDOTA2Match_570GetMatchDetailsV1Input,
) (Response, error) {
	p := getPath("IDOTA2Match_570", "GetMatchDetails", 1)
	request := map[string]string{
		"matchId":             fmt.Sprintf(`%v`, input.MatchId),
		"includePersonaNames": fmt.Sprintf(`%v`, input.IncludePersonaNames),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IDOTA2Match_570GetMatchHistoryV1Input struct {
	HeroId           uint32
	GameMode         uint32
	Skill            uint32
	MinPlayers       string
	AccountId        string
	LeagueId         string
	StartAtMatchId   uint64
	MatchesRequested string
}

func (i *idota2match570) GetMatchHistoryV1(
	input IDOTA2Match_570GetMatchHistoryV1Input,
) (Response, error) {
	p := getPath("IDOTA2Match_570", "GetMatchHistory", 1)
	request := map[string]string{
		"heroId":           fmt.Sprintf(`%v`, input.HeroId),
		"gameMode":         fmt.Sprintf(`%v`, input.GameMode),
		"skill":            fmt.Sprintf(`%v`, input.Skill),
		"minPlayers":       fmt.Sprintf(`%v`, input.MinPlayers),
		"accountId":        fmt.Sprintf(`%v`, input.AccountId),
		"leagueId":         fmt.Sprintf(`%v`, input.LeagueId),
		"startAtMatchId":   fmt.Sprintf(`%v`, input.StartAtMatchId),
		"matchesRequested": fmt.Sprintf(`%v`, input.MatchesRequested),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IDOTA2Match_570GetMatchHistoryBySequenceNumV1Input struct {
	StartAtMatchSeqNum uint64
	MatchesRequested   uint32
}

func (i *idota2match570) GetMatchHistoryBySequenceNumV1(
	input IDOTA2Match_570GetMatchHistoryBySequenceNumV1Input,
) (Response, error) {
	p := getPath("IDOTA2Match_570", "GetMatchHistoryBySequenceNum", 1)
	request := map[string]string{
		"startAtMatchSeqNum": fmt.Sprintf(`%v`, input.StartAtMatchSeqNum),
		"matchesRequested":   fmt.Sprintf(`%v`, input.MatchesRequested),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IDOTA2Match_570GetTeamInfoByTeamIDV1Input struct {
	StartAtTeamId  uint64
	TeamsRequested uint32
}

func (i *idota2match570) GetTeamInfoByTeamIDV1(
	input IDOTA2Match_570GetTeamInfoByTeamIDV1Input,
) (Response, error) {
	p := getPath("IDOTA2Match_570", "GetTeamInfoByTeamID", 1)
	request := map[string]string{
		"startAtTeamId":  fmt.Sprintf(`%v`, input.StartAtTeamId),
		"teamsRequested": fmt.Sprintf(`%v`, input.TeamsRequested),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IDOTA2Match_570GetTopLiveEventGameV1Input struct {
	Partner int32
}

func (i *idota2match570) GetTopLiveEventGameV1(
	input IDOTA2Match_570GetTopLiveEventGameV1Input,
) (Response, error) {
	p := getPath("IDOTA2Match_570", "GetTopLiveEventGame", 1)
	request := map[string]string{
		"partner": fmt.Sprintf(`%v`, input.Partner),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IDOTA2Match_570GetTopLiveGameV1Input struct {
	Partner int32
}

func (i *idota2match570) GetTopLiveGameV1(
	input IDOTA2Match_570GetTopLiveGameV1Input,
) (Response, error) {
	p := getPath("IDOTA2Match_570", "GetTopLiveGame", 1)
	request := map[string]string{
		"partner": fmt.Sprintf(`%v`, input.Partner),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IDOTA2Match_570GetTopWeekendTourneyGamesV1Input struct {
	Partner      int32
	HomeDivision int32
}

func (i *idota2match570) GetTopWeekendTourneyGamesV1(
	input IDOTA2Match_570GetTopWeekendTourneyGamesV1Input,
) (Response, error) {
	p := getPath("IDOTA2Match_570", "GetTopWeekendTourneyGames", 1)
	request := map[string]string{
		"partner":      fmt.Sprintf(`%v`, input.Partner),
		"homeDivision": fmt.Sprintf(`%v`, input.HomeDivision),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IDOTA2Match_570GetTournamentPlayerStatsV1Input struct {
	AccountId string
	LeagueId  string
	HeroId    string
	TimeFrame string
	MatchId   uint64
}

func (i *idota2match570) GetTournamentPlayerStatsV1(
	input IDOTA2Match_570GetTournamentPlayerStatsV1Input,
) (Response, error) {
	p := getPath("IDOTA2Match_570", "GetTournamentPlayerStats", 1)
	request := map[string]string{
		"accountId": fmt.Sprintf(`%v`, input.AccountId),
		"leagueId":  fmt.Sprintf(`%v`, input.LeagueId),
		"heroId":    fmt.Sprintf(`%v`, input.HeroId),
		"timeFrame": fmt.Sprintf(`%v`, input.TimeFrame),
		"matchId":   fmt.Sprintf(`%v`, input.MatchId),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IDOTA2Match_570GetTournamentPlayerStatsV2Input struct {
	AccountId string
	LeagueId  string
	HeroId    string
	TimeFrame string
	MatchId   uint64
	PhaseId   uint32
}

func (i *idota2match570) GetTournamentPlayerStatsV2(
	input IDOTA2Match_570GetTournamentPlayerStatsV2Input,
) (Response, error) {
	p := getPath("IDOTA2Match_570", "GetTournamentPlayerStats", 2)
	request := map[string]string{
		"accountId": fmt.Sprintf(`%v`, input.AccountId),
		"leagueId":  fmt.Sprintf(`%v`, input.LeagueId),
		"heroId":    fmt.Sprintf(`%v`, input.HeroId),
		"timeFrame": fmt.Sprintf(`%v`, input.TimeFrame),
		"matchId":   fmt.Sprintf(`%v`, input.MatchId),
		"phaseId":   fmt.Sprintf(`%v`, input.PhaseId),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type idota2streamSystem205790 struct {
}

type IDOTA2StreamSystem_205790 interface {
	GetBroadcasterInfoV1(input IDOTA2StreamSystem_205790GetBroadcasterInfoV1Input) (Response, error)
}

func NewIDOTA2StreamSystem_205790() IDOTA2StreamSystem_205790 {
	return &idota2streamSystem205790{}
}

type IDOTA2StreamSystem_205790GetBroadcasterInfoV1Input struct {
	BroadcasterSteamId uint64
	LeagueId           uint32
}

func (i *idota2streamSystem205790) GetBroadcasterInfoV1(
	input IDOTA2StreamSystem_205790GetBroadcasterInfoV1Input,
) (Response, error) {
	p := getPath("IDOTA2StreamSystem_205790", "GetBroadcasterInfo", 1)
	request := map[string]string{
		"broadcasterSteamId": fmt.Sprintf(`%v`, input.BroadcasterSteamId),
		"leagueId":           fmt.Sprintf(`%v`, input.LeagueId),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type idota2streamSystem570 struct {
}

type IDOTA2StreamSystem_570 interface {
	GetBroadcasterInfoV1(input IDOTA2StreamSystem_570GetBroadcasterInfoV1Input) (Response, error)
}

func NewIDOTA2StreamSystem_570() IDOTA2StreamSystem_570 {
	return &idota2streamSystem570{}
}

type IDOTA2StreamSystem_570GetBroadcasterInfoV1Input struct {
	BroadcasterSteamId uint64
	LeagueId           uint32
}

func (i *idota2streamSystem570) GetBroadcasterInfoV1(
	input IDOTA2StreamSystem_570GetBroadcasterInfoV1Input,
) (Response, error) {
	p := getPath("IDOTA2StreamSystem_570", "GetBroadcasterInfo", 1)
	request := map[string]string{
		"broadcasterSteamId": fmt.Sprintf(`%v`, input.BroadcasterSteamId),
		"leagueId":           fmt.Sprintf(`%v`, input.LeagueId),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type idota2ticket205790 struct {
}

type IDOTA2Ticket_205790 interface {
	GetSteamIDForBadgeIDV1(input IDOTA2Ticket_205790GetSteamIDForBadgeIDV1Input) (Response, error)
	SetSteamAccountPurchasedV1(input IDOTA2Ticket_205790SetSteamAccountPurchasedV1Input) (Response, error)
	SteamAccountValidForBadgeTypeV1(input IDOTA2Ticket_205790SteamAccountValidForBadgeTypeV1Input) (Response, error)
}

func NewIDOTA2Ticket_205790() IDOTA2Ticket_205790 {
	return &idota2ticket205790{}
}

type IDOTA2Ticket_205790GetSteamIDForBadgeIDV1Input struct {
	BadgeId string
}

func (i *idota2ticket205790) GetSteamIDForBadgeIDV1(
	input IDOTA2Ticket_205790GetSteamIDForBadgeIDV1Input,
) (Response, error) {
	p := getPath("IDOTA2Ticket_205790", "GetSteamIDForBadgeID", 1)
	request := map[string]string{
		"badgeId": fmt.Sprintf(`%v`, input.BadgeId),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IDOTA2Ticket_205790SetSteamAccountPurchasedV1Input struct {
	Steamid   uint64
	BadgeType uint32
}

func (i *idota2ticket205790) SetSteamAccountPurchasedV1(
	input IDOTA2Ticket_205790SetSteamAccountPurchasedV1Input,
) (Response, error) {
	p := getPath("IDOTA2Ticket_205790", "SetSteamAccountPurchased", 1)
	request := map[string]string{
		"steamid":   fmt.Sprintf(`%v`, input.Steamid),
		"badgeType": fmt.Sprintf(`%v`, input.BadgeType),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IDOTA2Ticket_205790SteamAccountValidForBadgeTypeV1Input struct {
	Steamid         uint64
	ValidBadgeType1 uint32
	ValidBadgeType2 uint32
	ValidBadgeType3 uint32
	ValidBadgeType4 uint32
}

func (i *idota2ticket205790) SteamAccountValidForBadgeTypeV1(
	input IDOTA2Ticket_205790SteamAccountValidForBadgeTypeV1Input,
) (Response, error) {
	p := getPath("IDOTA2Ticket_205790", "SteamAccountValidForBadgeType", 1)
	request := map[string]string{
		"steamid":         fmt.Sprintf(`%v`, input.Steamid),
		"validBadgeType1": fmt.Sprintf(`%v`, input.ValidBadgeType1),
		"validBadgeType2": fmt.Sprintf(`%v`, input.ValidBadgeType2),
		"validBadgeType3": fmt.Sprintf(`%v`, input.ValidBadgeType3),
		"validBadgeType4": fmt.Sprintf(`%v`, input.ValidBadgeType4),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type idota2ticket570 struct {
}

type IDOTA2Ticket_570 interface {
	GetSteamIDForBadgeIDV1(input IDOTA2Ticket_570GetSteamIDForBadgeIDV1Input) (Response, error)
	SetSteamAccountPurchasedV1(input IDOTA2Ticket_570SetSteamAccountPurchasedV1Input) (Response, error)
	SteamAccountValidForBadgeTypeV1(input IDOTA2Ticket_570SteamAccountValidForBadgeTypeV1Input) (Response, error)
}

func NewIDOTA2Ticket_570() IDOTA2Ticket_570 {
	return &idota2ticket570{}
}

type IDOTA2Ticket_570GetSteamIDForBadgeIDV1Input struct {
	BadgeId string
}

func (i *idota2ticket570) GetSteamIDForBadgeIDV1(
	input IDOTA2Ticket_570GetSteamIDForBadgeIDV1Input,
) (Response, error) {
	p := getPath("IDOTA2Ticket_570", "GetSteamIDForBadgeID", 1)
	request := map[string]string{
		"badgeId": fmt.Sprintf(`%v`, input.BadgeId),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IDOTA2Ticket_570SetSteamAccountPurchasedV1Input struct {
	Steamid   uint64
	BadgeType uint32
}

func (i *idota2ticket570) SetSteamAccountPurchasedV1(
	input IDOTA2Ticket_570SetSteamAccountPurchasedV1Input,
) (Response, error) {
	p := getPath("IDOTA2Ticket_570", "SetSteamAccountPurchased", 1)
	request := map[string]string{
		"steamid":   fmt.Sprintf(`%v`, input.Steamid),
		"badgeType": fmt.Sprintf(`%v`, input.BadgeType),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IDOTA2Ticket_570SteamAccountValidForBadgeTypeV1Input struct {
	Steamid         uint64
	ValidBadgeType1 uint32
	ValidBadgeType2 uint32
	ValidBadgeType3 uint32
	ValidBadgeType4 uint32
}

func (i *idota2ticket570) SteamAccountValidForBadgeTypeV1(
	input IDOTA2Ticket_570SteamAccountValidForBadgeTypeV1Input,
) (Response, error) {
	p := getPath("IDOTA2Ticket_570", "SteamAccountValidForBadgeType", 1)
	request := map[string]string{
		"steamid":         fmt.Sprintf(`%v`, input.Steamid),
		"validBadgeType1": fmt.Sprintf(`%v`, input.ValidBadgeType1),
		"validBadgeType2": fmt.Sprintf(`%v`, input.ValidBadgeType2),
		"validBadgeType3": fmt.Sprintf(`%v`, input.ValidBadgeType3),
		"validBadgeType4": fmt.Sprintf(`%v`, input.ValidBadgeType4),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iEconDota2205790 struct {
}

type IEconDOTA2_205790 interface {
	GetEventStatsForAccountV1(input IEconDOTA2_205790GetEventStatsForAccountV1Input) (Response, error)
	GetGameItemsV1(input IEconDOTA2_205790GetGameItemsV1Input) (Response, error)
	GetHeroesV1(input IEconDOTA2_205790GetHeroesV1Input) (Response, error)
	GetItemCreatorsV1(input IEconDOTA2_205790GetItemCreatorsV1Input) (Response, error)
	GetItemWorkshopPublishedFileIDsV1(input IEconDOTA2_205790GetItemWorkshopPublishedFileIDsV1Input) (Response, error)
	GetRaritiesV1(input IEconDOTA2_205790GetRaritiesV1Input) (Response, error)
	GetTournamentPrizePoolV1(input IEconDOTA2_205790GetTournamentPrizePoolV1Input) (Response, error)
}

func NewIEconDOTA2_205790() IEconDOTA2_205790 {
	return &iEconDota2205790{}
}

type IEconDOTA2_205790GetEventStatsForAccountV1Input struct {
	Eventid   uint32
	Accountid uint32
	Language  string
}

func (i *iEconDota2205790) GetEventStatsForAccountV1(
	input IEconDOTA2_205790GetEventStatsForAccountV1Input,
) (Response, error) {
	p := getPath("IEconDOTA2_205790", "GetEventStatsForAccount", 1)
	request := map[string]string{
		"eventid":   fmt.Sprintf(`%v`, input.Eventid),
		"accountid": fmt.Sprintf(`%v`, input.Accountid),
		"language":  fmt.Sprintf(`%v`, input.Language),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IEconDOTA2_205790GetGameItemsV1Input struct {
	Language string
}

func (i *iEconDota2205790) GetGameItemsV1(
	input IEconDOTA2_205790GetGameItemsV1Input,
) (Response, error) {
	p := getPath("IEconDOTA2_205790", "GetGameItems", 1)
	request := map[string]string{
		"language": fmt.Sprintf(`%v`, input.Language),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IEconDOTA2_205790GetHeroesV1Input struct {
	Language     string
	Itemizedonly bool
}

func (i *iEconDota2205790) GetHeroesV1(
	input IEconDOTA2_205790GetHeroesV1Input,
) (Response, error) {
	p := getPath("IEconDOTA2_205790", "GetHeroes", 1)
	request := map[string]string{
		"language":     fmt.Sprintf(`%v`, input.Language),
		"itemizedonly": fmt.Sprintf(`%v`, input.Itemizedonly),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IEconDOTA2_205790GetItemCreatorsV1Input struct {
	Itemdef uint32
}

func (i *iEconDota2205790) GetItemCreatorsV1(
	input IEconDOTA2_205790GetItemCreatorsV1Input,
) (Response, error) {
	p := getPath("IEconDOTA2_205790", "GetItemCreators", 1)
	request := map[string]string{
		"itemdef": fmt.Sprintf(`%v`, input.Itemdef),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IEconDOTA2_205790GetItemWorkshopPublishedFileIDsV1Input struct {
	Itemdef uint32
}

func (i *iEconDota2205790) GetItemWorkshopPublishedFileIDsV1(
	input IEconDOTA2_205790GetItemWorkshopPublishedFileIDsV1Input,
) (Response, error) {
	p := getPath("IEconDOTA2_205790", "GetItemWorkshopPublishedFileIDs", 1)
	request := map[string]string{
		"itemdef": fmt.Sprintf(`%v`, input.Itemdef),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IEconDOTA2_205790GetRaritiesV1Input struct {
	Language string
}

func (i *iEconDota2205790) GetRaritiesV1(
	input IEconDOTA2_205790GetRaritiesV1Input,
) (Response, error) {
	p := getPath("IEconDOTA2_205790", "GetRarities", 1)
	request := map[string]string{
		"language": fmt.Sprintf(`%v`, input.Language),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IEconDOTA2_205790GetTournamentPrizePoolV1Input struct {
	Leagueid uint32
}

func (i *iEconDota2205790) GetTournamentPrizePoolV1(
	input IEconDOTA2_205790GetTournamentPrizePoolV1Input,
) (Response, error) {
	p := getPath("IEconDOTA2_205790", "GetTournamentPrizePool", 1)
	request := map[string]string{
		"leagueid": fmt.Sprintf(`%v`, input.Leagueid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iEconDota2570 struct {
}

type IEconDOTA2_570 interface {
	GetEventStatsForAccountV1(input IEconDOTA2_570GetEventStatsForAccountV1Input) (Response, error)
	GetHeroesV1(input IEconDOTA2_570GetHeroesV1Input) (Response, error)
	GetItemCreatorsV1(input IEconDOTA2_570GetItemCreatorsV1Input) (Response, error)
	GetItemWorkshopPublishedFileIDsV1(input IEconDOTA2_570GetItemWorkshopPublishedFileIDsV1Input) (Response, error)
	GetRaritiesV1(input IEconDOTA2_570GetRaritiesV1Input) (Response, error)
	GetTournamentPrizePoolV1(input IEconDOTA2_570GetTournamentPrizePoolV1Input) (Response, error)
}

func NewIEconDOTA2_570() IEconDOTA2_570 {
	return &iEconDota2570{}
}

type IEconDOTA2_570GetEventStatsForAccountV1Input struct {
	Eventid   uint32
	Accountid uint32
	Language  string
}

func (i *iEconDota2570) GetEventStatsForAccountV1(
	input IEconDOTA2_570GetEventStatsForAccountV1Input,
) (Response, error) {
	p := getPath("IEconDOTA2_570", "GetEventStatsForAccount", 1)
	request := map[string]string{
		"eventid":   fmt.Sprintf(`%v`, input.Eventid),
		"accountid": fmt.Sprintf(`%v`, input.Accountid),
		"language":  fmt.Sprintf(`%v`, input.Language),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IEconDOTA2_570GetHeroesV1Input struct {
	Language     string
	Itemizedonly bool
}

func (i *iEconDota2570) GetHeroesV1(
	input IEconDOTA2_570GetHeroesV1Input,
) (Response, error) {
	p := getPath("IEconDOTA2_570", "GetHeroes", 1)
	request := map[string]string{
		"language":     fmt.Sprintf(`%v`, input.Language),
		"itemizedonly": fmt.Sprintf(`%v`, input.Itemizedonly),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IEconDOTA2_570GetItemCreatorsV1Input struct {
	Itemdef uint32
}

func (i *iEconDota2570) GetItemCreatorsV1(
	input IEconDOTA2_570GetItemCreatorsV1Input,
) (Response, error) {
	p := getPath("IEconDOTA2_570", "GetItemCreators", 1)
	request := map[string]string{
		"itemdef": fmt.Sprintf(`%v`, input.Itemdef),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IEconDOTA2_570GetItemWorkshopPublishedFileIDsV1Input struct {
	Itemdef uint32
}

func (i *iEconDota2570) GetItemWorkshopPublishedFileIDsV1(
	input IEconDOTA2_570GetItemWorkshopPublishedFileIDsV1Input,
) (Response, error) {
	p := getPath("IEconDOTA2_570", "GetItemWorkshopPublishedFileIDs", 1)
	request := map[string]string{
		"itemdef": fmt.Sprintf(`%v`, input.Itemdef),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IEconDOTA2_570GetRaritiesV1Input struct {
	Language string
}

func (i *iEconDota2570) GetRaritiesV1(
	input IEconDOTA2_570GetRaritiesV1Input,
) (Response, error) {
	p := getPath("IEconDOTA2_570", "GetRarities", 1)
	request := map[string]string{
		"language": fmt.Sprintf(`%v`, input.Language),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IEconDOTA2_570GetTournamentPrizePoolV1Input struct {
	Leagueid uint32
}

func (i *iEconDota2570) GetTournamentPrizePoolV1(
	input IEconDOTA2_570GetTournamentPrizePoolV1Input,
) (Response, error) {
	p := getPath("IEconDOTA2_570", "GetTournamentPrizePool", 1)
	request := map[string]string{
		"leagueid": fmt.Sprintf(`%v`, input.Leagueid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iEconItems1046930 struct {
}

type IEconItems_1046930 interface {
	GetPlayerItemsV1(input IEconItems_1046930GetPlayerItemsV1Input) (Response, error)
}

func NewIEconItems_1046930() IEconItems_1046930 {
	return &iEconItems1046930{}
}

type IEconItems_1046930GetPlayerItemsV1Input struct {
	Steamid uint64
}

func (i *iEconItems1046930) GetPlayerItemsV1(
	input IEconItems_1046930GetPlayerItemsV1Input,
) (Response, error) {
	p := getPath("IEconItems_1046930", "GetPlayerItems", 1)
	request := map[string]string{
		"steamid": fmt.Sprintf(`%v`, input.Steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iEconItems1269260 struct {
}

type IEconItems_1269260 interface {
	GetEquippedPlayerItemsV1(input IEconItems_1269260GetEquippedPlayerItemsV1Input) (Response, error)
}

func NewIEconItems_1269260() IEconItems_1269260 {
	return &iEconItems1269260{}
}

type IEconItems_1269260GetEquippedPlayerItemsV1Input struct {
	Steamid uint64
	ClassId uint32
}

func (i *iEconItems1269260) GetEquippedPlayerItemsV1(
	input IEconItems_1269260GetEquippedPlayerItemsV1Input,
) (Response, error) {
	p := getPath("IEconItems_1269260", "GetEquippedPlayerItems", 1)
	request := map[string]string{
		"steamid": fmt.Sprintf(`%v`, input.Steamid),
		"classId": fmt.Sprintf(`%v`, input.ClassId),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iEconItems205790 struct {
}

type IEconItems_205790 interface {
	GetEquippedPlayerItemsV1(input IEconItems_205790GetEquippedPlayerItemsV1Input) (Response, error)
	GetPlayerItemsV1(input IEconItems_205790GetPlayerItemsV1Input) (Response, error)
	GetStoreMetaDataV1(input IEconItems_205790GetStoreMetaDataV1Input) (Response, error)
}

func NewIEconItems_205790() IEconItems_205790 {
	return &iEconItems205790{}
}

type IEconItems_205790GetEquippedPlayerItemsV1Input struct {
	Steamid uint64
	ClassId uint32
}

func (i *iEconItems205790) GetEquippedPlayerItemsV1(
	input IEconItems_205790GetEquippedPlayerItemsV1Input,
) (Response, error) {
	p := getPath("IEconItems_205790", "GetEquippedPlayerItems", 1)
	request := map[string]string{
		"steamid": fmt.Sprintf(`%v`, input.Steamid),
		"classId": fmt.Sprintf(`%v`, input.ClassId),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IEconItems_205790GetPlayerItemsV1Input struct {
	Steamid uint64
}

func (i *iEconItems205790) GetPlayerItemsV1(
	input IEconItems_205790GetPlayerItemsV1Input,
) (Response, error) {
	p := getPath("IEconItems_205790", "GetPlayerItems", 1)
	request := map[string]string{
		"steamid": fmt.Sprintf(`%v`, input.Steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IEconItems_205790GetStoreMetaDataV1Input struct {
	Language string
}

func (i *iEconItems205790) GetStoreMetaDataV1(
	input IEconItems_205790GetStoreMetaDataV1Input,
) (Response, error) {
	p := getPath("IEconItems_205790", "GetStoreMetaData", 1)
	request := map[string]string{
		"language": fmt.Sprintf(`%v`, input.Language),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iEconItems221540 struct {
}

type IEconItems_221540 interface {
	GetPlayerItemsV1(input IEconItems_221540GetPlayerItemsV1Input) (Response, error)
}

func NewIEconItems_221540() IEconItems_221540 {
	return &iEconItems221540{}
}

type IEconItems_221540GetPlayerItemsV1Input struct {
	Steamid uint64
}

func (i *iEconItems221540) GetPlayerItemsV1(
	input IEconItems_221540GetPlayerItemsV1Input,
) (Response, error) {
	p := getPath("IEconItems_221540", "GetPlayerItems", 1)
	request := map[string]string{
		"steamid": fmt.Sprintf(`%v`, input.Steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iEconItems238460 struct {
}

type IEconItems_238460 interface {
	GetPlayerItemsV1(input IEconItems_238460GetPlayerItemsV1Input) (Response, error)
}

func NewIEconItems_238460() IEconItems_238460 {
	return &iEconItems238460{}
}

type IEconItems_238460GetPlayerItemsV1Input struct {
	Steamid uint64
}

func (i *iEconItems238460) GetPlayerItemsV1(
	input IEconItems_238460GetPlayerItemsV1Input,
) (Response, error) {
	p := getPath("IEconItems_238460", "GetPlayerItems", 1)
	request := map[string]string{
		"steamid": fmt.Sprintf(`%v`, input.Steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iEconItems440 struct {
}

type IEconItems_440 interface {
	GetPlayerItemsV1(input IEconItems_440GetPlayerItemsV1Input) (Response, error)
	GetSchemaV1(input IEconItems_440GetSchemaV1Input) (Response, error)
	GetSchemaItemsV1(input IEconItems_440GetSchemaItemsV1Input) (Response, error)
	GetSchemaOverviewV1(input IEconItems_440GetSchemaOverviewV1Input) (Response, error)
	GetSchemaURLV1(input IEconItems_440GetSchemaURLV1Input) (Response, error)
	GetStoreMetaDataV1(input IEconItems_440GetStoreMetaDataV1Input) (Response, error)
	GetStoreStatusV1(input IEconItems_440GetStoreStatusV1Input) (Response, error)
}

func NewIEconItems_440() IEconItems_440 {
	return &iEconItems440{}
}

type IEconItems_440GetPlayerItemsV1Input struct {
	Steamid uint64
}

func (i *iEconItems440) GetPlayerItemsV1(
	input IEconItems_440GetPlayerItemsV1Input,
) (Response, error) {
	p := getPath("IEconItems_440", "GetPlayerItems", 1)
	request := map[string]string{
		"steamid": fmt.Sprintf(`%v`, input.Steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IEconItems_440GetSchemaV1Input struct {
	Language string
}

func (i *iEconItems440) GetSchemaV1(
	input IEconItems_440GetSchemaV1Input,
) (Response, error) {
	p := getPath("IEconItems_440", "GetSchema", 1)
	request := map[string]string{
		"language": fmt.Sprintf(`%v`, input.Language),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IEconItems_440GetSchemaItemsV1Input struct {
	Language string
	Start    int32
}

func (i *iEconItems440) GetSchemaItemsV1(
	input IEconItems_440GetSchemaItemsV1Input,
) (Response, error) {
	p := getPath("IEconItems_440", "GetSchemaItems", 1)
	request := map[string]string{
		"language": fmt.Sprintf(`%v`, input.Language),
		"start":    fmt.Sprintf(`%v`, input.Start),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IEconItems_440GetSchemaOverviewV1Input struct {
	Language string
}

func (i *iEconItems440) GetSchemaOverviewV1(
	input IEconItems_440GetSchemaOverviewV1Input,
) (Response, error) {
	p := getPath("IEconItems_440", "GetSchemaOverview", 1)
	request := map[string]string{
		"language": fmt.Sprintf(`%v`, input.Language),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IEconItems_440GetSchemaURLV1Input struct {
}

func (i *iEconItems440) GetSchemaURLV1(
	input IEconItems_440GetSchemaURLV1Input,
) (Response, error) {
	p := getPath("IEconItems_440", "GetSchemaURL", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IEconItems_440GetStoreMetaDataV1Input struct {
	Language string
}

func (i *iEconItems440) GetStoreMetaDataV1(
	input IEconItems_440GetStoreMetaDataV1Input,
) (Response, error) {
	p := getPath("IEconItems_440", "GetStoreMetaData", 1)
	request := map[string]string{
		"language": fmt.Sprintf(`%v`, input.Language),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IEconItems_440GetStoreStatusV1Input struct {
}

func (i *iEconItems440) GetStoreStatusV1(
	input IEconItems_440GetStoreStatusV1Input,
) (Response, error) {
	p := getPath("IEconItems_440", "GetStoreStatus", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iEconItems570 struct {
}

type IEconItems_570 interface {
	GetPlayerItemsV1(input IEconItems_570GetPlayerItemsV1Input) (Response, error)
	GetStoreMetaDataV1(input IEconItems_570GetStoreMetaDataV1Input) (Response, error)
}

func NewIEconItems_570() IEconItems_570 {
	return &iEconItems570{}
}

type IEconItems_570GetPlayerItemsV1Input struct {
	Steamid uint64
}

func (i *iEconItems570) GetPlayerItemsV1(
	input IEconItems_570GetPlayerItemsV1Input,
) (Response, error) {
	p := getPath("IEconItems_570", "GetPlayerItems", 1)
	request := map[string]string{
		"steamid": fmt.Sprintf(`%v`, input.Steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IEconItems_570GetStoreMetaDataV1Input struct {
	Language string
}

func (i *iEconItems570) GetStoreMetaDataV1(
	input IEconItems_570GetStoreMetaDataV1Input,
) (Response, error) {
	p := getPath("IEconItems_570", "GetStoreMetaData", 1)
	request := map[string]string{
		"language": fmt.Sprintf(`%v`, input.Language),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iEconItems583950 struct {
}

type IEconItems_583950 interface {
	GetEquippedPlayerItemsV1(input IEconItems_583950GetEquippedPlayerItemsV1Input) (Response, error)
}

func NewIEconItems_583950() IEconItems_583950 {
	return &iEconItems583950{}
}

type IEconItems_583950GetEquippedPlayerItemsV1Input struct {
	Steamid uint64
	ClassId uint32
}

func (i *iEconItems583950) GetEquippedPlayerItemsV1(
	input IEconItems_583950GetEquippedPlayerItemsV1Input,
) (Response, error) {
	p := getPath("IEconItems_583950", "GetEquippedPlayerItems", 1)
	request := map[string]string{
		"steamid": fmt.Sprintf(`%v`, input.Steamid),
		"classId": fmt.Sprintf(`%v`, input.ClassId),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iEconItems620 struct {
}

type IEconItems_620 interface {
	GetPlayerItemsV1(input IEconItems_620GetPlayerItemsV1Input) (Response, error)
	GetSchemaV1(input IEconItems_620GetSchemaV1Input) (Response, error)
}

func NewIEconItems_620() IEconItems_620 {
	return &iEconItems620{}
}

type IEconItems_620GetPlayerItemsV1Input struct {
	Steamid uint64
}

func (i *iEconItems620) GetPlayerItemsV1(
	input IEconItems_620GetPlayerItemsV1Input,
) (Response, error) {
	p := getPath("IEconItems_620", "GetPlayerItems", 1)
	request := map[string]string{
		"steamid": fmt.Sprintf(`%v`, input.Steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IEconItems_620GetSchemaV1Input struct {
	Language string
}

func (i *iEconItems620) GetSchemaV1(
	input IEconItems_620GetSchemaV1Input,
) (Response, error) {
	p := getPath("IEconItems_620", "GetSchema", 1)
	request := map[string]string{
		"language": fmt.Sprintf(`%v`, input.Language),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iEconItems730 struct {
}

type IEconItems_730 interface {
	GetPlayerItemsV1(input IEconItems_730GetPlayerItemsV1Input) (Response, error)
	GetSchemaV2(input IEconItems_730GetSchemaV2Input) (Response, error)
	GetSchemaURLV2(input IEconItems_730GetSchemaURLV2Input) (Response, error)
	GetStoreMetaDataV1(input IEconItems_730GetStoreMetaDataV1Input) (Response, error)
}

func NewIEconItems_730() IEconItems_730 {
	return &iEconItems730{}
}

type IEconItems_730GetPlayerItemsV1Input struct {
	Steamid uint64
}

func (i *iEconItems730) GetPlayerItemsV1(
	input IEconItems_730GetPlayerItemsV1Input,
) (Response, error) {
	p := getPath("IEconItems_730", "GetPlayerItems", 1)
	request := map[string]string{
		"steamid": fmt.Sprintf(`%v`, input.Steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IEconItems_730GetSchemaV2Input struct {
	Language string
}

func (i *iEconItems730) GetSchemaV2(
	input IEconItems_730GetSchemaV2Input,
) (Response, error) {
	p := getPath("IEconItems_730", "GetSchema", 2)
	request := map[string]string{
		"language": fmt.Sprintf(`%v`, input.Language),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IEconItems_730GetSchemaURLV2Input struct {
}

func (i *iEconItems730) GetSchemaURLV2(
	input IEconItems_730GetSchemaURLV2Input,
) (Response, error) {
	p := getPath("IEconItems_730", "GetSchemaURL", 2)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IEconItems_730GetStoreMetaDataV1Input struct {
	Language string
}

func (i *iEconItems730) GetStoreMetaDataV1(
	input IEconItems_730GetStoreMetaDataV1Input,
) (Response, error) {
	p := getPath("IEconItems_730", "GetStoreMetaData", 1)
	request := map[string]string{
		"language": fmt.Sprintf(`%v`, input.Language),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type igcVersion1046930 struct {
}

type IGCVersion_1046930 interface {
	GetClientVersionV1(input IGCVersion_1046930GetClientVersionV1Input) (Response, error)
	GetServerVersionV1(input IGCVersion_1046930GetServerVersionV1Input) (Response, error)
}

func NewIGCVersion_1046930() IGCVersion_1046930 {
	return &igcVersion1046930{}
}

type IGCVersion_1046930GetClientVersionV1Input struct {
}

func (i *igcVersion1046930) GetClientVersionV1(
	input IGCVersion_1046930GetClientVersionV1Input,
) (Response, error) {
	p := getPath("IGCVersion_1046930", "GetClientVersion", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IGCVersion_1046930GetServerVersionV1Input struct {
}

func (i *igcVersion1046930) GetServerVersionV1(
	input IGCVersion_1046930GetServerVersionV1Input,
) (Response, error) {
	p := getPath("IGCVersion_1046930", "GetServerVersion", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type igcVersion1269260 struct {
}

type IGCVersion_1269260 interface {
	GetClientVersionV1(input IGCVersion_1269260GetClientVersionV1Input) (Response, error)
	GetServerVersionV1(input IGCVersion_1269260GetServerVersionV1Input) (Response, error)
}

func NewIGCVersion_1269260() IGCVersion_1269260 {
	return &igcVersion1269260{}
}

type IGCVersion_1269260GetClientVersionV1Input struct {
}

func (i *igcVersion1269260) GetClientVersionV1(
	input IGCVersion_1269260GetClientVersionV1Input,
) (Response, error) {
	p := getPath("IGCVersion_1269260", "GetClientVersion", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IGCVersion_1269260GetServerVersionV1Input struct {
}

func (i *igcVersion1269260) GetServerVersionV1(
	input IGCVersion_1269260GetServerVersionV1Input,
) (Response, error) {
	p := getPath("IGCVersion_1269260", "GetServerVersion", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type igcVersion205790 struct {
}

type IGCVersion_205790 interface {
	GetClientVersionV1(input IGCVersion_205790GetClientVersionV1Input) (Response, error)
	GetServerVersionV1(input IGCVersion_205790GetServerVersionV1Input) (Response, error)
}

func NewIGCVersion_205790() IGCVersion_205790 {
	return &igcVersion205790{}
}

type IGCVersion_205790GetClientVersionV1Input struct {
}

func (i *igcVersion205790) GetClientVersionV1(
	input IGCVersion_205790GetClientVersionV1Input,
) (Response, error) {
	p := getPath("IGCVersion_205790", "GetClientVersion", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IGCVersion_205790GetServerVersionV1Input struct {
}

func (i *igcVersion205790) GetServerVersionV1(
	input IGCVersion_205790GetServerVersionV1Input,
) (Response, error) {
	p := getPath("IGCVersion_205790", "GetServerVersion", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type igcVersion440 struct {
}

type IGCVersion_440 interface {
	GetClientVersionV1(input IGCVersion_440GetClientVersionV1Input) (Response, error)
	GetServerVersionV1(input IGCVersion_440GetServerVersionV1Input) (Response, error)
}

func NewIGCVersion_440() IGCVersion_440 {
	return &igcVersion440{}
}

type IGCVersion_440GetClientVersionV1Input struct {
}

func (i *igcVersion440) GetClientVersionV1(
	input IGCVersion_440GetClientVersionV1Input,
) (Response, error) {
	p := getPath("IGCVersion_440", "GetClientVersion", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IGCVersion_440GetServerVersionV1Input struct {
}

func (i *igcVersion440) GetServerVersionV1(
	input IGCVersion_440GetServerVersionV1Input,
) (Response, error) {
	p := getPath("IGCVersion_440", "GetServerVersion", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type igcVersion570 struct {
}

type IGCVersion_570 interface {
	GetClientVersionV1(input IGCVersion_570GetClientVersionV1Input) (Response, error)
	GetServerVersionV1(input IGCVersion_570GetServerVersionV1Input) (Response, error)
}

func NewIGCVersion_570() IGCVersion_570 {
	return &igcVersion570{}
}

type IGCVersion_570GetClientVersionV1Input struct {
}

func (i *igcVersion570) GetClientVersionV1(
	input IGCVersion_570GetClientVersionV1Input,
) (Response, error) {
	p := getPath("IGCVersion_570", "GetClientVersion", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IGCVersion_570GetServerVersionV1Input struct {
}

func (i *igcVersion570) GetServerVersionV1(
	input IGCVersion_570GetServerVersionV1Input,
) (Response, error) {
	p := getPath("IGCVersion_570", "GetServerVersion", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type igcVersion583950 struct {
}

type IGCVersion_583950 interface {
	GetClientVersionV1(input IGCVersion_583950GetClientVersionV1Input) (Response, error)
	GetServerVersionV1(input IGCVersion_583950GetServerVersionV1Input) (Response, error)
}

func NewIGCVersion_583950() IGCVersion_583950 {
	return &igcVersion583950{}
}

type IGCVersion_583950GetClientVersionV1Input struct {
}

func (i *igcVersion583950) GetClientVersionV1(
	input IGCVersion_583950GetClientVersionV1Input,
) (Response, error) {
	p := getPath("IGCVersion_583950", "GetClientVersion", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IGCVersion_583950GetServerVersionV1Input struct {
}

func (i *igcVersion583950) GetServerVersionV1(
	input IGCVersion_583950GetServerVersionV1Input,
) (Response, error) {
	p := getPath("IGCVersion_583950", "GetServerVersion", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type igcVersion730 struct {
}

type IGCVersion_730 interface {
	GetServerVersionV1(input IGCVersion_730GetServerVersionV1Input) (Response, error)
}

func NewIGCVersion_730() IGCVersion_730 {
	return &igcVersion730{}
}

type IGCVersion_730GetServerVersionV1Input struct {
}

func (i *igcVersion730) GetServerVersionV1(
	input IGCVersion_730GetServerVersionV1Input,
) (Response, error) {
	p := getPath("IGCVersion_730", "GetServerVersion", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iPortal2leaderboards620 struct {
}

type IPortal2Leaderboards_620 interface {
	GetBucketizedDataV1(input IPortal2Leaderboards_620GetBucketizedDataV1Input) (Response, error)
}

func NewIPortal2Leaderboards_620() IPortal2Leaderboards_620 {
	return &iPortal2leaderboards620{}
}

type IPortal2Leaderboards_620GetBucketizedDataV1Input struct {
	LeaderboardName string
}

func (i *iPortal2leaderboards620) GetBucketizedDataV1(
	input IPortal2Leaderboards_620GetBucketizedDataV1Input,
) (Response, error) {
	p := getPath("IPortal2Leaderboards_620", "GetBucketizedData", 1)
	request := map[string]string{
		"leaderboardName": fmt.Sprintf(`%v`, input.LeaderboardName),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iSteamApps struct {
}

type ISteamApps interface {
	GetAppListV1(input ISteamAppsGetAppListV1Input) (Response, error)
	GetAppListV2(input ISteamAppsGetAppListV2Input) (Response, error)
	GetSDRConfigV1(input ISteamAppsGetSDRConfigV1Input) (Response, error)
	GetServersAtAddressV1(input ISteamAppsGetServersAtAddressV1Input) (Response, error)
	UpToDateCheckV1(input ISteamAppsUpToDateCheckV1Input) (Response, error)
}

func NewISteamApps() ISteamApps {
	return &iSteamApps{}
}

type ISteamAppsGetAppListV1Input struct {
}

func (i *iSteamApps) GetAppListV1(
	input ISteamAppsGetAppListV1Input,
) (Response, error) {
	p := getPath("ISteamApps", "GetAppList", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type ISteamAppsGetAppListV2Input struct {
}

func (i *iSteamApps) GetAppListV2(
	input ISteamAppsGetAppListV2Input,
) (Response, error) {
	p := getPath("ISteamApps", "GetAppList", 2)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type ISteamAppsGetSDRConfigV1Input struct {
	Appid uint32
}

func (i *iSteamApps) GetSDRConfigV1(
	input ISteamAppsGetSDRConfigV1Input,
) (Response, error) {
	p := getPath("ISteamApps", "GetSDRConfig", 1)
	request := map[string]string{
		"appid": fmt.Sprintf(`%v`, input.Appid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type ISteamAppsGetServersAtAddressV1Input struct {
	Addr string
}

func (i *iSteamApps) GetServersAtAddressV1(
	input ISteamAppsGetServersAtAddressV1Input,
) (Response, error) {
	p := getPath("ISteamApps", "GetServersAtAddress", 1)
	request := map[string]string{
		"addr": fmt.Sprintf(`%v`, input.Addr),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type ISteamAppsUpToDateCheckV1Input struct {
	Appid   uint32
	Version uint32
}

func (i *iSteamApps) UpToDateCheckV1(
	input ISteamAppsUpToDateCheckV1Input,
) (Response, error) {
	p := getPath("ISteamApps", "UpToDateCheck", 1)
	request := map[string]string{
		"appid":   fmt.Sprintf(`%v`, input.Appid),
		"version": fmt.Sprintf(`%v`, input.Version),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iSteamBroadcast struct {
}

type ISteamBroadcast interface {
	ViewerHeartbeatV1(input ISteamBroadcastViewerHeartbeatV1Input) (Response, error)
}

func NewISteamBroadcast() ISteamBroadcast {
	return &iSteamBroadcast{}
}

type ISteamBroadcastViewerHeartbeatV1Input struct {
	Steamid   uint64
	Sessionid uint64
	Token     uint64
	Stream    int32
}

func (i *iSteamBroadcast) ViewerHeartbeatV1(
	input ISteamBroadcastViewerHeartbeatV1Input,
) (Response, error) {
	p := getPath("ISteamBroadcast", "ViewerHeartbeat", 1)
	request := map[string]string{
		"steamid":   fmt.Sprintf(`%v`, input.Steamid),
		"sessionid": fmt.Sprintf(`%v`, input.Sessionid),
		"token":     fmt.Sprintf(`%v`, input.Token),
		"stream":    fmt.Sprintf(`%v`, input.Stream),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iSteamCdn struct {
}

type ISteamCDN interface {
	SetClientFiltersV1(input ISteamCDNSetClientFiltersV1Input) (Response, error)
	SetPerformanceStatsV1(input ISteamCDNSetPerformanceStatsV1Input) (Response, error)
}

func NewISteamCDN() ISteamCDN {
	return &iSteamCdn{}
}

type ISteamCDNSetClientFiltersV1Input struct {
	Key                string
	Cdnname            string
	Allowedipblocks    string
	Allowedasns        string
	Allowedipcountries string
}

func (i *iSteamCdn) SetClientFiltersV1(
	input ISteamCDNSetClientFiltersV1Input,
) (Response, error) {
	p := getPath("ISteamCDN", "SetClientFilters", 1)
	request := map[string]string{
		"key":                fmt.Sprintf(`%v`, input.Key),
		"cdnname":            fmt.Sprintf(`%v`, input.Cdnname),
		"allowedipblocks":    fmt.Sprintf(`%v`, input.Allowedipblocks),
		"allowedasns":        fmt.Sprintf(`%v`, input.Allowedasns),
		"allowedipcountries": fmt.Sprintf(`%v`, input.Allowedipcountries),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type ISteamCDNSetPerformanceStatsV1Input struct {
	Key             string
	Cdnname         string
	MbpsSent        uint32
	MbpsRecv        uint32
	CpuPercent      uint32
	CacheHitPercent uint32
}

func (i *iSteamCdn) SetPerformanceStatsV1(
	input ISteamCDNSetPerformanceStatsV1Input,
) (Response, error) {
	p := getPath("ISteamCDN", "SetPerformanceStats", 1)
	request := map[string]string{
		"key":             fmt.Sprintf(`%v`, input.Key),
		"cdnname":         fmt.Sprintf(`%v`, input.Cdnname),
		"mbpsSent":        fmt.Sprintf(`%v`, input.MbpsSent),
		"mbpsRecv":        fmt.Sprintf(`%v`, input.MbpsRecv),
		"cpuPercent":      fmt.Sprintf(`%v`, input.CpuPercent),
		"cacheHitPercent": fmt.Sprintf(`%v`, input.CacheHitPercent),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iSteamDirectory struct {
}

type ISteamDirectory interface {
	GetCMListV1(input ISteamDirectoryGetCMListV1Input) (Response, error)
	GetCMListForConnectV1(input ISteamDirectoryGetCMListForConnectV1Input) (Response, error)
	GetSteamPipeDomainsV1(input ISteamDirectoryGetSteamPipeDomainsV1Input) (Response, error)
}

func NewISteamDirectory() ISteamDirectory {
	return &iSteamDirectory{}
}

type ISteamDirectoryGetCMListV1Input struct {
	Cellid   uint32
	Maxcount uint32
}

func (i *iSteamDirectory) GetCMListV1(
	input ISteamDirectoryGetCMListV1Input,
) (Response, error) {
	p := getPath("ISteamDirectory", "GetCMList", 1)
	request := map[string]string{
		"cellid":   fmt.Sprintf(`%v`, input.Cellid),
		"maxcount": fmt.Sprintf(`%v`, input.Maxcount),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type ISteamDirectoryGetCMListForConnectV1Input struct {
	Cellid   uint32
	Cmtype   string
	Realm    string
	Maxcount uint32
}

func (i *iSteamDirectory) GetCMListForConnectV1(
	input ISteamDirectoryGetCMListForConnectV1Input,
) (Response, error) {
	p := getPath("ISteamDirectory", "GetCMListForConnect", 1)
	request := map[string]string{
		"cellid":   fmt.Sprintf(`%v`, input.Cellid),
		"cmtype":   fmt.Sprintf(`%v`, input.Cmtype),
		"realm":    fmt.Sprintf(`%v`, input.Realm),
		"maxcount": fmt.Sprintf(`%v`, input.Maxcount),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type ISteamDirectoryGetSteamPipeDomainsV1Input struct {
}

func (i *iSteamDirectory) GetSteamPipeDomainsV1(
	input ISteamDirectoryGetSteamPipeDomainsV1Input,
) (Response, error) {
	p := getPath("ISteamDirectory", "GetSteamPipeDomains", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iSteamEconomy struct {
}

type ISteamEconomy interface {
	GetAssetClassInfoV1(input ISteamEconomyGetAssetClassInfoV1Input) (Response, error)
	GetAssetPricesV1(input ISteamEconomyGetAssetPricesV1Input) (Response, error)
}

func NewISteamEconomy() ISteamEconomy {
	return &iSteamEconomy{}
}

type ISteamEconomyGetAssetClassInfoV1Input struct {
	Appid       uint32
	Language    string
	ClassCount  uint32
	Classid0    uint64
	Instanceid0 uint64
}

func (i *iSteamEconomy) GetAssetClassInfoV1(
	input ISteamEconomyGetAssetClassInfoV1Input,
) (Response, error) {
	p := getPath("ISteamEconomy", "GetAssetClassInfo", 1)
	request := map[string]string{
		"appid":       fmt.Sprintf(`%v`, input.Appid),
		"language":    fmt.Sprintf(`%v`, input.Language),
		"classCount":  fmt.Sprintf(`%v`, input.ClassCount),
		"classid0":    fmt.Sprintf(`%v`, input.Classid0),
		"instanceid0": fmt.Sprintf(`%v`, input.Instanceid0),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type ISteamEconomyGetAssetPricesV1Input struct {
	Appid    uint32
	Currency string
	Language string
}

func (i *iSteamEconomy) GetAssetPricesV1(
	input ISteamEconomyGetAssetPricesV1Input,
) (Response, error) {
	p := getPath("ISteamEconomy", "GetAssetPrices", 1)
	request := map[string]string{
		"appid":    fmt.Sprintf(`%v`, input.Appid),
		"currency": fmt.Sprintf(`%v`, input.Currency),
		"language": fmt.Sprintf(`%v`, input.Language),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iSteamNews struct {
}

type ISteamNews interface {
	GetNewsForAppV1(input ISteamNewsGetNewsForAppV1Input) (Response, error)
	GetNewsForAppV2(input ISteamNewsGetNewsForAppV2Input) (Response, error)
}

func NewISteamNews() ISteamNews {
	return &iSteamNews{}
}

type ISteamNewsGetNewsForAppV1Input struct {
	Appid     uint32
	Maxlength uint32
	Enddate   uint32
	Count     uint32
	Tags      string
}

func (i *iSteamNews) GetNewsForAppV1(
	input ISteamNewsGetNewsForAppV1Input,
) (Response, error) {
	p := getPath("ISteamNews", "GetNewsForApp", 1)
	request := map[string]string{
		"appid":     fmt.Sprintf(`%v`, input.Appid),
		"maxlength": fmt.Sprintf(`%v`, input.Maxlength),
		"enddate":   fmt.Sprintf(`%v`, input.Enddate),
		"count":     fmt.Sprintf(`%v`, input.Count),
		"tags":      fmt.Sprintf(`%v`, input.Tags),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type ISteamNewsGetNewsForAppV2Input struct {
	Appid     uint32
	Maxlength uint32
	Enddate   uint32
	Count     uint32
	Feeds     string
	Tags      string
}

func (i *iSteamNews) GetNewsForAppV2(
	input ISteamNewsGetNewsForAppV2Input,
) (Response, error) {
	p := getPath("ISteamNews", "GetNewsForApp", 2)
	request := map[string]string{
		"appid":     fmt.Sprintf(`%v`, input.Appid),
		"maxlength": fmt.Sprintf(`%v`, input.Maxlength),
		"enddate":   fmt.Sprintf(`%v`, input.Enddate),
		"count":     fmt.Sprintf(`%v`, input.Count),
		"feeds":     fmt.Sprintf(`%v`, input.Feeds),
		"tags":      fmt.Sprintf(`%v`, input.Tags),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iSteamRemoteStorage struct {
}

type ISteamRemoteStorage interface {
	GetCollectionDetailsV1(input ISteamRemoteStorageGetCollectionDetailsV1Input) (Response, error)
	GetPublishedFileDetailsV1(input ISteamRemoteStorageGetPublishedFileDetailsV1Input) (Response, error)
	GetUGCFileDetailsV1(input ISteamRemoteStorageGetUGCFileDetailsV1Input) (Response, error)
}

func NewISteamRemoteStorage() ISteamRemoteStorage {
	return &iSteamRemoteStorage{}
}

type ISteamRemoteStorageGetCollectionDetailsV1Input struct {
	Collectioncount  uint32
	Publishedfileids uint64
}

func (i *iSteamRemoteStorage) GetCollectionDetailsV1(
	input ISteamRemoteStorageGetCollectionDetailsV1Input,
) (Response, error) {
	p := getPath("ISteamRemoteStorage", "GetCollectionDetails", 1)
	request := map[string]string{
		"collectioncount":  fmt.Sprintf(`%v`, input.Collectioncount),
		"publishedfileids": fmt.Sprintf(`%v`, input.Publishedfileids),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type ISteamRemoteStorageGetPublishedFileDetailsV1Input struct {
	Itemcount        uint32
	Publishedfileids uint64
}

func (i *iSteamRemoteStorage) GetPublishedFileDetailsV1(
	input ISteamRemoteStorageGetPublishedFileDetailsV1Input,
) (Response, error) {
	p := getPath("ISteamRemoteStorage", "GetPublishedFileDetails", 1)
	request := map[string]string{
		"itemcount":        fmt.Sprintf(`%v`, input.Itemcount),
		"publishedfileids": fmt.Sprintf(`%v`, input.Publishedfileids),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type ISteamRemoteStorageGetUGCFileDetailsV1Input struct {
	Steamid uint64
	Ugcid   uint64
	Appid   uint32
}

func (i *iSteamRemoteStorage) GetUGCFileDetailsV1(
	input ISteamRemoteStorageGetUGCFileDetailsV1Input,
) (Response, error) {
	p := getPath("ISteamRemoteStorage", "GetUGCFileDetails", 1)
	request := map[string]string{
		"steamid": fmt.Sprintf(`%v`, input.Steamid),
		"ugcid":   fmt.Sprintf(`%v`, input.Ugcid),
		"appid":   fmt.Sprintf(`%v`, input.Appid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iSteamUser struct {
}

type ISteamUser interface {
	GetFriendListV1(input ISteamUserGetFriendListV1Input) (Response, error)
	GetPlayerBansV1(input ISteamUserGetPlayerBansV1Input) (Response, error)
	GetPlayerSummariesV1(input ISteamUserGetPlayerSummariesV1Input) (Response, error)
	GetPlayerSummariesV2(input ISteamUserGetPlayerSummariesV2Input) (Response, error)
	GetUserGroupListV1(input ISteamUserGetUserGroupListV1Input) (Response, error)
	ResolveVanityURLV1(input ISteamUserResolveVanityURLV1Input) (Response, error)
}

func NewISteamUser() ISteamUser {
	return &iSteamUser{}
}

type ISteamUserGetFriendListV1Input struct {
	Key          string
	Steamid      uint64
	Relationship string
}

func (i *iSteamUser) GetFriendListV1(
	input ISteamUserGetFriendListV1Input,
) (Response, error) {
	p := getPath("ISteamUser", "GetFriendList", 1)
	request := map[string]string{
		"key":          fmt.Sprintf(`%v`, input.Key),
		"steamid":      fmt.Sprintf(`%v`, input.Steamid),
		"relationship": fmt.Sprintf(`%v`, input.Relationship),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type ISteamUserGetPlayerBansV1Input struct {
	Key      string
	Steamids string
}

func (i *iSteamUser) GetPlayerBansV1(
	input ISteamUserGetPlayerBansV1Input,
) (Response, error) {
	p := getPath("ISteamUser", "GetPlayerBans", 1)
	request := map[string]string{
		"key":      fmt.Sprintf(`%v`, input.Key),
		"steamids": fmt.Sprintf(`%v`, input.Steamids),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type ISteamUserGetPlayerSummariesV1Input struct {
	Key      string
	Steamids string
}

func (i *iSteamUser) GetPlayerSummariesV1(
	input ISteamUserGetPlayerSummariesV1Input,
) (Response, error) {
	p := getPath("ISteamUser", "GetPlayerSummaries", 1)
	request := map[string]string{
		"key":      fmt.Sprintf(`%v`, input.Key),
		"steamids": fmt.Sprintf(`%v`, input.Steamids),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type ISteamUserGetPlayerSummariesV2Input struct {
	Key      string
	Steamids string
}

func (i *iSteamUser) GetPlayerSummariesV2(
	input ISteamUserGetPlayerSummariesV2Input,
) (Response, error) {
	p := getPath("ISteamUser", "GetPlayerSummaries", 2)
	request := map[string]string{
		"key":      fmt.Sprintf(`%v`, input.Key),
		"steamids": fmt.Sprintf(`%v`, input.Steamids),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type ISteamUserGetUserGroupListV1Input struct {
	Key     string
	Steamid uint64
}

func (i *iSteamUser) GetUserGroupListV1(
	input ISteamUserGetUserGroupListV1Input,
) (Response, error) {
	p := getPath("ISteamUser", "GetUserGroupList", 1)
	request := map[string]string{
		"key":     fmt.Sprintf(`%v`, input.Key),
		"steamid": fmt.Sprintf(`%v`, input.Steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type ISteamUserResolveVanityURLV1Input struct {
	Key       string
	Vanityurl string
	UrlType   int32
}

func (i *iSteamUser) ResolveVanityURLV1(
	input ISteamUserResolveVanityURLV1Input,
) (Response, error) {
	p := getPath("ISteamUser", "ResolveVanityURL", 1)
	request := map[string]string{
		"key":       fmt.Sprintf(`%v`, input.Key),
		"vanityurl": fmt.Sprintf(`%v`, input.Vanityurl),
		"urlType":   fmt.Sprintf(`%v`, input.UrlType),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iSteamUserAuth struct {
}

type ISteamUserAuth interface {
	AuthenticateUserV1(input ISteamUserAuthAuthenticateUserV1Input) (Response, error)
	AuthenticateUserTicketV1(input ISteamUserAuthAuthenticateUserTicketV1Input) (Response, error)
}

func NewISteamUserAuth() ISteamUserAuth {
	return &iSteamUserAuth{}
}

type ISteamUserAuthAuthenticateUserV1Input struct {
	Steamid           uint64
	Sessionkey        any
	EncryptedLoginkey any
}

func (i *iSteamUserAuth) AuthenticateUserV1(
	input ISteamUserAuthAuthenticateUserV1Input,
) (Response, error) {
	p := getPath("ISteamUserAuth", "AuthenticateUser", 1)
	request := map[string]string{
		"steamid":           fmt.Sprintf(`%v`, input.Steamid),
		"sessionkey":        fmt.Sprintf(`%v`, input.Sessionkey),
		"encryptedLoginkey": fmt.Sprintf(`%v`, input.EncryptedLoginkey),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type ISteamUserAuthAuthenticateUserTicketV1Input struct {
	Key    string
	Appid  uint32
	Ticket string
}

func (i *iSteamUserAuth) AuthenticateUserTicketV1(
	input ISteamUserAuthAuthenticateUserTicketV1Input,
) (Response, error) {
	p := getPath("ISteamUserAuth", "AuthenticateUserTicket", 1)
	request := map[string]string{
		"key":    fmt.Sprintf(`%v`, input.Key),
		"appid":  fmt.Sprintf(`%v`, input.Appid),
		"ticket": fmt.Sprintf(`%v`, input.Ticket),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iSteamUserOAuth struct {
}

type ISteamUserOAuth interface {
	GetTokenDetailsV1(input ISteamUserOAuthGetTokenDetailsV1Input) (Response, error)
}

func NewISteamUserOAuth() ISteamUserOAuth {
	return &iSteamUserOAuth{}
}

type ISteamUserOAuthGetTokenDetailsV1Input struct {
	AccessToken string
}

func (i *iSteamUserOAuth) GetTokenDetailsV1(
	input ISteamUserOAuthGetTokenDetailsV1Input,
) (Response, error) {
	p := getPath("ISteamUserOAuth", "GetTokenDetails", 1)
	request := map[string]string{
		"accessToken": fmt.Sprintf(`%v`, input.AccessToken),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iSteamUserStats struct {
}

type ISteamUserStats interface {
	GetGlobalAchievementPercentagesForAppV1(input ISteamUserStatsGetGlobalAchievementPercentagesForAppV1Input) (Response, error)
	GetGlobalAchievementPercentagesForAppV2(input ISteamUserStatsGetGlobalAchievementPercentagesForAppV2Input) (Response, error)
	GetGlobalStatsForGameV1(input ISteamUserStatsGetGlobalStatsForGameV1Input) (Response, error)
	GetNumberOfCurrentPlayersV1(input ISteamUserStatsGetNumberOfCurrentPlayersV1Input) (Response, error)
	GetPlayerAchievementsV1(input ISteamUserStatsGetPlayerAchievementsV1Input) (Response, error)
	GetSchemaForGameV1(input ISteamUserStatsGetSchemaForGameV1Input) (Response, error)
	GetSchemaForGameV2(input ISteamUserStatsGetSchemaForGameV2Input) (Response, error)
	GetUserStatsForGameV1(input ISteamUserStatsGetUserStatsForGameV1Input) (Response, error)
	GetUserStatsForGameV2(input ISteamUserStatsGetUserStatsForGameV2Input) (Response, error)
}

func NewISteamUserStats() ISteamUserStats {
	return &iSteamUserStats{}
}

type ISteamUserStatsGetGlobalAchievementPercentagesForAppV1Input struct {
	Gameid uint64
}

func (i *iSteamUserStats) GetGlobalAchievementPercentagesForAppV1(
	input ISteamUserStatsGetGlobalAchievementPercentagesForAppV1Input,
) (Response, error) {
	p := getPath("ISteamUserStats", "GetGlobalAchievementPercentagesForApp", 1)
	request := map[string]string{
		"gameid": fmt.Sprintf(`%v`, input.Gameid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type ISteamUserStatsGetGlobalAchievementPercentagesForAppV2Input struct {
	Gameid uint64
}

func (i *iSteamUserStats) GetGlobalAchievementPercentagesForAppV2(
	input ISteamUserStatsGetGlobalAchievementPercentagesForAppV2Input,
) (Response, error) {
	p := getPath("ISteamUserStats", "GetGlobalAchievementPercentagesForApp", 2)
	request := map[string]string{
		"gameid": fmt.Sprintf(`%v`, input.Gameid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type ISteamUserStatsGetGlobalStatsForGameV1Input struct {
	Appid     uint32
	Count     uint32
	Name      string
	Startdate uint32
	Enddate   uint32
}

func (i *iSteamUserStats) GetGlobalStatsForGameV1(
	input ISteamUserStatsGetGlobalStatsForGameV1Input,
) (Response, error) {
	p := getPath("ISteamUserStats", "GetGlobalStatsForGame", 1)
	request := map[string]string{
		"appid":     fmt.Sprintf(`%v`, input.Appid),
		"count":     fmt.Sprintf(`%v`, input.Count),
		"name":      fmt.Sprintf(`%v`, input.Name),
		"startdate": fmt.Sprintf(`%v`, input.Startdate),
		"enddate":   fmt.Sprintf(`%v`, input.Enddate),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type ISteamUserStatsGetNumberOfCurrentPlayersV1Input struct {
	Appid uint32
}

func (i *iSteamUserStats) GetNumberOfCurrentPlayersV1(
	input ISteamUserStatsGetNumberOfCurrentPlayersV1Input,
) (Response, error) {
	p := getPath("ISteamUserStats", "GetNumberOfCurrentPlayers", 1)
	request := map[string]string{
		"appid": fmt.Sprintf(`%v`, input.Appid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type ISteamUserStatsGetPlayerAchievementsV1Input struct {
	Key     string
	Steamid uint64
	Appid   uint32
	L       string
}

func (i *iSteamUserStats) GetPlayerAchievementsV1(
	input ISteamUserStatsGetPlayerAchievementsV1Input,
) (Response, error) {
	p := getPath("ISteamUserStats", "GetPlayerAchievements", 1)
	request := map[string]string{
		"key":     fmt.Sprintf(`%v`, input.Key),
		"steamid": fmt.Sprintf(`%v`, input.Steamid),
		"appid":   fmt.Sprintf(`%v`, input.Appid),
		"l":       fmt.Sprintf(`%v`, input.L),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type ISteamUserStatsGetSchemaForGameV1Input struct {
	Key   string
	Appid uint32
	L     string
}

func (i *iSteamUserStats) GetSchemaForGameV1(
	input ISteamUserStatsGetSchemaForGameV1Input,
) (Response, error) {
	p := getPath("ISteamUserStats", "GetSchemaForGame", 1)
	request := map[string]string{
		"key":   fmt.Sprintf(`%v`, input.Key),
		"appid": fmt.Sprintf(`%v`, input.Appid),
		"l":     fmt.Sprintf(`%v`, input.L),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type ISteamUserStatsGetSchemaForGameV2Input struct {
	Key   string
	Appid uint32
	L     string
}

func (i *iSteamUserStats) GetSchemaForGameV2(
	input ISteamUserStatsGetSchemaForGameV2Input,
) (Response, error) {
	p := getPath("ISteamUserStats", "GetSchemaForGame", 2)
	request := map[string]string{
		"key":   fmt.Sprintf(`%v`, input.Key),
		"appid": fmt.Sprintf(`%v`, input.Appid),
		"l":     fmt.Sprintf(`%v`, input.L),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type ISteamUserStatsGetUserStatsForGameV1Input struct {
	Key     string
	Steamid uint64
	Appid   uint32
}

func (i *iSteamUserStats) GetUserStatsForGameV1(
	input ISteamUserStatsGetUserStatsForGameV1Input,
) (Response, error) {
	p := getPath("ISteamUserStats", "GetUserStatsForGame", 1)
	request := map[string]string{
		"key":     fmt.Sprintf(`%v`, input.Key),
		"steamid": fmt.Sprintf(`%v`, input.Steamid),
		"appid":   fmt.Sprintf(`%v`, input.Appid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type ISteamUserStatsGetUserStatsForGameV2Input struct {
	Key     string
	Steamid uint64
	Appid   uint32
}

func (i *iSteamUserStats) GetUserStatsForGameV2(
	input ISteamUserStatsGetUserStatsForGameV2Input,
) (Response, error) {
	p := getPath("ISteamUserStats", "GetUserStatsForGame", 2)
	request := map[string]string{
		"key":     fmt.Sprintf(`%v`, input.Key),
		"steamid": fmt.Sprintf(`%v`, input.Steamid),
		"appid":   fmt.Sprintf(`%v`, input.Appid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iSteamWebApiUtil struct {
}

type ISteamWebAPIUtil interface {
	GetServerInfoV1(input ISteamWebAPIUtilGetServerInfoV1Input) (Response, error)
	GetSupportedAPIListV1(input ISteamWebAPIUtilGetSupportedAPIListV1Input) (Response, error)
}

func NewISteamWebAPIUtil() ISteamWebAPIUtil {
	return &iSteamWebApiUtil{}
}

type ISteamWebAPIUtilGetServerInfoV1Input struct {
}

func (i *iSteamWebApiUtil) GetServerInfoV1(
	input ISteamWebAPIUtilGetServerInfoV1Input,
) (Response, error) {
	p := getPath("ISteamWebAPIUtil", "GetServerInfo", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type ISteamWebAPIUtilGetSupportedAPIListV1Input struct {
	Key string
}

func (i *iSteamWebApiUtil) GetSupportedAPIListV1(
	input ISteamWebAPIUtilGetSupportedAPIListV1Input,
) (Response, error) {
	p := getPath("ISteamWebAPIUtil", "GetSupportedAPIList", 1)
	request := map[string]string{
		"key": fmt.Sprintf(`%v`, input.Key),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type itfItems440 struct {
}

type ITFItems_440 interface {
	GetGoldenWrenchesV1(input ITFItems_440GetGoldenWrenchesV1Input) (Response, error)
	GetGoldenWrenchesV2(input ITFItems_440GetGoldenWrenchesV2Input) (Response, error)
}

func NewITFItems_440() ITFItems_440 {
	return &itfItems440{}
}

type ITFItems_440GetGoldenWrenchesV1Input struct {
}

func (i *itfItems440) GetGoldenWrenchesV1(
	input ITFItems_440GetGoldenWrenchesV1Input,
) (Response, error) {
	p := getPath("ITFItems_440", "GetGoldenWrenches", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type ITFItems_440GetGoldenWrenchesV2Input struct {
}

func (i *itfItems440) GetGoldenWrenchesV2(
	input ITFItems_440GetGoldenWrenchesV2Input,
) (Response, error) {
	p := getPath("ITFItems_440", "GetGoldenWrenches", 2)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type itfPromos440 struct {
}

type ITFPromos_440 interface {
	GetItemIDV1(input ITFPromos_440GetItemIDV1Input) (Response, error)
	GrantItemV1(input ITFPromos_440GrantItemV1Input) (Response, error)
}

func NewITFPromos_440() ITFPromos_440 {
	return &itfPromos440{}
}

type ITFPromos_440GetItemIDV1Input struct {
	Steamid uint64
	Promoid uint32
}

func (i *itfPromos440) GetItemIDV1(
	input ITFPromos_440GetItemIDV1Input,
) (Response, error) {
	p := getPath("ITFPromos_440", "GetItemID", 1)
	request := map[string]string{
		"steamid": fmt.Sprintf(`%v`, input.Steamid),
		"promoid": fmt.Sprintf(`%v`, input.Promoid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type ITFPromos_440GrantItemV1Input struct {
	Steamid uint64
	Promoid uint32
}

func (i *itfPromos440) GrantItemV1(
	input ITFPromos_440GrantItemV1Input,
) (Response, error) {
	p := getPath("ITFPromos_440", "GrantItem", 1)
	request := map[string]string{
		"steamid": fmt.Sprintf(`%v`, input.Steamid),
		"promoid": fmt.Sprintf(`%v`, input.Promoid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type itfPromos620 struct {
}

type ITFPromos_620 interface {
	GetItemIDV1(input ITFPromos_620GetItemIDV1Input) (Response, error)
	GrantItemV1(input ITFPromos_620GrantItemV1Input) (Response, error)
}

func NewITFPromos_620() ITFPromos_620 {
	return &itfPromos620{}
}

type ITFPromos_620GetItemIDV1Input struct {
	Steamid uint64
	PromoId uint32
}

func (i *itfPromos620) GetItemIDV1(
	input ITFPromos_620GetItemIDV1Input,
) (Response, error) {
	p := getPath("ITFPromos_620", "GetItemID", 1)
	request := map[string]string{
		"steamid": fmt.Sprintf(`%v`, input.Steamid),
		"promoId": fmt.Sprintf(`%v`, input.PromoId),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type ITFPromos_620GrantItemV1Input struct {
	Steamid uint64
	PromoId uint32
}

func (i *itfPromos620) GrantItemV1(
	input ITFPromos_620GrantItemV1Input,
) (Response, error) {
	p := getPath("ITFPromos_620", "GrantItem", 1)
	request := map[string]string{
		"steamid": fmt.Sprintf(`%v`, input.Steamid),
		"promoId": fmt.Sprintf(`%v`, input.PromoId),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type itfSystem440 struct {
}

type ITFSystem_440 interface {
	GetWorldStatusV1(input ITFSystem_440GetWorldStatusV1Input) (Response, error)
}

func NewITFSystem_440() ITFSystem_440 {
	return &itfSystem440{}
}

type ITFSystem_440GetWorldStatusV1Input struct {
}

func (i *itfSystem440) GetWorldStatusV1(
	input ITFSystem_440GetWorldStatusV1Input,
) (Response, error) {
	p := getPath("ITFSystem_440", "GetWorldStatus", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iGameServersService struct {
}

type IGameServersService interface {
	GetAccountListV1(input IGameServersServiceGetAccountListV1Input) (Response, error)
	CreateAccountV1(input IGameServersServiceCreateAccountV1Input) (Response, error)
	SetMemoV1(input IGameServersServiceSetMemoV1Input) (Response, error)
	ResetLoginTokenV1(input IGameServersServiceResetLoginTokenV1Input) (Response, error)
	DeleteAccountV1(input IGameServersServiceDeleteAccountV1Input) (Response, error)
	GetAccountPublicInfoV1(input IGameServersServiceGetAccountPublicInfoV1Input) (Response, error)
	QueryLoginTokenV1(input IGameServersServiceQueryLoginTokenV1Input) (Response, error)
	GetServerSteamIDsByIPV1(input IGameServersServiceGetServerSteamIDsByIPV1Input) (Response, error)
	GetServerIPsBySteamIDV1(input IGameServersServiceGetServerIPsBySteamIDV1Input) (Response, error)
	QueryByFakeIPV1(input IGameServersServiceQueryByFakeIPV1Input) (Response, error)
}

func NewIGameServersService() IGameServersService {
	return &iGameServersService{}
}

type IGameServersServiceGetAccountListV1Input struct {
	Key string
}

func (i *iGameServersService) GetAccountListV1(
	input IGameServersServiceGetAccountListV1Input,
) (Response, error) {
	p := getPath("IGameServersService", "GetAccountList", 1)
	request := map[string]string{
		"key": fmt.Sprintf(`%v`, input.Key),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IGameServersServiceCreateAccountV1Input struct {
	Key   string
	Appid uint32
	Memo  string
}

func (i *iGameServersService) CreateAccountV1(
	input IGameServersServiceCreateAccountV1Input,
) (Response, error) {
	p := getPath("IGameServersService", "CreateAccount", 1)
	request := map[string]string{
		"key":   fmt.Sprintf(`%v`, input.Key),
		"appid": fmt.Sprintf(`%v`, input.Appid),
		"memo":  fmt.Sprintf(`%v`, input.Memo),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IGameServersServiceSetMemoV1Input struct {
	Key     string
	Steamid uint64
	Memo    string
}

func (i *iGameServersService) SetMemoV1(
	input IGameServersServiceSetMemoV1Input,
) (Response, error) {
	p := getPath("IGameServersService", "SetMemo", 1)
	request := map[string]string{
		"key":     fmt.Sprintf(`%v`, input.Key),
		"steamid": fmt.Sprintf(`%v`, input.Steamid),
		"memo":    fmt.Sprintf(`%v`, input.Memo),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IGameServersServiceResetLoginTokenV1Input struct {
	Key     string
	Steamid uint64
}

func (i *iGameServersService) ResetLoginTokenV1(
	input IGameServersServiceResetLoginTokenV1Input,
) (Response, error) {
	p := getPath("IGameServersService", "ResetLoginToken", 1)
	request := map[string]string{
		"key":     fmt.Sprintf(`%v`, input.Key),
		"steamid": fmt.Sprintf(`%v`, input.Steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IGameServersServiceDeleteAccountV1Input struct {
	Key     string
	Steamid uint64
}

func (i *iGameServersService) DeleteAccountV1(
	input IGameServersServiceDeleteAccountV1Input,
) (Response, error) {
	p := getPath("IGameServersService", "DeleteAccount", 1)
	request := map[string]string{
		"key":     fmt.Sprintf(`%v`, input.Key),
		"steamid": fmt.Sprintf(`%v`, input.Steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IGameServersServiceGetAccountPublicInfoV1Input struct {
	Key     string
	Steamid uint64
}

func (i *iGameServersService) GetAccountPublicInfoV1(
	input IGameServersServiceGetAccountPublicInfoV1Input,
) (Response, error) {
	p := getPath("IGameServersService", "GetAccountPublicInfo", 1)
	request := map[string]string{
		"key":     fmt.Sprintf(`%v`, input.Key),
		"steamid": fmt.Sprintf(`%v`, input.Steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IGameServersServiceQueryLoginTokenV1Input struct {
	Key        string
	LoginToken string
}

func (i *iGameServersService) QueryLoginTokenV1(
	input IGameServersServiceQueryLoginTokenV1Input,
) (Response, error) {
	p := getPath("IGameServersService", "QueryLoginToken", 1)
	request := map[string]string{
		"key":        fmt.Sprintf(`%v`, input.Key),
		"loginToken": fmt.Sprintf(`%v`, input.LoginToken),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IGameServersServiceGetServerSteamIDsByIPV1Input struct {
	Key       string
	ServerIps string
}

func (i *iGameServersService) GetServerSteamIDsByIPV1(
	input IGameServersServiceGetServerSteamIDsByIPV1Input,
) (Response, error) {
	p := getPath("IGameServersService", "GetServerSteamIDsByIP", 1)
	request := map[string]string{
		"key":       fmt.Sprintf(`%v`, input.Key),
		"serverIps": fmt.Sprintf(`%v`, input.ServerIps),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IGameServersServiceGetServerIPsBySteamIDV1Input struct {
	Key            string
	ServerSteamids uint64
}

func (i *iGameServersService) GetServerIPsBySteamIDV1(
	input IGameServersServiceGetServerIPsBySteamIDV1Input,
) (Response, error) {
	p := getPath("IGameServersService", "GetServerIPsBySteamID", 1)
	request := map[string]string{
		"key":            fmt.Sprintf(`%v`, input.Key),
		"serverSteamids": fmt.Sprintf(`%v`, input.ServerSteamids),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IGameServersServiceQueryByFakeIPV1Input struct {
	Key       string
	FakeIp    uint32
	FakePort  uint32
	AppId     uint32
	QueryType any
}

func (i *iGameServersService) QueryByFakeIPV1(
	input IGameServersServiceQueryByFakeIPV1Input,
) (Response, error) {
	p := getPath("IGameServersService", "QueryByFakeIP", 1)
	request := map[string]string{
		"key":       fmt.Sprintf(`%v`, input.Key),
		"fakeIp":    fmt.Sprintf(`%v`, input.FakeIp),
		"fakePort":  fmt.Sprintf(`%v`, input.FakePort),
		"appId":     fmt.Sprintf(`%v`, input.AppId),
		"queryType": fmt.Sprintf(`%v`, input.QueryType),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iPlayerService struct {
}

type IPlayerService interface {
	IsPlayingSharedGameV1(input IPlayerServiceIsPlayingSharedGameV1Input) (Response, error)
	RecordOfflinePlaytimeV1(input IPlayerServiceRecordOfflinePlaytimeV1Input) (Response, error)
	GetRecentlyPlayedGamesV1(input IPlayerServiceGetRecentlyPlayedGamesV1Input) (Response, error)
	GetOwnedGamesV1(input IPlayerServiceGetOwnedGamesV1Input) (Response, error)
	GetSteamLevelV1(input IPlayerServiceGetSteamLevelV1Input) (Response, error)
	GetBadgesV1(input IPlayerServiceGetBadgesV1Input) (Response, error)
	GetCommunityBadgeProgressV1(input IPlayerServiceGetCommunityBadgeProgressV1Input) (Response, error)
}

func NewIPlayerService() IPlayerService {
	return &iPlayerService{}
}

type IPlayerServiceIsPlayingSharedGameV1Input struct {
	Key          string
	Steamid      uint64
	AppidPlaying uint32
}

func (i *iPlayerService) IsPlayingSharedGameV1(
	input IPlayerServiceIsPlayingSharedGameV1Input,
) (Response, error) {
	p := getPath("IPlayerService", "IsPlayingSharedGame", 1)
	request := map[string]string{
		"key":          fmt.Sprintf(`%v`, input.Key),
		"steamid":      fmt.Sprintf(`%v`, input.Steamid),
		"appidPlaying": fmt.Sprintf(`%v`, input.AppidPlaying),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IPlayerServiceRecordOfflinePlaytimeV1Input struct {
	Steamid      uint64
	Ticket       string
	PlaySessions any
}

func (i *iPlayerService) RecordOfflinePlaytimeV1(
	input IPlayerServiceRecordOfflinePlaytimeV1Input,
) (Response, error) {
	p := getPath("IPlayerService", "RecordOfflinePlaytime", 1)
	request := map[string]string{
		"steamid":      fmt.Sprintf(`%v`, input.Steamid),
		"ticket":       fmt.Sprintf(`%v`, input.Ticket),
		"playSessions": fmt.Sprintf(`%v`, input.PlaySessions),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IPlayerServiceGetRecentlyPlayedGamesV1Input struct {
	Key     string
	Steamid uint64
	Count   uint32
}

func (i *iPlayerService) GetRecentlyPlayedGamesV1(
	input IPlayerServiceGetRecentlyPlayedGamesV1Input,
) (Response, error) {
	p := getPath("IPlayerService", "GetRecentlyPlayedGames", 1)
	request := map[string]string{
		"key":     fmt.Sprintf(`%v`, input.Key),
		"steamid": fmt.Sprintf(`%v`, input.Steamid),
		"count":   fmt.Sprintf(`%v`, input.Count),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IPlayerServiceGetOwnedGamesV1Input struct {
	Key                    string
	Steamid                uint64
	IncludeAppinfo         bool
	IncludePlayedFreeGames bool
	AppidsFilter           uint32
	IncludeFreeSub         bool
	SkipUnvettedApps       bool
	Language               string
	IncludeExtendedAppinfo bool
}

func (i *iPlayerService) GetOwnedGamesV1(
	input IPlayerServiceGetOwnedGamesV1Input,
) (Response, error) {
	p := getPath("IPlayerService", "GetOwnedGames", 1)
	request := map[string]string{
		"key":                    fmt.Sprintf(`%v`, input.Key),
		"steamid":                fmt.Sprintf(`%v`, input.Steamid),
		"includeAppinfo":         fmt.Sprintf(`%v`, input.IncludeAppinfo),
		"includePlayedFreeGames": fmt.Sprintf(`%v`, input.IncludePlayedFreeGames),
		"appidsFilter":           fmt.Sprintf(`%v`, input.AppidsFilter),
		"includeFreeSub":         fmt.Sprintf(`%v`, input.IncludeFreeSub),
		"skipUnvettedApps":       fmt.Sprintf(`%v`, input.SkipUnvettedApps),
		"language":               fmt.Sprintf(`%v`, input.Language),
		"includeExtendedAppinfo": fmt.Sprintf(`%v`, input.IncludeExtendedAppinfo),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IPlayerServiceGetSteamLevelV1Input struct {
	Key     string
	Steamid uint64
}

func (i *iPlayerService) GetSteamLevelV1(
	input IPlayerServiceGetSteamLevelV1Input,
) (Response, error) {
	p := getPath("IPlayerService", "GetSteamLevel", 1)
	request := map[string]string{
		"key":     fmt.Sprintf(`%v`, input.Key),
		"steamid": fmt.Sprintf(`%v`, input.Steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IPlayerServiceGetBadgesV1Input struct {
	Key     string
	Steamid uint64
}

func (i *iPlayerService) GetBadgesV1(
	input IPlayerServiceGetBadgesV1Input,
) (Response, error) {
	p := getPath("IPlayerService", "GetBadges", 1)
	request := map[string]string{
		"key":     fmt.Sprintf(`%v`, input.Key),
		"steamid": fmt.Sprintf(`%v`, input.Steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IPlayerServiceGetCommunityBadgeProgressV1Input struct {
	Key     string
	Steamid uint64
	Badgeid int32
}

func (i *iPlayerService) GetCommunityBadgeProgressV1(
	input IPlayerServiceGetCommunityBadgeProgressV1Input,
) (Response, error) {
	p := getPath("IPlayerService", "GetCommunityBadgeProgress", 1)
	request := map[string]string{
		"key":     fmt.Sprintf(`%v`, input.Key),
		"steamid": fmt.Sprintf(`%v`, input.Steamid),
		"badgeid": fmt.Sprintf(`%v`, input.Badgeid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iAuthenticationService struct {
}

type IAuthenticationService interface {
	PollAuthSessionStatusV1(input IAuthenticationServicePollAuthSessionStatusV1Input) (Response, error)
	GetAuthSessionInfoV1(input IAuthenticationServiceGetAuthSessionInfoV1Input) (Response, error)
	GetPasswordRSAPublicKeyV1(input IAuthenticationServiceGetPasswordRSAPublicKeyV1Input) (Response, error)
	BeginAuthSessionViaCredentialsV1(input IAuthenticationServiceBeginAuthSessionViaCredentialsV1Input) (Response, error)
	UpdateAuthSessionWithSteamGuardCodeV1(input IAuthenticationServiceUpdateAuthSessionWithSteamGuardCodeV1Input) (Response, error)
	BeginAuthSessionViaQRV1(input IAuthenticationServiceBeginAuthSessionViaQRV1Input) (Response, error)
	UpdateAuthSessionWithMobileConfirmationV1(input IAuthenticationServiceUpdateAuthSessionWithMobileConfirmationV1Input) (Response, error)
}

func NewIAuthenticationService() IAuthenticationService {
	return &iAuthenticationService{}
}

type IAuthenticationServicePollAuthSessionStatusV1Input struct {
	ClientId      uint64
	RequestId     string
	TokenToRevoke uint64
}

func (i *iAuthenticationService) PollAuthSessionStatusV1(
	input IAuthenticationServicePollAuthSessionStatusV1Input,
) (Response, error) {
	p := getPath("IAuthenticationService", "PollAuthSessionStatus", 1)
	request := map[string]string{
		"clientId":      fmt.Sprintf(`%v`, input.ClientId),
		"requestId":     fmt.Sprintf(`%v`, input.RequestId),
		"tokenToRevoke": fmt.Sprintf(`%v`, input.TokenToRevoke),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IAuthenticationServiceGetAuthSessionInfoV1Input struct {
	ClientId uint64
}

func (i *iAuthenticationService) GetAuthSessionInfoV1(
	input IAuthenticationServiceGetAuthSessionInfoV1Input,
) (Response, error) {
	p := getPath("IAuthenticationService", "GetAuthSessionInfo", 1)
	request := map[string]string{
		"clientId": fmt.Sprintf(`%v`, input.ClientId),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IAuthenticationServiceGetPasswordRSAPublicKeyV1Input struct {
	AccountName string
}

func (i *iAuthenticationService) GetPasswordRSAPublicKeyV1(
	input IAuthenticationServiceGetPasswordRSAPublicKeyV1Input,
) (Response, error) {
	p := getPath("IAuthenticationService", "GetPasswordRSAPublicKey", 1)
	request := map[string]string{
		"accountName": fmt.Sprintf(`%v`, input.AccountName),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IAuthenticationServiceBeginAuthSessionViaCredentialsV1Input struct {
	DeviceFriendlyName  string
	AccountName         string
	EncryptedPassword   string
	EncryptionTimestamp uint64
	RememberLogin       bool
	PlatformType        any
	Persistence         any
	WebsiteId           string
	DeviceDetails       any
	GuardData           string
	Language            uint32
	QosLevel            int32
}

func (i *iAuthenticationService) BeginAuthSessionViaCredentialsV1(
	input IAuthenticationServiceBeginAuthSessionViaCredentialsV1Input,
) (Response, error) {
	p := getPath("IAuthenticationService", "BeginAuthSessionViaCredentials", 1)
	request := map[string]string{
		"deviceFriendlyName":  fmt.Sprintf(`%v`, input.DeviceFriendlyName),
		"accountName":         fmt.Sprintf(`%v`, input.AccountName),
		"encryptedPassword":   fmt.Sprintf(`%v`, input.EncryptedPassword),
		"encryptionTimestamp": fmt.Sprintf(`%v`, input.EncryptionTimestamp),
		"rememberLogin":       fmt.Sprintf(`%v`, input.RememberLogin),
		"platformType":        fmt.Sprintf(`%v`, input.PlatformType),
		"persistence":         fmt.Sprintf(`%v`, input.Persistence),
		"websiteId":           fmt.Sprintf(`%v`, input.WebsiteId),
		"deviceDetails":       fmt.Sprintf(`%v`, input.DeviceDetails),
		"guardData":           fmt.Sprintf(`%v`, input.GuardData),
		"language":            fmt.Sprintf(`%v`, input.Language),
		"qosLevel":            fmt.Sprintf(`%v`, input.QosLevel),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IAuthenticationServiceUpdateAuthSessionWithSteamGuardCodeV1Input struct {
	ClientId uint64
	Steamid  uint64
	Code     string
	CodeType any
}

func (i *iAuthenticationService) UpdateAuthSessionWithSteamGuardCodeV1(
	input IAuthenticationServiceUpdateAuthSessionWithSteamGuardCodeV1Input,
) (Response, error) {
	p := getPath("IAuthenticationService", "UpdateAuthSessionWithSteamGuardCode", 1)
	request := map[string]string{
		"clientId": fmt.Sprintf(`%v`, input.ClientId),
		"steamid":  fmt.Sprintf(`%v`, input.Steamid),
		"code":     fmt.Sprintf(`%v`, input.Code),
		"codeType": fmt.Sprintf(`%v`, input.CodeType),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IAuthenticationServiceBeginAuthSessionViaQRV1Input struct {
	DeviceFriendlyName string
	PlatformType       any
	DeviceDetails      any
	WebsiteId          string
}

func (i *iAuthenticationService) BeginAuthSessionViaQRV1(
	input IAuthenticationServiceBeginAuthSessionViaQRV1Input,
) (Response, error) {
	p := getPath("IAuthenticationService", "BeginAuthSessionViaQR", 1)
	request := map[string]string{
		"deviceFriendlyName": fmt.Sprintf(`%v`, input.DeviceFriendlyName),
		"platformType":       fmt.Sprintf(`%v`, input.PlatformType),
		"deviceDetails":      fmt.Sprintf(`%v`, input.DeviceDetails),
		"websiteId":          fmt.Sprintf(`%v`, input.WebsiteId),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IAuthenticationServiceUpdateAuthSessionWithMobileConfirmationV1Input struct {
	Version     int32
	ClientId    uint64
	Steamid     uint64
	Signature   string
	Confirm     bool
	Persistence any
}

func (i *iAuthenticationService) UpdateAuthSessionWithMobileConfirmationV1(
	input IAuthenticationServiceUpdateAuthSessionWithMobileConfirmationV1Input,
) (Response, error) {
	p := getPath("IAuthenticationService", "UpdateAuthSessionWithMobileConfirmation", 1)
	request := map[string]string{
		"version":     fmt.Sprintf(`%v`, input.Version),
		"clientId":    fmt.Sprintf(`%v`, input.ClientId),
		"steamid":     fmt.Sprintf(`%v`, input.Steamid),
		"signature":   fmt.Sprintf(`%v`, input.Signature),
		"confirm":     fmt.Sprintf(`%v`, input.Confirm),
		"persistence": fmt.Sprintf(`%v`, input.Persistence),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iBroadcastService struct {
}

type IBroadcastService interface {
	PostGameDataFrameRTMPV1(input IBroadcastServicePostGameDataFrameRTMPV1Input) (Response, error)
}

func NewIBroadcastService() IBroadcastService {
	return &iBroadcastService{}
}

type IBroadcastServicePostGameDataFrameRTMPV1Input struct {
	Appid     uint32
	Steamid   uint64
	RtmpToken string
	FrameData string
}

func (i *iBroadcastService) PostGameDataFrameRTMPV1(
	input IBroadcastServicePostGameDataFrameRTMPV1Input,
) (Response, error) {
	p := getPath("IBroadcastService", "PostGameDataFrameRTMP", 1)
	request := map[string]string{
		"appid":     fmt.Sprintf(`%v`, input.Appid),
		"steamid":   fmt.Sprintf(`%v`, input.Steamid),
		"rtmpToken": fmt.Sprintf(`%v`, input.RtmpToken),
		"frameData": fmt.Sprintf(`%v`, input.FrameData),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iContentServerConfigService struct {
}

type IContentServerConfigService interface {
	SetSteamCacheClientFiltersV1(input IContentServerConfigServiceSetSteamCacheClientFiltersV1Input) (Response, error)
	GetSteamCacheNodeParamsV1(input IContentServerConfigServiceGetSteamCacheNodeParamsV1Input) (Response, error)
	SetSteamCachePerformanceStatsV1(input IContentServerConfigServiceSetSteamCachePerformanceStatsV1Input) (Response, error)
}

func NewIContentServerConfigService() IContentServerConfigService {
	return &iContentServerConfigService{}
}

type IContentServerConfigServiceSetSteamCacheClientFiltersV1Input struct {
	Key             string
	CacheId         uint32
	CacheKey        string
	ChangeNotes     string
	AllowedIpBlocks string
}

func (i *iContentServerConfigService) SetSteamCacheClientFiltersV1(
	input IContentServerConfigServiceSetSteamCacheClientFiltersV1Input,
) (Response, error) {
	p := getPath("IContentServerConfigService", "SetSteamCacheClientFilters", 1)
	request := map[string]string{
		"key":             fmt.Sprintf(`%v`, input.Key),
		"cacheId":         fmt.Sprintf(`%v`, input.CacheId),
		"cacheKey":        fmt.Sprintf(`%v`, input.CacheKey),
		"changeNotes":     fmt.Sprintf(`%v`, input.ChangeNotes),
		"allowedIpBlocks": fmt.Sprintf(`%v`, input.AllowedIpBlocks),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IContentServerConfigServiceGetSteamCacheNodeParamsV1Input struct {
	Key      string
	CacheId  uint32
	CacheKey string
}

func (i *iContentServerConfigService) GetSteamCacheNodeParamsV1(
	input IContentServerConfigServiceGetSteamCacheNodeParamsV1Input,
) (Response, error) {
	p := getPath("IContentServerConfigService", "GetSteamCacheNodeParams", 1)
	request := map[string]string{
		"key":      fmt.Sprintf(`%v`, input.Key),
		"cacheId":  fmt.Sprintf(`%v`, input.CacheId),
		"cacheKey": fmt.Sprintf(`%v`, input.CacheKey),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IContentServerConfigServiceSetSteamCachePerformanceStatsV1Input struct {
	Key                       string
	CacheId                   uint32
	CacheKey                  string
	MbpsSent                  uint32
	MbpsRecv                  uint32
	CpuPercent                uint32
	CacheHitPercent           uint32
	NumConnectedIps           uint32
	UpstreamEgressUtilization uint32
}

func (i *iContentServerConfigService) SetSteamCachePerformanceStatsV1(
	input IContentServerConfigServiceSetSteamCachePerformanceStatsV1Input,
) (Response, error) {
	p := getPath("IContentServerConfigService", "SetSteamCachePerformanceStats", 1)
	request := map[string]string{
		"key":                       fmt.Sprintf(`%v`, input.Key),
		"cacheId":                   fmt.Sprintf(`%v`, input.CacheId),
		"cacheKey":                  fmt.Sprintf(`%v`, input.CacheKey),
		"mbpsSent":                  fmt.Sprintf(`%v`, input.MbpsSent),
		"mbpsRecv":                  fmt.Sprintf(`%v`, input.MbpsRecv),
		"cpuPercent":                fmt.Sprintf(`%v`, input.CpuPercent),
		"cacheHitPercent":           fmt.Sprintf(`%v`, input.CacheHitPercent),
		"numConnectedIps":           fmt.Sprintf(`%v`, input.NumConnectedIps),
		"upstreamEgressUtilization": fmt.Sprintf(`%v`, input.UpstreamEgressUtilization),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iContentServerDirectoryService struct {
}

type IContentServerDirectoryService interface {
	GetServersForSteamPipeV1(input IContentServerDirectoryServiceGetServersForSteamPipeV1Input) (Response, error)
	GetClientUpdateHostsV1(input IContentServerDirectoryServiceGetClientUpdateHostsV1Input) (Response, error)
	GetDepotPatchInfoV1(input IContentServerDirectoryServiceGetDepotPatchInfoV1Input) (Response, error)
}

func NewIContentServerDirectoryService() IContentServerDirectoryService {
	return &iContentServerDirectoryService{}
}

type IContentServerDirectoryServiceGetServersForSteamPipeV1Input struct {
	CellId       uint32
	MaxServers   uint32
	IpOverride   string
	LauncherType int32
	Ipv6Public   string
}

func (i *iContentServerDirectoryService) GetServersForSteamPipeV1(
	input IContentServerDirectoryServiceGetServersForSteamPipeV1Input,
) (Response, error) {
	p := getPath("IContentServerDirectoryService", "GetServersForSteamPipe", 1)
	request := map[string]string{
		"cellId":       fmt.Sprintf(`%v`, input.CellId),
		"maxServers":   fmt.Sprintf(`%v`, input.MaxServers),
		"ipOverride":   fmt.Sprintf(`%v`, input.IpOverride),
		"launcherType": fmt.Sprintf(`%v`, input.LauncherType),
		"ipv6Public":   fmt.Sprintf(`%v`, input.Ipv6Public),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IContentServerDirectoryServiceGetClientUpdateHostsV1Input struct {
	CachedSignature string
}

func (i *iContentServerDirectoryService) GetClientUpdateHostsV1(
	input IContentServerDirectoryServiceGetClientUpdateHostsV1Input,
) (Response, error) {
	p := getPath("IContentServerDirectoryService", "GetClientUpdateHosts", 1)
	request := map[string]string{
		"cachedSignature": fmt.Sprintf(`%v`, input.CachedSignature),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IContentServerDirectoryServiceGetDepotPatchInfoV1Input struct {
	Appid            uint32
	Depotid          uint32
	SourceManifestid uint64
	TargetManifestid uint64
}

func (i *iContentServerDirectoryService) GetDepotPatchInfoV1(
	input IContentServerDirectoryServiceGetDepotPatchInfoV1Input,
) (Response, error) {
	p := getPath("IContentServerDirectoryService", "GetDepotPatchInfo", 1)
	request := map[string]string{
		"appid":            fmt.Sprintf(`%v`, input.Appid),
		"depotid":          fmt.Sprintf(`%v`, input.Depotid),
		"sourceManifestid": fmt.Sprintf(`%v`, input.SourceManifestid),
		"targetManifestid": fmt.Sprintf(`%v`, input.TargetManifestid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iPublishedFileService struct {
}

type IPublishedFileService interface {
	GetUserVoteSummaryV1(input IPublishedFileServiceGetUserVoteSummaryV1Input) (Response, error)
	QueryFilesV1(input IPublishedFileServiceQueryFilesV1Input) (Response, error)
	GetSubSectionDataV1(input IPublishedFileServiceGetSubSectionDataV1Input) (Response, error)
	GetDetailsV1(input IPublishedFileServiceGetDetailsV1Input) (Response, error)
	GetUserFilesV1(input IPublishedFileServiceGetUserFilesV1Input) (Response, error)
	GetUserFileCountV1(input IPublishedFileServiceGetUserFileCountV1Input) (Response, error)
}

func NewIPublishedFileService() IPublishedFileService {
	return &iPublishedFileService{}
}

type IPublishedFileServiceGetUserVoteSummaryV1Input struct {
	Publishedfileids uint64
}

func (i *iPublishedFileService) GetUserVoteSummaryV1(
	input IPublishedFileServiceGetUserVoteSummaryV1Input,
) (Response, error) {
	p := getPath("IPublishedFileService", "GetUserVoteSummary", 1)
	request := map[string]string{
		"publishedfileids": fmt.Sprintf(`%v`, input.Publishedfileids),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IPublishedFileServiceQueryFilesV1Input struct {
	Key                        string
	QueryType                  uint32
	Page                       uint32
	Cursor                     string
	Numperpage                 uint32
	CreatorAppid               uint32
	Appid                      uint32
	Requiredtags               string
	Excludedtags               string
	MatchAllTags               bool
	RequiredFlags              string
	OmittedFlags               string
	SearchText                 string
	Filetype                   uint32
	ChildPublishedfileid       uint64
	Days                       uint32
	IncludeRecentVotesOnly     bool
	CacheMaxAgeSeconds         uint32
	Language                   int32
	RequiredKvTags             any
	Taggroups                  any
	DateRangeCreated           any
	DateRangeUpdated           any
	ExcludedContentDescriptors any
	Totalonly                  bool
	IdsOnly                    bool
	ReturnVoteData             bool
	ReturnTags                 bool
	ReturnKvTags               bool
	ReturnPreviews             bool
	ReturnChildren             bool
	ReturnShortDescription     bool
	ReturnForSaleData          bool
	ReturnMetadata             bool
	ReturnPlaytimeStats        uint32
	ReturnDetails              bool
	StripDescriptionBbcode     bool
	DesiredRevision            any
	ReturnReactions            bool
}

func (i *iPublishedFileService) QueryFilesV1(
	input IPublishedFileServiceQueryFilesV1Input,
) (Response, error) {
	p := getPath("IPublishedFileService", "QueryFiles", 1)
	request := map[string]string{
		"key":                        fmt.Sprintf(`%v`, input.Key),
		"queryType":                  fmt.Sprintf(`%v`, input.QueryType),
		"page":                       fmt.Sprintf(`%v`, input.Page),
		"cursor":                     fmt.Sprintf(`%v`, input.Cursor),
		"numperpage":                 fmt.Sprintf(`%v`, input.Numperpage),
		"creatorAppid":               fmt.Sprintf(`%v`, input.CreatorAppid),
		"appid":                      fmt.Sprintf(`%v`, input.Appid),
		"requiredtags":               fmt.Sprintf(`%v`, input.Requiredtags),
		"excludedtags":               fmt.Sprintf(`%v`, input.Excludedtags),
		"matchAllTags":               fmt.Sprintf(`%v`, input.MatchAllTags),
		"requiredFlags":              fmt.Sprintf(`%v`, input.RequiredFlags),
		"omittedFlags":               fmt.Sprintf(`%v`, input.OmittedFlags),
		"searchText":                 fmt.Sprintf(`%v`, input.SearchText),
		"filetype":                   fmt.Sprintf(`%v`, input.Filetype),
		"childPublishedfileid":       fmt.Sprintf(`%v`, input.ChildPublishedfileid),
		"days":                       fmt.Sprintf(`%v`, input.Days),
		"includeRecentVotesOnly":     fmt.Sprintf(`%v`, input.IncludeRecentVotesOnly),
		"cacheMaxAgeSeconds":         fmt.Sprintf(`%v`, input.CacheMaxAgeSeconds),
		"language":                   fmt.Sprintf(`%v`, input.Language),
		"requiredKvTags":             fmt.Sprintf(`%v`, input.RequiredKvTags),
		"taggroups":                  fmt.Sprintf(`%v`, input.Taggroups),
		"dateRangeCreated":           fmt.Sprintf(`%v`, input.DateRangeCreated),
		"dateRangeUpdated":           fmt.Sprintf(`%v`, input.DateRangeUpdated),
		"excludedContentDescriptors": fmt.Sprintf(`%v`, input.ExcludedContentDescriptors),
		"totalonly":                  fmt.Sprintf(`%v`, input.Totalonly),
		"idsOnly":                    fmt.Sprintf(`%v`, input.IdsOnly),
		"returnVoteData":             fmt.Sprintf(`%v`, input.ReturnVoteData),
		"returnTags":                 fmt.Sprintf(`%v`, input.ReturnTags),
		"returnKvTags":               fmt.Sprintf(`%v`, input.ReturnKvTags),
		"returnPreviews":             fmt.Sprintf(`%v`, input.ReturnPreviews),
		"returnChildren":             fmt.Sprintf(`%v`, input.ReturnChildren),
		"returnShortDescription":     fmt.Sprintf(`%v`, input.ReturnShortDescription),
		"returnForSaleData":          fmt.Sprintf(`%v`, input.ReturnForSaleData),
		"returnMetadata":             fmt.Sprintf(`%v`, input.ReturnMetadata),
		"returnPlaytimeStats":        fmt.Sprintf(`%v`, input.ReturnPlaytimeStats),
		"returnDetails":              fmt.Sprintf(`%v`, input.ReturnDetails),
		"stripDescriptionBbcode":     fmt.Sprintf(`%v`, input.StripDescriptionBbcode),
		"desiredRevision":            fmt.Sprintf(`%v`, input.DesiredRevision),
		"returnReactions":            fmt.Sprintf(`%v`, input.ReturnReactions),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IPublishedFileServiceGetSubSectionDataV1Input struct {
	Key                string
	Publishedfileid    uint64
	ForTableOfContents bool
	SpecificSectionid  uint64
	DesiredRevision    any
}

func (i *iPublishedFileService) GetSubSectionDataV1(
	input IPublishedFileServiceGetSubSectionDataV1Input,
) (Response, error) {
	p := getPath("IPublishedFileService", "GetSubSectionData", 1)
	request := map[string]string{
		"key":                fmt.Sprintf(`%v`, input.Key),
		"publishedfileid":    fmt.Sprintf(`%v`, input.Publishedfileid),
		"forTableOfContents": fmt.Sprintf(`%v`, input.ForTableOfContents),
		"specificSectionid":  fmt.Sprintf(`%v`, input.SpecificSectionid),
		"desiredRevision":    fmt.Sprintf(`%v`, input.DesiredRevision),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IPublishedFileServiceGetDetailsV1Input struct {
	Key                       string
	Publishedfileids          uint64
	Includetags               bool
	Includeadditionalpreviews bool
	Includechildren           bool
	Includekvtags             bool
	Includevotes              bool
	ShortDescription          bool
	Includeforsaledata        bool
	Includemetadata           bool
	Language                  int32
	ReturnPlaytimeStats       uint32
	Appid                     uint32
	StripDescriptionBbcode    bool
	DesiredRevision           any
	Includereactions          bool
}

func (i *iPublishedFileService) GetDetailsV1(
	input IPublishedFileServiceGetDetailsV1Input,
) (Response, error) {
	p := getPath("IPublishedFileService", "GetDetails", 1)
	request := map[string]string{
		"key":                       fmt.Sprintf(`%v`, input.Key),
		"publishedfileids":          fmt.Sprintf(`%v`, input.Publishedfileids),
		"includetags":               fmt.Sprintf(`%v`, input.Includetags),
		"includeadditionalpreviews": fmt.Sprintf(`%v`, input.Includeadditionalpreviews),
		"includechildren":           fmt.Sprintf(`%v`, input.Includechildren),
		"includekvtags":             fmt.Sprintf(`%v`, input.Includekvtags),
		"includevotes":              fmt.Sprintf(`%v`, input.Includevotes),
		"shortDescription":          fmt.Sprintf(`%v`, input.ShortDescription),
		"includeforsaledata":        fmt.Sprintf(`%v`, input.Includeforsaledata),
		"includemetadata":           fmt.Sprintf(`%v`, input.Includemetadata),
		"language":                  fmt.Sprintf(`%v`, input.Language),
		"returnPlaytimeStats":       fmt.Sprintf(`%v`, input.ReturnPlaytimeStats),
		"appid":                     fmt.Sprintf(`%v`, input.Appid),
		"stripDescriptionBbcode":    fmt.Sprintf(`%v`, input.StripDescriptionBbcode),
		"desiredRevision":           fmt.Sprintf(`%v`, input.DesiredRevision),
		"includereactions":          fmt.Sprintf(`%v`, input.Includereactions),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IPublishedFileServiceGetUserFilesV1Input struct {
	Key                        string
	Steamid                    uint64
	Appid                      uint32
	Shortcutid                 uint32
	Page                       uint32
	Numperpage                 uint32
	T                          string
	Sortmethod                 string
	Privacy                    uint32
	Requiredtags               string
	Excludedtags               string
	RequiredKvTags             any
	Filetype                   uint32
	CreatorAppid               uint32
	MatchCloudFilename         string
	CacheMaxAgeSeconds         uint32
	Language                   int32
	Taggroups                  any
	ExcludedContentDescriptors any
	Totalonly                  bool
	IdsOnly                    bool
	ReturnVoteData             bool
	ReturnTags                 bool
	ReturnKvTags               bool
	ReturnPreviews             bool
	ReturnChildren             bool
	ReturnShortDescription     bool
	ReturnForSaleData          bool
	ReturnMetadata             bool
	ReturnPlaytimeStats        uint32
	StripDescriptionBbcode     bool
	ReturnReactions            bool
	StartindexOverride         uint32
	DesiredRevision            any
	ReturnApps                 bool
}

func (i *iPublishedFileService) GetUserFilesV1(
	input IPublishedFileServiceGetUserFilesV1Input,
) (Response, error) {
	p := getPath("IPublishedFileService", "GetUserFiles", 1)
	request := map[string]string{
		"key":                        fmt.Sprintf(`%v`, input.Key),
		"steamid":                    fmt.Sprintf(`%v`, input.Steamid),
		"appid":                      fmt.Sprintf(`%v`, input.Appid),
		"shortcutid":                 fmt.Sprintf(`%v`, input.Shortcutid),
		"page":                       fmt.Sprintf(`%v`, input.Page),
		"numperpage":                 fmt.Sprintf(`%v`, input.Numperpage),
		"t":                          fmt.Sprintf(`%v`, input.T),
		"sortmethod":                 fmt.Sprintf(`%v`, input.Sortmethod),
		"privacy":                    fmt.Sprintf(`%v`, input.Privacy),
		"requiredtags":               fmt.Sprintf(`%v`, input.Requiredtags),
		"excludedtags":               fmt.Sprintf(`%v`, input.Excludedtags),
		"requiredKvTags":             fmt.Sprintf(`%v`, input.RequiredKvTags),
		"filetype":                   fmt.Sprintf(`%v`, input.Filetype),
		"creatorAppid":               fmt.Sprintf(`%v`, input.CreatorAppid),
		"matchCloudFilename":         fmt.Sprintf(`%v`, input.MatchCloudFilename),
		"cacheMaxAgeSeconds":         fmt.Sprintf(`%v`, input.CacheMaxAgeSeconds),
		"language":                   fmt.Sprintf(`%v`, input.Language),
		"taggroups":                  fmt.Sprintf(`%v`, input.Taggroups),
		"excludedContentDescriptors": fmt.Sprintf(`%v`, input.ExcludedContentDescriptors),
		"totalonly":                  fmt.Sprintf(`%v`, input.Totalonly),
		"idsOnly":                    fmt.Sprintf(`%v`, input.IdsOnly),
		"returnVoteData":             fmt.Sprintf(`%v`, input.ReturnVoteData),
		"returnTags":                 fmt.Sprintf(`%v`, input.ReturnTags),
		"returnKvTags":               fmt.Sprintf(`%v`, input.ReturnKvTags),
		"returnPreviews":             fmt.Sprintf(`%v`, input.ReturnPreviews),
		"returnChildren":             fmt.Sprintf(`%v`, input.ReturnChildren),
		"returnShortDescription":     fmt.Sprintf(`%v`, input.ReturnShortDescription),
		"returnForSaleData":          fmt.Sprintf(`%v`, input.ReturnForSaleData),
		"returnMetadata":             fmt.Sprintf(`%v`, input.ReturnMetadata),
		"returnPlaytimeStats":        fmt.Sprintf(`%v`, input.ReturnPlaytimeStats),
		"stripDescriptionBbcode":     fmt.Sprintf(`%v`, input.StripDescriptionBbcode),
		"returnReactions":            fmt.Sprintf(`%v`, input.ReturnReactions),
		"startindexOverride":         fmt.Sprintf(`%v`, input.StartindexOverride),
		"desiredRevision":            fmt.Sprintf(`%v`, input.DesiredRevision),
		"returnApps":                 fmt.Sprintf(`%v`, input.ReturnApps),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IPublishedFileServiceGetUserFileCountV1Input struct {
	Key                        string
	Steamid                    uint64
	Appid                      uint32
	Shortcutid                 uint32
	Page                       uint32
	Numperpage                 uint32
	T                          string
	Sortmethod                 string
	Privacy                    uint32
	Requiredtags               string
	Excludedtags               string
	RequiredKvTags             any
	Filetype                   uint32
	CreatorAppid               uint32
	MatchCloudFilename         string
	CacheMaxAgeSeconds         uint32
	Language                   int32
	Taggroups                  any
	ExcludedContentDescriptors any
	Totalonly                  bool
	IdsOnly                    bool
	ReturnVoteData             bool
	ReturnTags                 bool
	ReturnKvTags               bool
	ReturnPreviews             bool
	ReturnChildren             bool
	ReturnShortDescription     bool
	ReturnForSaleData          bool
	ReturnMetadata             bool
	ReturnPlaytimeStats        uint32
	StripDescriptionBbcode     bool
	ReturnReactions            bool
	StartindexOverride         uint32
	DesiredRevision            any
	ReturnApps                 bool
}

func (i *iPublishedFileService) GetUserFileCountV1(
	input IPublishedFileServiceGetUserFileCountV1Input,
) (Response, error) {
	p := getPath("IPublishedFileService", "GetUserFileCount", 1)
	request := map[string]string{
		"key":                        fmt.Sprintf(`%v`, input.Key),
		"steamid":                    fmt.Sprintf(`%v`, input.Steamid),
		"appid":                      fmt.Sprintf(`%v`, input.Appid),
		"shortcutid":                 fmt.Sprintf(`%v`, input.Shortcutid),
		"page":                       fmt.Sprintf(`%v`, input.Page),
		"numperpage":                 fmt.Sprintf(`%v`, input.Numperpage),
		"t":                          fmt.Sprintf(`%v`, input.T),
		"sortmethod":                 fmt.Sprintf(`%v`, input.Sortmethod),
		"privacy":                    fmt.Sprintf(`%v`, input.Privacy),
		"requiredtags":               fmt.Sprintf(`%v`, input.Requiredtags),
		"excludedtags":               fmt.Sprintf(`%v`, input.Excludedtags),
		"requiredKvTags":             fmt.Sprintf(`%v`, input.RequiredKvTags),
		"filetype":                   fmt.Sprintf(`%v`, input.Filetype),
		"creatorAppid":               fmt.Sprintf(`%v`, input.CreatorAppid),
		"matchCloudFilename":         fmt.Sprintf(`%v`, input.MatchCloudFilename),
		"cacheMaxAgeSeconds":         fmt.Sprintf(`%v`, input.CacheMaxAgeSeconds),
		"language":                   fmt.Sprintf(`%v`, input.Language),
		"taggroups":                  fmt.Sprintf(`%v`, input.Taggroups),
		"excludedContentDescriptors": fmt.Sprintf(`%v`, input.ExcludedContentDescriptors),
		"totalonly":                  fmt.Sprintf(`%v`, input.Totalonly),
		"idsOnly":                    fmt.Sprintf(`%v`, input.IdsOnly),
		"returnVoteData":             fmt.Sprintf(`%v`, input.ReturnVoteData),
		"returnTags":                 fmt.Sprintf(`%v`, input.ReturnTags),
		"returnKvTags":               fmt.Sprintf(`%v`, input.ReturnKvTags),
		"returnPreviews":             fmt.Sprintf(`%v`, input.ReturnPreviews),
		"returnChildren":             fmt.Sprintf(`%v`, input.ReturnChildren),
		"returnShortDescription":     fmt.Sprintf(`%v`, input.ReturnShortDescription),
		"returnForSaleData":          fmt.Sprintf(`%v`, input.ReturnForSaleData),
		"returnMetadata":             fmt.Sprintf(`%v`, input.ReturnMetadata),
		"returnPlaytimeStats":        fmt.Sprintf(`%v`, input.ReturnPlaytimeStats),
		"stripDescriptionBbcode":     fmt.Sprintf(`%v`, input.StripDescriptionBbcode),
		"returnReactions":            fmt.Sprintf(`%v`, input.ReturnReactions),
		"startindexOverride":         fmt.Sprintf(`%v`, input.StartindexOverride),
		"desiredRevision":            fmt.Sprintf(`%v`, input.DesiredRevision),
		"returnApps":                 fmt.Sprintf(`%v`, input.ReturnApps),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iEconService struct {
}

type IEconService interface {
	GetTradeHistoryV1(input IEconServiceGetTradeHistoryV1Input) (Response, error)
	GetTradeStatusV1(input IEconServiceGetTradeStatusV1Input) (Response, error)
	GetTradeOffersV1(input IEconServiceGetTradeOffersV1Input) (Response, error)
	GetTradeOfferV1(input IEconServiceGetTradeOfferV1Input) (Response, error)
	GetTradeOffersSummaryV1(input IEconServiceGetTradeOffersSummaryV1Input) (Response, error)
	GetTradeHoldDurationsV1(input IEconServiceGetTradeHoldDurationsV1Input) (Response, error)
}

func NewIEconService() IEconService {
	return &iEconService{}
}

type IEconServiceGetTradeHistoryV1Input struct {
	Key               string
	MaxTrades         uint32
	StartAfterTime    uint32
	StartAfterTradeid uint64
	NavigatingBack    bool
	GetDescriptions   bool
	Language          string
	IncludeFailed     bool
	IncludeTotal      bool
}

func (i *iEconService) GetTradeHistoryV1(
	input IEconServiceGetTradeHistoryV1Input,
) (Response, error) {
	p := getPath("IEconService", "GetTradeHistory", 1)
	request := map[string]string{
		"key":               fmt.Sprintf(`%v`, input.Key),
		"maxTrades":         fmt.Sprintf(`%v`, input.MaxTrades),
		"startAfterTime":    fmt.Sprintf(`%v`, input.StartAfterTime),
		"startAfterTradeid": fmt.Sprintf(`%v`, input.StartAfterTradeid),
		"navigatingBack":    fmt.Sprintf(`%v`, input.NavigatingBack),
		"getDescriptions":   fmt.Sprintf(`%v`, input.GetDescriptions),
		"language":          fmt.Sprintf(`%v`, input.Language),
		"includeFailed":     fmt.Sprintf(`%v`, input.IncludeFailed),
		"includeTotal":      fmt.Sprintf(`%v`, input.IncludeTotal),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IEconServiceGetTradeStatusV1Input struct {
	Key             string
	Tradeid         uint64
	GetDescriptions bool
	Language        string
}

func (i *iEconService) GetTradeStatusV1(
	input IEconServiceGetTradeStatusV1Input,
) (Response, error) {
	p := getPath("IEconService", "GetTradeStatus", 1)
	request := map[string]string{
		"key":             fmt.Sprintf(`%v`, input.Key),
		"tradeid":         fmt.Sprintf(`%v`, input.Tradeid),
		"getDescriptions": fmt.Sprintf(`%v`, input.GetDescriptions),
		"language":        fmt.Sprintf(`%v`, input.Language),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IEconServiceGetTradeOffersV1Input struct {
	Key                  string
	GetSentOffers        bool
	GetReceivedOffers    bool
	GetDescriptions      bool
	Language             string
	ActiveOnly           bool
	HistoricalOnly       bool
	TimeHistoricalCutoff uint32
	Cursor               uint32
}

func (i *iEconService) GetTradeOffersV1(
	input IEconServiceGetTradeOffersV1Input,
) (Response, error) {
	p := getPath("IEconService", "GetTradeOffers", 1)
	request := map[string]string{
		"key":                  fmt.Sprintf(`%v`, input.Key),
		"getSentOffers":        fmt.Sprintf(`%v`, input.GetSentOffers),
		"getReceivedOffers":    fmt.Sprintf(`%v`, input.GetReceivedOffers),
		"getDescriptions":      fmt.Sprintf(`%v`, input.GetDescriptions),
		"language":             fmt.Sprintf(`%v`, input.Language),
		"activeOnly":           fmt.Sprintf(`%v`, input.ActiveOnly),
		"historicalOnly":       fmt.Sprintf(`%v`, input.HistoricalOnly),
		"timeHistoricalCutoff": fmt.Sprintf(`%v`, input.TimeHistoricalCutoff),
		"cursor":               fmt.Sprintf(`%v`, input.Cursor),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IEconServiceGetTradeOfferV1Input struct {
	Key             string
	Tradeofferid    uint64
	Language        string
	GetDescriptions bool
}

func (i *iEconService) GetTradeOfferV1(
	input IEconServiceGetTradeOfferV1Input,
) (Response, error) {
	p := getPath("IEconService", "GetTradeOffer", 1)
	request := map[string]string{
		"key":             fmt.Sprintf(`%v`, input.Key),
		"tradeofferid":    fmt.Sprintf(`%v`, input.Tradeofferid),
		"language":        fmt.Sprintf(`%v`, input.Language),
		"getDescriptions": fmt.Sprintf(`%v`, input.GetDescriptions),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IEconServiceGetTradeOffersSummaryV1Input struct {
	Key           string
	TimeLastVisit uint32
}

func (i *iEconService) GetTradeOffersSummaryV1(
	input IEconServiceGetTradeOffersSummaryV1Input,
) (Response, error) {
	p := getPath("IEconService", "GetTradeOffersSummary", 1)
	request := map[string]string{
		"key":           fmt.Sprintf(`%v`, input.Key),
		"timeLastVisit": fmt.Sprintf(`%v`, input.TimeLastVisit),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IEconServiceGetTradeHoldDurationsV1Input struct {
	Key                   string
	SteamidTarget         uint64
	TradeOfferAccessToken string
}

func (i *iEconService) GetTradeHoldDurationsV1(
	input IEconServiceGetTradeHoldDurationsV1Input,
) (Response, error) {
	p := getPath("IEconService", "GetTradeHoldDurations", 1)
	request := map[string]string{
		"key":                   fmt.Sprintf(`%v`, input.Key),
		"steamidTarget":         fmt.Sprintf(`%v`, input.SteamidTarget),
		"tradeOfferAccessToken": fmt.Sprintf(`%v`, input.TradeOfferAccessToken),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iGameNotificationsService struct {
}

type IGameNotificationsService interface {
	UserCreateSessionV1(input IGameNotificationsServiceUserCreateSessionV1Input) (Response, error)
	UserUpdateSessionV1(input IGameNotificationsServiceUserUpdateSessionV1Input) (Response, error)
	UserDeleteSessionV1(input IGameNotificationsServiceUserDeleteSessionV1Input) (Response, error)
}

func NewIGameNotificationsService() IGameNotificationsService {
	return &iGameNotificationsService{}
}

type IGameNotificationsServiceUserCreateSessionV1Input struct {
	Appid   uint32
	Context uint64
	Title   any
	Users   any
	Steamid uint64
}

func (i *iGameNotificationsService) UserCreateSessionV1(
	input IGameNotificationsServiceUserCreateSessionV1Input,
) (Response, error) {
	p := getPath("IGameNotificationsService", "UserCreateSession", 1)
	request := map[string]string{
		"appid":   fmt.Sprintf(`%v`, input.Appid),
		"context": fmt.Sprintf(`%v`, input.Context),
		"title":   fmt.Sprintf(`%v`, input.Title),
		"users":   fmt.Sprintf(`%v`, input.Users),
		"steamid": fmt.Sprintf(`%v`, input.Steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IGameNotificationsServiceUserUpdateSessionV1Input struct {
	Sessionid uint64
	Appid     uint32
	Title     any
	Users     any
	Steamid   uint64
}

func (i *iGameNotificationsService) UserUpdateSessionV1(
	input IGameNotificationsServiceUserUpdateSessionV1Input,
) (Response, error) {
	p := getPath("IGameNotificationsService", "UserUpdateSession", 1)
	request := map[string]string{
		"sessionid": fmt.Sprintf(`%v`, input.Sessionid),
		"appid":     fmt.Sprintf(`%v`, input.Appid),
		"title":     fmt.Sprintf(`%v`, input.Title),
		"users":     fmt.Sprintf(`%v`, input.Users),
		"steamid":   fmt.Sprintf(`%v`, input.Steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IGameNotificationsServiceUserDeleteSessionV1Input struct {
	Sessionid uint64
	Appid     uint32
	Steamid   uint64
}

func (i *iGameNotificationsService) UserDeleteSessionV1(
	input IGameNotificationsServiceUserDeleteSessionV1Input,
) (Response, error) {
	p := getPath("IGameNotificationsService", "UserDeleteSession", 1)
	request := map[string]string{
		"sessionid": fmt.Sprintf(`%v`, input.Sessionid),
		"appid":     fmt.Sprintf(`%v`, input.Appid),
		"steamid":   fmt.Sprintf(`%v`, input.Steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iInventoryService struct {
}

type IInventoryService interface {
	SplitItemStackV1(input IInventoryServiceSplitItemStackV1Input) (Response, error)
	CombineItemStacksV1(input IInventoryServiceCombineItemStacksV1Input) (Response, error)
	GetPriceSheetV1(input IInventoryServiceGetPriceSheetV1Input) (Response, error)
}

func NewIInventoryService() IInventoryService {
	return &iInventoryService{}
}

type IInventoryServiceSplitItemStackV1Input struct {
	Key      string
	Appid    uint32
	Itemid   uint64
	Quantity uint32
	Steamid  uint64
}

func (i *iInventoryService) SplitItemStackV1(
	input IInventoryServiceSplitItemStackV1Input,
) (Response, error) {
	p := getPath("IInventoryService", "SplitItemStack", 1)
	request := map[string]string{
		"key":      fmt.Sprintf(`%v`, input.Key),
		"appid":    fmt.Sprintf(`%v`, input.Appid),
		"itemid":   fmt.Sprintf(`%v`, input.Itemid),
		"quantity": fmt.Sprintf(`%v`, input.Quantity),
		"steamid":  fmt.Sprintf(`%v`, input.Steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IInventoryServiceCombineItemStacksV1Input struct {
	Key        string
	Appid      uint32
	Fromitemid uint64
	Destitemid uint64
	Quantity   uint32
	Steamid    uint64
}

func (i *iInventoryService) CombineItemStacksV1(
	input IInventoryServiceCombineItemStacksV1Input,
) (Response, error) {
	p := getPath("IInventoryService", "CombineItemStacks", 1)
	request := map[string]string{
		"key":        fmt.Sprintf(`%v`, input.Key),
		"appid":      fmt.Sprintf(`%v`, input.Appid),
		"fromitemid": fmt.Sprintf(`%v`, input.Fromitemid),
		"destitemid": fmt.Sprintf(`%v`, input.Destitemid),
		"quantity":   fmt.Sprintf(`%v`, input.Quantity),
		"steamid":    fmt.Sprintf(`%v`, input.Steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IInventoryServiceGetPriceSheetV1Input struct {
	Key          string
	Ecurrency    int32
	CurrencyCode string
}

func (i *iInventoryService) GetPriceSheetV1(
	input IInventoryServiceGetPriceSheetV1Input,
) (Response, error) {
	p := getPath("IInventoryService", "GetPriceSheet", 1)
	request := map[string]string{
		"key":          fmt.Sprintf(`%v`, input.Key),
		"ecurrency":    fmt.Sprintf(`%v`, input.Ecurrency),
		"currencyCode": fmt.Sprintf(`%v`, input.CurrencyCode),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iStoreService struct {
}

type IStoreService interface {
	GetAppListV1(input IStoreServiceGetAppListV1Input) (Response, error)
}

func NewIStoreService() IStoreService {
	return &iStoreService{}
}

type IStoreServiceGetAppListV1Input struct {
	Key                     string
	IfModifiedSince         uint32
	HaveDescriptionLanguage string
	IncludeGames            bool
	IncludeDlc              bool
	IncludeSoftware         bool
	IncludeVideos           bool
	IncludeHardware         bool
	LastAppid               uint32
	MaxResults              uint32
}

func (i *iStoreService) GetAppListV1(
	input IStoreServiceGetAppListV1Input,
) (Response, error) {
	p := getPath("IStoreService", "GetAppList", 1)
	request := map[string]string{
		"key":                     fmt.Sprintf(`%v`, input.Key),
		"ifModifiedSince":         fmt.Sprintf(`%v`, input.IfModifiedSince),
		"haveDescriptionLanguage": fmt.Sprintf(`%v`, input.HaveDescriptionLanguage),
		"includeGames":            fmt.Sprintf(`%v`, input.IncludeGames),
		"includeDlc":              fmt.Sprintf(`%v`, input.IncludeDlc),
		"includeSoftware":         fmt.Sprintf(`%v`, input.IncludeSoftware),
		"includeVideos":           fmt.Sprintf(`%v`, input.IncludeVideos),
		"includeHardware":         fmt.Sprintf(`%v`, input.IncludeHardware),
		"lastAppid":               fmt.Sprintf(`%v`, input.LastAppid),
		"maxResults":              fmt.Sprintf(`%v`, input.MaxResults),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iHelpRequestLogsService struct {
}

type IHelpRequestLogsService interface {
	UploadUserApplicationLogV1(input IHelpRequestLogsServiceUploadUserApplicationLogV1Input) (Response, error)
	GetApplicationLogDemandV1(input IHelpRequestLogsServiceGetApplicationLogDemandV1Input) (Response, error)
}

func NewIHelpRequestLogsService() IHelpRequestLogsService {
	return &iHelpRequestLogsService{}
}

type IHelpRequestLogsServiceUploadUserApplicationLogV1Input struct {
	Appid         uint32
	LogType       string
	VersionString string
	LogContents   string
	RequestId     uint64
}

func (i *iHelpRequestLogsService) UploadUserApplicationLogV1(
	input IHelpRequestLogsServiceUploadUserApplicationLogV1Input,
) (Response, error) {
	p := getPath("IHelpRequestLogsService", "UploadUserApplicationLog", 1)
	request := map[string]string{
		"appid":         fmt.Sprintf(`%v`, input.Appid),
		"logType":       fmt.Sprintf(`%v`, input.LogType),
		"versionString": fmt.Sprintf(`%v`, input.VersionString),
		"logContents":   fmt.Sprintf(`%v`, input.LogContents),
		"requestId":     fmt.Sprintf(`%v`, input.RequestId),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type IHelpRequestLogsServiceGetApplicationLogDemandV1Input struct {
	Appid uint32
}

func (i *iHelpRequestLogsService) GetApplicationLogDemandV1(
	input IHelpRequestLogsServiceGetApplicationLogDemandV1Input,
) (Response, error) {
	p := getPath("IHelpRequestLogsService", "GetApplicationLogDemand", 1)
	request := map[string]string{
		"appid": fmt.Sprintf(`%v`, input.Appid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iCheatReportingService struct {
}

type ICheatReportingService interface {
	ReportCheatDataV1(input ICheatReportingServiceReportCheatDataV1Input) (Response, error)
}

func NewICheatReportingService() ICheatReportingService {
	return &iCheatReportingService{}
}

type ICheatReportingServiceReportCheatDataV1Input struct {
	Key             string
	Steamid         uint64
	Appid           uint32
	Pathandfilename string
	Webcheaturl     string
	TimeNow         uint64
	TimeStarted     uint64
	TimeStopped     uint64
	Cheatname       string
	GameProcessId   uint32
	CheatProcessId  uint32
	CheatParam1     uint64
	CheatParam2     uint64
	CheatDataDump   string
}

func (i *iCheatReportingService) ReportCheatDataV1(
	input ICheatReportingServiceReportCheatDataV1Input,
) (Response, error) {
	p := getPath("ICheatReportingService", "ReportCheatData", 1)
	request := map[string]string{
		"key":             fmt.Sprintf(`%v`, input.Key),
		"steamid":         fmt.Sprintf(`%v`, input.Steamid),
		"appid":           fmt.Sprintf(`%v`, input.Appid),
		"pathandfilename": fmt.Sprintf(`%v`, input.Pathandfilename),
		"webcheaturl":     fmt.Sprintf(`%v`, input.Webcheaturl),
		"timeNow":         fmt.Sprintf(`%v`, input.TimeNow),
		"timeStarted":     fmt.Sprintf(`%v`, input.TimeStarted),
		"timeStopped":     fmt.Sprintf(`%v`, input.TimeStopped),
		"cheatname":       fmt.Sprintf(`%v`, input.Cheatname),
		"gameProcessId":   fmt.Sprintf(`%v`, input.GameProcessId),
		"cheatProcessId":  fmt.Sprintf(`%v`, input.CheatProcessId),
		"cheatParam1":     fmt.Sprintf(`%v`, input.CheatParam1),
		"cheatParam2":     fmt.Sprintf(`%v`, input.CheatParam2),
		"cheatDataDump":   fmt.Sprintf(`%v`, input.CheatDataDump),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
