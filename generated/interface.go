// Code generated by steamworkswebapigen. DO NOT EDIT.
// generated version: v0.1.0
package steamworks

import (
	"fmt"
	"strconv"
)

type iClientStats1046930 struct {
}

type IClientStats_1046930 interface {
	ReportEventV1() (Response, error)
}

func NewIClientStats_1046930() IClientStats_1046930 {
	return &iClientStats1046930{}
}

func (i *iClientStats1046930) ReportEventV1() (Response, error) {
	p := getPath("IClientStats_1046930", "ReportEvent", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type icsgoPlayers730 struct {
}

type ICSGOPlayers_730 interface {
	GetNextMatchSharingCodeV1(
		steamid uint64,
		steamidkey string,
		knowncode string,
	) (Response, error)
}

func NewICSGOPlayers_730() ICSGOPlayers_730 {
	return &icsgoPlayers730{}
}

func (i *icsgoPlayers730) GetNextMatchSharingCodeV1(
	steamid uint64,
	steamidkey string,
	knowncode string,
) (Response, error) {
	p := getPath("ICSGOPlayers_730", "GetNextMatchSharingCode", 1)
	request := map[string]string{
		"steamid":    fmt.Sprintf(`%v`, steamid),
		"steamidkey": steamidkey,
		"knowncode":  knowncode,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type icsgoServers730 struct {
}

type ICSGOServers_730 interface {
	GetGameMapsPlaytimeV1(
		interval string,
		gamemode string,
		mapgroup string,
	) (Response, error)
	GetGameServersStatusV1() (Response, error)
}

func NewICSGOServers_730() ICSGOServers_730 {
	return &icsgoServers730{}
}

func (i *icsgoServers730) GetGameMapsPlaytimeV1(
	interval string,
	gamemode string,
	mapgroup string,
) (Response, error) {
	p := getPath("ICSGOServers_730", "GetGameMapsPlaytime", 1)
	request := map[string]string{
		"interval": interval,
		"gamemode": gamemode,
		"mapgroup": mapgroup,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *icsgoServers730) GetGameServersStatusV1() (Response, error) {
	p := getPath("ICSGOServers_730", "GetGameServersStatus", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type icsgoTournaments730 struct {
}

type ICSGOTournaments_730 interface {
	GetTournamentFantasyLineupV1(
		event uint32,
		steamid uint64,
		steamidkey string,
	) (Response, error)
	GetTournamentItemsV1(
		event uint32,
		steamid uint64,
		steamidkey string,
	) (Response, error)
	GetTournamentLayoutV1(
		event uint32,
	) (Response, error)
	GetTournamentPredictionsV1(
		event uint32,
		steamid uint64,
		steamidkey string,
	) (Response, error)
	UploadTournamentFantasyLineupV1(
		event uint32,
		steamid uint64,
		steamidkey string,
		sectionid uint32,
		pickid0 uint32,
		itemid0 uint64,
		pickid1 uint32,
		itemid1 uint64,
		pickid2 uint32,
		itemid2 uint64,
		pickid3 uint32,
		itemid3 uint64,
		pickid4 uint32,
		itemid4 uint64,
	) (Response, error)
	UploadTournamentPredictionsV1(
		event uint32,
		steamid uint64,
		steamidkey string,
		sectionid uint32,
		groupid uint32,
		index uint32,
		pickid uint32,
		itemid uint64,
	) (Response, error)
}

func NewICSGOTournaments_730() ICSGOTournaments_730 {
	return &icsgoTournaments730{}
}

func (i *icsgoTournaments730) GetTournamentFantasyLineupV1(
	event uint32,
	steamid uint64,
	steamidkey string,
) (Response, error) {
	p := getPath("ICSGOTournaments_730", "GetTournamentFantasyLineup", 1)
	request := map[string]string{
		"event":      fmt.Sprintf(`%v`, event),
		"steamid":    fmt.Sprintf(`%v`, steamid),
		"steamidkey": steamidkey,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *icsgoTournaments730) GetTournamentItemsV1(
	event uint32,
	steamid uint64,
	steamidkey string,
) (Response, error) {
	p := getPath("ICSGOTournaments_730", "GetTournamentItems", 1)
	request := map[string]string{
		"event":      fmt.Sprintf(`%v`, event),
		"steamid":    fmt.Sprintf(`%v`, steamid),
		"steamidkey": steamidkey,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *icsgoTournaments730) GetTournamentLayoutV1(
	event uint32,
) (Response, error) {
	p := getPath("ICSGOTournaments_730", "GetTournamentLayout", 1)
	request := map[string]string{
		"event": fmt.Sprintf(`%v`, event),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *icsgoTournaments730) GetTournamentPredictionsV1(
	event uint32,
	steamid uint64,
	steamidkey string,
) (Response, error) {
	p := getPath("ICSGOTournaments_730", "GetTournamentPredictions", 1)
	request := map[string]string{
		"event":      fmt.Sprintf(`%v`, event),
		"steamid":    fmt.Sprintf(`%v`, steamid),
		"steamidkey": steamidkey,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *icsgoTournaments730) UploadTournamentFantasyLineupV1(
	event uint32,
	steamid uint64,
	steamidkey string,
	sectionid uint32,
	pickid0 uint32,
	itemid0 uint64,
	pickid1 uint32,
	itemid1 uint64,
	pickid2 uint32,
	itemid2 uint64,
	pickid3 uint32,
	itemid3 uint64,
	pickid4 uint32,
	itemid4 uint64,
) (Response, error) {
	p := getPath("ICSGOTournaments_730", "UploadTournamentFantasyLineup", 1)
	request := map[string]string{
		"event":      fmt.Sprintf(`%v`, event),
		"steamid":    fmt.Sprintf(`%v`, steamid),
		"steamidkey": steamidkey,
		"sectionid":  fmt.Sprintf(`%v`, sectionid),
		"pickid0":    fmt.Sprintf(`%v`, pickid0),
		"itemid0":    fmt.Sprintf(`%v`, itemid0),
		"pickid1":    fmt.Sprintf(`%v`, pickid1),
		"itemid1":    fmt.Sprintf(`%v`, itemid1),
		"pickid2":    fmt.Sprintf(`%v`, pickid2),
		"itemid2":    fmt.Sprintf(`%v`, itemid2),
		"pickid3":    fmt.Sprintf(`%v`, pickid3),
		"itemid3":    fmt.Sprintf(`%v`, itemid3),
		"pickid4":    fmt.Sprintf(`%v`, pickid4),
		"itemid4":    fmt.Sprintf(`%v`, itemid4),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *icsgoTournaments730) UploadTournamentPredictionsV1(
	event uint32,
	steamid uint64,
	steamidkey string,
	sectionid uint32,
	groupid uint32,
	index uint32,
	pickid uint32,
	itemid uint64,
) (Response, error) {
	p := getPath("ICSGOTournaments_730", "UploadTournamentPredictions", 1)
	request := map[string]string{
		"event":      fmt.Sprintf(`%v`, event),
		"steamid":    fmt.Sprintf(`%v`, steamid),
		"steamidkey": steamidkey,
		"sectionid":  fmt.Sprintf(`%v`, sectionid),
		"groupid":    fmt.Sprintf(`%v`, groupid),
		"index":      fmt.Sprintf(`%v`, index),
		"pickid":     fmt.Sprintf(`%v`, pickid),
		"itemid":     fmt.Sprintf(`%v`, itemid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type idota2matchStats205790 struct {
}

type IDOTA2MatchStats_205790 interface {
	GetRealtimeStatsV1(
		serverSteamId uint64,
	) (Response, error)
}

func NewIDOTA2MatchStats_205790() IDOTA2MatchStats_205790 {
	return &idota2matchStats205790{}
}

func (i *idota2matchStats205790) GetRealtimeStatsV1(
	serverSteamId uint64,
) (Response, error) {
	p := getPath("IDOTA2MatchStats_205790", "GetRealtimeStats", 1)
	request := map[string]string{
		"serverSteamId": fmt.Sprintf(`%v`, serverSteamId),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type idota2matchStats570 struct {
}

type IDOTA2MatchStats_570 interface {
	GetRealtimeStatsV1(
		serverSteamId uint64,
	) (Response, error)
}

func NewIDOTA2MatchStats_570() IDOTA2MatchStats_570 {
	return &idota2matchStats570{}
}

func (i *idota2matchStats570) GetRealtimeStatsV1(
	serverSteamId uint64,
) (Response, error) {
	p := getPath("IDOTA2MatchStats_570", "GetRealtimeStats", 1)
	request := map[string]string{
		"serverSteamId": fmt.Sprintf(`%v`, serverSteamId),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type idota2match205790 struct {
}

type IDOTA2Match_205790 interface {
	GetLiveLeagueGamesV1(
		leagueId uint32,
		matchId uint64,
		dpc bool,
	) (Response, error)
	GetMatchDetailsV1(
		matchId uint64,
		includePersonaNames bool,
	) (Response, error)
	GetMatchHistoryV1(
		heroId uint32,
		gameMode uint32,
		skill uint32,
		minPlayers string,
		accountId string,
		leagueId string,
		startAtMatchId uint64,
		matchesRequested string,
	) (Response, error)
	GetMatchHistoryBySequenceNumV1(
		startAtMatchSeqNum uint64,
		matchesRequested uint32,
	) (Response, error)
	GetTeamInfoByTeamIDV1(
		startAtTeamId uint64,
		teamsRequested uint32,
	) (Response, error)
	GetTopLiveEventGameV1(
		partner int32,
	) (Response, error)
	GetTopLiveGameV1(
		partner int32,
	) (Response, error)
	GetTopWeekendTourneyGamesV1(
		partner int32,
		homeDivision int32,
	) (Response, error)
	GetTournamentPlayerStatsV1(
		accountId string,
		leagueId string,
		heroId string,
		timeFrame string,
		matchId uint64,
	) (Response, error)
	GetTournamentPlayerStatsV2(
		accountId string,
		leagueId string,
		heroId string,
		timeFrame string,
		matchId uint64,
		phaseId uint32,
	) (Response, error)
}

func NewIDOTA2Match_205790() IDOTA2Match_205790 {
	return &idota2match205790{}
}

func (i *idota2match205790) GetLiveLeagueGamesV1(
	leagueId uint32,
	matchId uint64,
	dpc bool,
) (Response, error) {
	p := getPath("IDOTA2Match_205790", "GetLiveLeagueGames", 1)
	request := map[string]string{
		"leagueId": fmt.Sprintf(`%v`, leagueId),
		"matchId":  fmt.Sprintf(`%v`, matchId),
		"dpc":      strconv.FormatBool(dpc),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *idota2match205790) GetMatchDetailsV1(
	matchId uint64,
	includePersonaNames bool,
) (Response, error) {
	p := getPath("IDOTA2Match_205790", "GetMatchDetails", 1)
	request := map[string]string{
		"matchId":             fmt.Sprintf(`%v`, matchId),
		"includePersonaNames": strconv.FormatBool(includePersonaNames),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *idota2match205790) GetMatchHistoryV1(
	heroId uint32,
	gameMode uint32,
	skill uint32,
	minPlayers string,
	accountId string,
	leagueId string,
	startAtMatchId uint64,
	matchesRequested string,
) (Response, error) {
	p := getPath("IDOTA2Match_205790", "GetMatchHistory", 1)
	request := map[string]string{
		"heroId":           fmt.Sprintf(`%v`, heroId),
		"gameMode":         fmt.Sprintf(`%v`, gameMode),
		"skill":            fmt.Sprintf(`%v`, skill),
		"minPlayers":       minPlayers,
		"accountId":        accountId,
		"leagueId":         leagueId,
		"startAtMatchId":   fmt.Sprintf(`%v`, startAtMatchId),
		"matchesRequested": matchesRequested,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *idota2match205790) GetMatchHistoryBySequenceNumV1(
	startAtMatchSeqNum uint64,
	matchesRequested uint32,
) (Response, error) {
	p := getPath("IDOTA2Match_205790", "GetMatchHistoryBySequenceNum", 1)
	request := map[string]string{
		"startAtMatchSeqNum": fmt.Sprintf(`%v`, startAtMatchSeqNum),
		"matchesRequested":   fmt.Sprintf(`%v`, matchesRequested),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *idota2match205790) GetTeamInfoByTeamIDV1(
	startAtTeamId uint64,
	teamsRequested uint32,
) (Response, error) {
	p := getPath("IDOTA2Match_205790", "GetTeamInfoByTeamID", 1)
	request := map[string]string{
		"startAtTeamId":  fmt.Sprintf(`%v`, startAtTeamId),
		"teamsRequested": fmt.Sprintf(`%v`, teamsRequested),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *idota2match205790) GetTopLiveEventGameV1(
	partner int32,
) (Response, error) {
	p := getPath("IDOTA2Match_205790", "GetTopLiveEventGame", 1)
	request := map[string]string{
		"partner": fmt.Sprintf(`%v`, partner),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *idota2match205790) GetTopLiveGameV1(
	partner int32,
) (Response, error) {
	p := getPath("IDOTA2Match_205790", "GetTopLiveGame", 1)
	request := map[string]string{
		"partner": fmt.Sprintf(`%v`, partner),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *idota2match205790) GetTopWeekendTourneyGamesV1(
	partner int32,
	homeDivision int32,
) (Response, error) {
	p := getPath("IDOTA2Match_205790", "GetTopWeekendTourneyGames", 1)
	request := map[string]string{
		"partner":      fmt.Sprintf(`%v`, partner),
		"homeDivision": fmt.Sprintf(`%v`, homeDivision),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *idota2match205790) GetTournamentPlayerStatsV1(
	accountId string,
	leagueId string,
	heroId string,
	timeFrame string,
	matchId uint64,
) (Response, error) {
	p := getPath("IDOTA2Match_205790", "GetTournamentPlayerStats", 1)
	request := map[string]string{
		"accountId": accountId,
		"leagueId":  leagueId,
		"heroId":    heroId,
		"timeFrame": timeFrame,
		"matchId":   fmt.Sprintf(`%v`, matchId),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *idota2match205790) GetTournamentPlayerStatsV2(
	accountId string,
	leagueId string,
	heroId string,
	timeFrame string,
	matchId uint64,
	phaseId uint32,
) (Response, error) {
	p := getPath("IDOTA2Match_205790", "GetTournamentPlayerStats", 2)
	request := map[string]string{
		"accountId": accountId,
		"leagueId":  leagueId,
		"heroId":    heroId,
		"timeFrame": timeFrame,
		"matchId":   fmt.Sprintf(`%v`, matchId),
		"phaseId":   fmt.Sprintf(`%v`, phaseId),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type idota2match570 struct {
}

type IDOTA2Match_570 interface {
	GetLiveLeagueGamesV1(
		leagueId uint32,
		matchId uint64,
		dpc bool,
	) (Response, error)
	GetMatchDetailsV1(
		matchId uint64,
		includePersonaNames bool,
	) (Response, error)
	GetMatchHistoryV1(
		heroId uint32,
		gameMode uint32,
		skill uint32,
		minPlayers string,
		accountId string,
		leagueId string,
		startAtMatchId uint64,
		matchesRequested string,
	) (Response, error)
	GetMatchHistoryBySequenceNumV1(
		startAtMatchSeqNum uint64,
		matchesRequested uint32,
	) (Response, error)
	GetTeamInfoByTeamIDV1(
		startAtTeamId uint64,
		teamsRequested uint32,
	) (Response, error)
	GetTopLiveEventGameV1(
		partner int32,
	) (Response, error)
	GetTopLiveGameV1(
		partner int32,
	) (Response, error)
	GetTopWeekendTourneyGamesV1(
		partner int32,
		homeDivision int32,
	) (Response, error)
	GetTournamentPlayerStatsV1(
		accountId string,
		leagueId string,
		heroId string,
		timeFrame string,
		matchId uint64,
	) (Response, error)
	GetTournamentPlayerStatsV2(
		accountId string,
		leagueId string,
		heroId string,
		timeFrame string,
		matchId uint64,
		phaseId uint32,
	) (Response, error)
}

func NewIDOTA2Match_570() IDOTA2Match_570 {
	return &idota2match570{}
}

func (i *idota2match570) GetLiveLeagueGamesV1(
	leagueId uint32,
	matchId uint64,
	dpc bool,
) (Response, error) {
	p := getPath("IDOTA2Match_570", "GetLiveLeagueGames", 1)
	request := map[string]string{
		"leagueId": fmt.Sprintf(`%v`, leagueId),
		"matchId":  fmt.Sprintf(`%v`, matchId),
		"dpc":      strconv.FormatBool(dpc),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *idota2match570) GetMatchDetailsV1(
	matchId uint64,
	includePersonaNames bool,
) (Response, error) {
	p := getPath("IDOTA2Match_570", "GetMatchDetails", 1)
	request := map[string]string{
		"matchId":             fmt.Sprintf(`%v`, matchId),
		"includePersonaNames": strconv.FormatBool(includePersonaNames),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *idota2match570) GetMatchHistoryV1(
	heroId uint32,
	gameMode uint32,
	skill uint32,
	minPlayers string,
	accountId string,
	leagueId string,
	startAtMatchId uint64,
	matchesRequested string,
) (Response, error) {
	p := getPath("IDOTA2Match_570", "GetMatchHistory", 1)
	request := map[string]string{
		"heroId":           fmt.Sprintf(`%v`, heroId),
		"gameMode":         fmt.Sprintf(`%v`, gameMode),
		"skill":            fmt.Sprintf(`%v`, skill),
		"minPlayers":       minPlayers,
		"accountId":        accountId,
		"leagueId":         leagueId,
		"startAtMatchId":   fmt.Sprintf(`%v`, startAtMatchId),
		"matchesRequested": matchesRequested,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *idota2match570) GetMatchHistoryBySequenceNumV1(
	startAtMatchSeqNum uint64,
	matchesRequested uint32,
) (Response, error) {
	p := getPath("IDOTA2Match_570", "GetMatchHistoryBySequenceNum", 1)
	request := map[string]string{
		"startAtMatchSeqNum": fmt.Sprintf(`%v`, startAtMatchSeqNum),
		"matchesRequested":   fmt.Sprintf(`%v`, matchesRequested),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *idota2match570) GetTeamInfoByTeamIDV1(
	startAtTeamId uint64,
	teamsRequested uint32,
) (Response, error) {
	p := getPath("IDOTA2Match_570", "GetTeamInfoByTeamID", 1)
	request := map[string]string{
		"startAtTeamId":  fmt.Sprintf(`%v`, startAtTeamId),
		"teamsRequested": fmt.Sprintf(`%v`, teamsRequested),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *idota2match570) GetTopLiveEventGameV1(
	partner int32,
) (Response, error) {
	p := getPath("IDOTA2Match_570", "GetTopLiveEventGame", 1)
	request := map[string]string{
		"partner": fmt.Sprintf(`%v`, partner),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *idota2match570) GetTopLiveGameV1(
	partner int32,
) (Response, error) {
	p := getPath("IDOTA2Match_570", "GetTopLiveGame", 1)
	request := map[string]string{
		"partner": fmt.Sprintf(`%v`, partner),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *idota2match570) GetTopWeekendTourneyGamesV1(
	partner int32,
	homeDivision int32,
) (Response, error) {
	p := getPath("IDOTA2Match_570", "GetTopWeekendTourneyGames", 1)
	request := map[string]string{
		"partner":      fmt.Sprintf(`%v`, partner),
		"homeDivision": fmt.Sprintf(`%v`, homeDivision),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *idota2match570) GetTournamentPlayerStatsV1(
	accountId string,
	leagueId string,
	heroId string,
	timeFrame string,
	matchId uint64,
) (Response, error) {
	p := getPath("IDOTA2Match_570", "GetTournamentPlayerStats", 1)
	request := map[string]string{
		"accountId": accountId,
		"leagueId":  leagueId,
		"heroId":    heroId,
		"timeFrame": timeFrame,
		"matchId":   fmt.Sprintf(`%v`, matchId),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *idota2match570) GetTournamentPlayerStatsV2(
	accountId string,
	leagueId string,
	heroId string,
	timeFrame string,
	matchId uint64,
	phaseId uint32,
) (Response, error) {
	p := getPath("IDOTA2Match_570", "GetTournamentPlayerStats", 2)
	request := map[string]string{
		"accountId": accountId,
		"leagueId":  leagueId,
		"heroId":    heroId,
		"timeFrame": timeFrame,
		"matchId":   fmt.Sprintf(`%v`, matchId),
		"phaseId":   fmt.Sprintf(`%v`, phaseId),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type idota2streamSystem205790 struct {
}

type IDOTA2StreamSystem_205790 interface {
	GetBroadcasterInfoV1(
		broadcasterSteamId uint64,
		leagueId uint32,
	) (Response, error)
}

func NewIDOTA2StreamSystem_205790() IDOTA2StreamSystem_205790 {
	return &idota2streamSystem205790{}
}

func (i *idota2streamSystem205790) GetBroadcasterInfoV1(
	broadcasterSteamId uint64,
	leagueId uint32,
) (Response, error) {
	p := getPath("IDOTA2StreamSystem_205790", "GetBroadcasterInfo", 1)
	request := map[string]string{
		"broadcasterSteamId": fmt.Sprintf(`%v`, broadcasterSteamId),
		"leagueId":           fmt.Sprintf(`%v`, leagueId),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type idota2streamSystem570 struct {
}

type IDOTA2StreamSystem_570 interface {
	GetBroadcasterInfoV1(
		broadcasterSteamId uint64,
		leagueId uint32,
	) (Response, error)
}

func NewIDOTA2StreamSystem_570() IDOTA2StreamSystem_570 {
	return &idota2streamSystem570{}
}

func (i *idota2streamSystem570) GetBroadcasterInfoV1(
	broadcasterSteamId uint64,
	leagueId uint32,
) (Response, error) {
	p := getPath("IDOTA2StreamSystem_570", "GetBroadcasterInfo", 1)
	request := map[string]string{
		"broadcasterSteamId": fmt.Sprintf(`%v`, broadcasterSteamId),
		"leagueId":           fmt.Sprintf(`%v`, leagueId),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type idota2ticket205790 struct {
}

type IDOTA2Ticket_205790 interface {
	GetSteamIDForBadgeIDV1(
		badgeId string,
	) (Response, error)
	SetSteamAccountPurchasedV1(
		steamid uint64,
		badgeType uint32,
	) (Response, error)
	SteamAccountValidForBadgeTypeV1(
		steamid uint64,
		validBadgeType1 uint32,
		validBadgeType2 uint32,
		validBadgeType3 uint32,
		validBadgeType4 uint32,
	) (Response, error)
}

func NewIDOTA2Ticket_205790() IDOTA2Ticket_205790 {
	return &idota2ticket205790{}
}

func (i *idota2ticket205790) GetSteamIDForBadgeIDV1(
	badgeId string,
) (Response, error) {
	p := getPath("IDOTA2Ticket_205790", "GetSteamIDForBadgeID", 1)
	request := map[string]string{
		"badgeId": badgeId,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *idota2ticket205790) SetSteamAccountPurchasedV1(
	steamid uint64,
	badgeType uint32,
) (Response, error) {
	p := getPath("IDOTA2Ticket_205790", "SetSteamAccountPurchased", 1)
	request := map[string]string{
		"steamid":   fmt.Sprintf(`%v`, steamid),
		"badgeType": fmt.Sprintf(`%v`, badgeType),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *idota2ticket205790) SteamAccountValidForBadgeTypeV1(
	steamid uint64,
	validBadgeType1 uint32,
	validBadgeType2 uint32,
	validBadgeType3 uint32,
	validBadgeType4 uint32,
) (Response, error) {
	p := getPath("IDOTA2Ticket_205790", "SteamAccountValidForBadgeType", 1)
	request := map[string]string{
		"steamid":         fmt.Sprintf(`%v`, steamid),
		"validBadgeType1": fmt.Sprintf(`%v`, validBadgeType1),
		"validBadgeType2": fmt.Sprintf(`%v`, validBadgeType2),
		"validBadgeType3": fmt.Sprintf(`%v`, validBadgeType3),
		"validBadgeType4": fmt.Sprintf(`%v`, validBadgeType4),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type idota2ticket570 struct {
}

type IDOTA2Ticket_570 interface {
	GetSteamIDForBadgeIDV1(
		badgeId string,
	) (Response, error)
	SetSteamAccountPurchasedV1(
		steamid uint64,
		badgeType uint32,
	) (Response, error)
	SteamAccountValidForBadgeTypeV1(
		steamid uint64,
		validBadgeType1 uint32,
		validBadgeType2 uint32,
		validBadgeType3 uint32,
		validBadgeType4 uint32,
	) (Response, error)
}

func NewIDOTA2Ticket_570() IDOTA2Ticket_570 {
	return &idota2ticket570{}
}

func (i *idota2ticket570) GetSteamIDForBadgeIDV1(
	badgeId string,
) (Response, error) {
	p := getPath("IDOTA2Ticket_570", "GetSteamIDForBadgeID", 1)
	request := map[string]string{
		"badgeId": badgeId,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *idota2ticket570) SetSteamAccountPurchasedV1(
	steamid uint64,
	badgeType uint32,
) (Response, error) {
	p := getPath("IDOTA2Ticket_570", "SetSteamAccountPurchased", 1)
	request := map[string]string{
		"steamid":   fmt.Sprintf(`%v`, steamid),
		"badgeType": fmt.Sprintf(`%v`, badgeType),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *idota2ticket570) SteamAccountValidForBadgeTypeV1(
	steamid uint64,
	validBadgeType1 uint32,
	validBadgeType2 uint32,
	validBadgeType3 uint32,
	validBadgeType4 uint32,
) (Response, error) {
	p := getPath("IDOTA2Ticket_570", "SteamAccountValidForBadgeType", 1)
	request := map[string]string{
		"steamid":         fmt.Sprintf(`%v`, steamid),
		"validBadgeType1": fmt.Sprintf(`%v`, validBadgeType1),
		"validBadgeType2": fmt.Sprintf(`%v`, validBadgeType2),
		"validBadgeType3": fmt.Sprintf(`%v`, validBadgeType3),
		"validBadgeType4": fmt.Sprintf(`%v`, validBadgeType4),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iEconDota2205790 struct {
}

type IEconDOTA2_205790 interface {
	GetEventStatsForAccountV1(
		eventid uint32,
		accountid uint32,
		language string,
	) (Response, error)
	GetGameItemsV1(
		language string,
	) (Response, error)
	GetHeroesV1(
		language string,
		itemizedonly bool,
	) (Response, error)
	GetItemCreatorsV1(
		itemdef uint32,
	) (Response, error)
	GetItemWorkshopPublishedFileIDsV1(
		itemdef uint32,
	) (Response, error)
	GetRaritiesV1(
		language string,
	) (Response, error)
	GetTournamentPrizePoolV1(
		leagueid uint32,
	) (Response, error)
}

func NewIEconDOTA2_205790() IEconDOTA2_205790 {
	return &iEconDota2205790{}
}

func (i *iEconDota2205790) GetEventStatsForAccountV1(
	eventid uint32,
	accountid uint32,
	language string,
) (Response, error) {
	p := getPath("IEconDOTA2_205790", "GetEventStatsForAccount", 1)
	request := map[string]string{
		"eventid":   fmt.Sprintf(`%v`, eventid),
		"accountid": fmt.Sprintf(`%v`, accountid),
		"language":  language,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iEconDota2205790) GetGameItemsV1(
	language string,
) (Response, error) {
	p := getPath("IEconDOTA2_205790", "GetGameItems", 1)
	request := map[string]string{
		"language": language,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iEconDota2205790) GetHeroesV1(
	language string,
	itemizedonly bool,
) (Response, error) {
	p := getPath("IEconDOTA2_205790", "GetHeroes", 1)
	request := map[string]string{
		"language":     language,
		"itemizedonly": strconv.FormatBool(itemizedonly),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iEconDota2205790) GetItemCreatorsV1(
	itemdef uint32,
) (Response, error) {
	p := getPath("IEconDOTA2_205790", "GetItemCreators", 1)
	request := map[string]string{
		"itemdef": fmt.Sprintf(`%v`, itemdef),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iEconDota2205790) GetItemWorkshopPublishedFileIDsV1(
	itemdef uint32,
) (Response, error) {
	p := getPath("IEconDOTA2_205790", "GetItemWorkshopPublishedFileIDs", 1)
	request := map[string]string{
		"itemdef": fmt.Sprintf(`%v`, itemdef),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iEconDota2205790) GetRaritiesV1(
	language string,
) (Response, error) {
	p := getPath("IEconDOTA2_205790", "GetRarities", 1)
	request := map[string]string{
		"language": language,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iEconDota2205790) GetTournamentPrizePoolV1(
	leagueid uint32,
) (Response, error) {
	p := getPath("IEconDOTA2_205790", "GetTournamentPrizePool", 1)
	request := map[string]string{
		"leagueid": fmt.Sprintf(`%v`, leagueid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iEconDota2570 struct {
}

type IEconDOTA2_570 interface {
	GetEventStatsForAccountV1(
		eventid uint32,
		accountid uint32,
		language string,
	) (Response, error)
	GetHeroesV1(
		language string,
		itemizedonly bool,
	) (Response, error)
	GetItemCreatorsV1(
		itemdef uint32,
	) (Response, error)
	GetItemWorkshopPublishedFileIDsV1(
		itemdef uint32,
	) (Response, error)
	GetRaritiesV1(
		language string,
	) (Response, error)
	GetTournamentPrizePoolV1(
		leagueid uint32,
	) (Response, error)
}

func NewIEconDOTA2_570() IEconDOTA2_570 {
	return &iEconDota2570{}
}

func (i *iEconDota2570) GetEventStatsForAccountV1(
	eventid uint32,
	accountid uint32,
	language string,
) (Response, error) {
	p := getPath("IEconDOTA2_570", "GetEventStatsForAccount", 1)
	request := map[string]string{
		"eventid":   fmt.Sprintf(`%v`, eventid),
		"accountid": fmt.Sprintf(`%v`, accountid),
		"language":  language,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iEconDota2570) GetHeroesV1(
	language string,
	itemizedonly bool,
) (Response, error) {
	p := getPath("IEconDOTA2_570", "GetHeroes", 1)
	request := map[string]string{
		"language":     language,
		"itemizedonly": strconv.FormatBool(itemizedonly),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iEconDota2570) GetItemCreatorsV1(
	itemdef uint32,
) (Response, error) {
	p := getPath("IEconDOTA2_570", "GetItemCreators", 1)
	request := map[string]string{
		"itemdef": fmt.Sprintf(`%v`, itemdef),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iEconDota2570) GetItemWorkshopPublishedFileIDsV1(
	itemdef uint32,
) (Response, error) {
	p := getPath("IEconDOTA2_570", "GetItemWorkshopPublishedFileIDs", 1)
	request := map[string]string{
		"itemdef": fmt.Sprintf(`%v`, itemdef),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iEconDota2570) GetRaritiesV1(
	language string,
) (Response, error) {
	p := getPath("IEconDOTA2_570", "GetRarities", 1)
	request := map[string]string{
		"language": language,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iEconDota2570) GetTournamentPrizePoolV1(
	leagueid uint32,
) (Response, error) {
	p := getPath("IEconDOTA2_570", "GetTournamentPrizePool", 1)
	request := map[string]string{
		"leagueid": fmt.Sprintf(`%v`, leagueid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iEconItems1046930 struct {
}

type IEconItems_1046930 interface {
	GetPlayerItemsV1(
		steamid uint64,
	) (Response, error)
}

func NewIEconItems_1046930() IEconItems_1046930 {
	return &iEconItems1046930{}
}

func (i *iEconItems1046930) GetPlayerItemsV1(
	steamid uint64,
) (Response, error) {
	p := getPath("IEconItems_1046930", "GetPlayerItems", 1)
	request := map[string]string{
		"steamid": fmt.Sprintf(`%v`, steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iEconItems1269260 struct {
}

type IEconItems_1269260 interface {
	GetEquippedPlayerItemsV1(
		steamid uint64,
		classId uint32,
	) (Response, error)
}

func NewIEconItems_1269260() IEconItems_1269260 {
	return &iEconItems1269260{}
}

func (i *iEconItems1269260) GetEquippedPlayerItemsV1(
	steamid uint64,
	classId uint32,
) (Response, error) {
	p := getPath("IEconItems_1269260", "GetEquippedPlayerItems", 1)
	request := map[string]string{
		"steamid": fmt.Sprintf(`%v`, steamid),
		"classId": fmt.Sprintf(`%v`, classId),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iEconItems205790 struct {
}

type IEconItems_205790 interface {
	GetEquippedPlayerItemsV1(
		steamid uint64,
		classId uint32,
	) (Response, error)
	GetPlayerItemsV1(
		steamid uint64,
	) (Response, error)
	GetStoreMetaDataV1(
		language string,
	) (Response, error)
}

func NewIEconItems_205790() IEconItems_205790 {
	return &iEconItems205790{}
}

func (i *iEconItems205790) GetEquippedPlayerItemsV1(
	steamid uint64,
	classId uint32,
) (Response, error) {
	p := getPath("IEconItems_205790", "GetEquippedPlayerItems", 1)
	request := map[string]string{
		"steamid": fmt.Sprintf(`%v`, steamid),
		"classId": fmt.Sprintf(`%v`, classId),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iEconItems205790) GetPlayerItemsV1(
	steamid uint64,
) (Response, error) {
	p := getPath("IEconItems_205790", "GetPlayerItems", 1)
	request := map[string]string{
		"steamid": fmt.Sprintf(`%v`, steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iEconItems205790) GetStoreMetaDataV1(
	language string,
) (Response, error) {
	p := getPath("IEconItems_205790", "GetStoreMetaData", 1)
	request := map[string]string{
		"language": language,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iEconItems221540 struct {
}

type IEconItems_221540 interface {
	GetPlayerItemsV1(
		steamid uint64,
	) (Response, error)
}

func NewIEconItems_221540() IEconItems_221540 {
	return &iEconItems221540{}
}

func (i *iEconItems221540) GetPlayerItemsV1(
	steamid uint64,
) (Response, error) {
	p := getPath("IEconItems_221540", "GetPlayerItems", 1)
	request := map[string]string{
		"steamid": fmt.Sprintf(`%v`, steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iEconItems238460 struct {
}

type IEconItems_238460 interface {
	GetPlayerItemsV1(
		steamid uint64,
	) (Response, error)
}

func NewIEconItems_238460() IEconItems_238460 {
	return &iEconItems238460{}
}

func (i *iEconItems238460) GetPlayerItemsV1(
	steamid uint64,
) (Response, error) {
	p := getPath("IEconItems_238460", "GetPlayerItems", 1)
	request := map[string]string{
		"steamid": fmt.Sprintf(`%v`, steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iEconItems440 struct {
}

type IEconItems_440 interface {
	GetPlayerItemsV1(
		steamid uint64,
	) (Response, error)
	GetSchemaV1(
		language string,
	) (Response, error)
	GetSchemaItemsV1(
		language string,
		start int32,
	) (Response, error)
	GetSchemaOverviewV1(
		language string,
	) (Response, error)
	GetSchemaURLV1() (Response, error)
	GetStoreMetaDataV1(
		language string,
	) (Response, error)
	GetStoreStatusV1() (Response, error)
}

func NewIEconItems_440() IEconItems_440 {
	return &iEconItems440{}
}

func (i *iEconItems440) GetPlayerItemsV1(
	steamid uint64,
) (Response, error) {
	p := getPath("IEconItems_440", "GetPlayerItems", 1)
	request := map[string]string{
		"steamid": fmt.Sprintf(`%v`, steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iEconItems440) GetSchemaV1(
	language string,
) (Response, error) {
	p := getPath("IEconItems_440", "GetSchema", 1)
	request := map[string]string{
		"language": language,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iEconItems440) GetSchemaItemsV1(
	language string,
	start int32,
) (Response, error) {
	p := getPath("IEconItems_440", "GetSchemaItems", 1)
	request := map[string]string{
		"language": language,
		"start":    fmt.Sprintf(`%v`, start),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iEconItems440) GetSchemaOverviewV1(
	language string,
) (Response, error) {
	p := getPath("IEconItems_440", "GetSchemaOverview", 1)
	request := map[string]string{
		"language": language,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iEconItems440) GetSchemaURLV1() (Response, error) {
	p := getPath("IEconItems_440", "GetSchemaURL", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iEconItems440) GetStoreMetaDataV1(
	language string,
) (Response, error) {
	p := getPath("IEconItems_440", "GetStoreMetaData", 1)
	request := map[string]string{
		"language": language,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iEconItems440) GetStoreStatusV1() (Response, error) {
	p := getPath("IEconItems_440", "GetStoreStatus", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iEconItems570 struct {
}

type IEconItems_570 interface {
	GetPlayerItemsV1(
		steamid uint64,
	) (Response, error)
	GetStoreMetaDataV1(
		language string,
	) (Response, error)
}

func NewIEconItems_570() IEconItems_570 {
	return &iEconItems570{}
}

func (i *iEconItems570) GetPlayerItemsV1(
	steamid uint64,
) (Response, error) {
	p := getPath("IEconItems_570", "GetPlayerItems", 1)
	request := map[string]string{
		"steamid": fmt.Sprintf(`%v`, steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iEconItems570) GetStoreMetaDataV1(
	language string,
) (Response, error) {
	p := getPath("IEconItems_570", "GetStoreMetaData", 1)
	request := map[string]string{
		"language": language,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iEconItems583950 struct {
}

type IEconItems_583950 interface {
	GetEquippedPlayerItemsV1(
		steamid uint64,
		classId uint32,
	) (Response, error)
}

func NewIEconItems_583950() IEconItems_583950 {
	return &iEconItems583950{}
}

func (i *iEconItems583950) GetEquippedPlayerItemsV1(
	steamid uint64,
	classId uint32,
) (Response, error) {
	p := getPath("IEconItems_583950", "GetEquippedPlayerItems", 1)
	request := map[string]string{
		"steamid": fmt.Sprintf(`%v`, steamid),
		"classId": fmt.Sprintf(`%v`, classId),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iEconItems620 struct {
}

type IEconItems_620 interface {
	GetPlayerItemsV1(
		steamid uint64,
	) (Response, error)
	GetSchemaV1(
		language string,
	) (Response, error)
}

func NewIEconItems_620() IEconItems_620 {
	return &iEconItems620{}
}

func (i *iEconItems620) GetPlayerItemsV1(
	steamid uint64,
) (Response, error) {
	p := getPath("IEconItems_620", "GetPlayerItems", 1)
	request := map[string]string{
		"steamid": fmt.Sprintf(`%v`, steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iEconItems620) GetSchemaV1(
	language string,
) (Response, error) {
	p := getPath("IEconItems_620", "GetSchema", 1)
	request := map[string]string{
		"language": language,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iEconItems730 struct {
}

type IEconItems_730 interface {
	GetPlayerItemsV1(
		steamid uint64,
	) (Response, error)
	GetSchemaV2(
		language string,
	) (Response, error)
	GetSchemaURLV2() (Response, error)
	GetStoreMetaDataV1(
		language string,
	) (Response, error)
}

func NewIEconItems_730() IEconItems_730 {
	return &iEconItems730{}
}

func (i *iEconItems730) GetPlayerItemsV1(
	steamid uint64,
) (Response, error) {
	p := getPath("IEconItems_730", "GetPlayerItems", 1)
	request := map[string]string{
		"steamid": fmt.Sprintf(`%v`, steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iEconItems730) GetSchemaV2(
	language string,
) (Response, error) {
	p := getPath("IEconItems_730", "GetSchema", 2)
	request := map[string]string{
		"language": language,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iEconItems730) GetSchemaURLV2() (Response, error) {
	p := getPath("IEconItems_730", "GetSchemaURL", 2)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iEconItems730) GetStoreMetaDataV1(
	language string,
) (Response, error) {
	p := getPath("IEconItems_730", "GetStoreMetaData", 1)
	request := map[string]string{
		"language": language,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type igcVersion1046930 struct {
}

type IGCVersion_1046930 interface {
	GetClientVersionV1() (Response, error)
	GetServerVersionV1() (Response, error)
}

func NewIGCVersion_1046930() IGCVersion_1046930 {
	return &igcVersion1046930{}
}

func (i *igcVersion1046930) GetClientVersionV1() (Response, error) {
	p := getPath("IGCVersion_1046930", "GetClientVersion", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *igcVersion1046930) GetServerVersionV1() (Response, error) {
	p := getPath("IGCVersion_1046930", "GetServerVersion", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type igcVersion1269260 struct {
}

type IGCVersion_1269260 interface {
	GetClientVersionV1() (Response, error)
	GetServerVersionV1() (Response, error)
}

func NewIGCVersion_1269260() IGCVersion_1269260 {
	return &igcVersion1269260{}
}

func (i *igcVersion1269260) GetClientVersionV1() (Response, error) {
	p := getPath("IGCVersion_1269260", "GetClientVersion", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *igcVersion1269260) GetServerVersionV1() (Response, error) {
	p := getPath("IGCVersion_1269260", "GetServerVersion", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type igcVersion205790 struct {
}

type IGCVersion_205790 interface {
	GetClientVersionV1() (Response, error)
	GetServerVersionV1() (Response, error)
}

func NewIGCVersion_205790() IGCVersion_205790 {
	return &igcVersion205790{}
}

func (i *igcVersion205790) GetClientVersionV1() (Response, error) {
	p := getPath("IGCVersion_205790", "GetClientVersion", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *igcVersion205790) GetServerVersionV1() (Response, error) {
	p := getPath("IGCVersion_205790", "GetServerVersion", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type igcVersion440 struct {
}

type IGCVersion_440 interface {
	GetClientVersionV1() (Response, error)
	GetServerVersionV1() (Response, error)
}

func NewIGCVersion_440() IGCVersion_440 {
	return &igcVersion440{}
}

func (i *igcVersion440) GetClientVersionV1() (Response, error) {
	p := getPath("IGCVersion_440", "GetClientVersion", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *igcVersion440) GetServerVersionV1() (Response, error) {
	p := getPath("IGCVersion_440", "GetServerVersion", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type igcVersion570 struct {
}

type IGCVersion_570 interface {
	GetClientVersionV1() (Response, error)
	GetServerVersionV1() (Response, error)
}

func NewIGCVersion_570() IGCVersion_570 {
	return &igcVersion570{}
}

func (i *igcVersion570) GetClientVersionV1() (Response, error) {
	p := getPath("IGCVersion_570", "GetClientVersion", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *igcVersion570) GetServerVersionV1() (Response, error) {
	p := getPath("IGCVersion_570", "GetServerVersion", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type igcVersion583950 struct {
}

type IGCVersion_583950 interface {
	GetClientVersionV1() (Response, error)
	GetServerVersionV1() (Response, error)
}

func NewIGCVersion_583950() IGCVersion_583950 {
	return &igcVersion583950{}
}

func (i *igcVersion583950) GetClientVersionV1() (Response, error) {
	p := getPath("IGCVersion_583950", "GetClientVersion", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *igcVersion583950) GetServerVersionV1() (Response, error) {
	p := getPath("IGCVersion_583950", "GetServerVersion", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type igcVersion730 struct {
}

type IGCVersion_730 interface {
	GetServerVersionV1() (Response, error)
}

func NewIGCVersion_730() IGCVersion_730 {
	return &igcVersion730{}
}

func (i *igcVersion730) GetServerVersionV1() (Response, error) {
	p := getPath("IGCVersion_730", "GetServerVersion", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iPortal2leaderboards620 struct {
}

type IPortal2Leaderboards_620 interface {
	GetBucketizedDataV1(
		leaderboardName string,
	) (Response, error)
}

func NewIPortal2Leaderboards_620() IPortal2Leaderboards_620 {
	return &iPortal2leaderboards620{}
}

func (i *iPortal2leaderboards620) GetBucketizedDataV1(
	leaderboardName string,
) (Response, error) {
	p := getPath("IPortal2Leaderboards_620", "GetBucketizedData", 1)
	request := map[string]string{
		"leaderboardName": leaderboardName,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iSteamApps struct {
}

type ISteamApps interface {
	GetAppListV1() (Response, error)
	GetAppListV2() (Response, error)
	GetSDRConfigV1(
		appid uint32,
	) (Response, error)
	GetServersAtAddressV1(
		addr string,
	) (Response, error)
	UpToDateCheckV1(
		appid uint32,
		version uint32,
	) (Response, error)
}

func NewISteamApps() ISteamApps {
	return &iSteamApps{}
}

func (i *iSteamApps) GetAppListV1() (Response, error) {
	p := getPath("ISteamApps", "GetAppList", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iSteamApps) GetAppListV2() (Response, error) {
	p := getPath("ISteamApps", "GetAppList", 2)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iSteamApps) GetSDRConfigV1(
	appid uint32,
) (Response, error) {
	p := getPath("ISteamApps", "GetSDRConfig", 1)
	request := map[string]string{
		"appid": fmt.Sprintf(`%v`, appid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iSteamApps) GetServersAtAddressV1(
	addr string,
) (Response, error) {
	p := getPath("ISteamApps", "GetServersAtAddress", 1)
	request := map[string]string{
		"addr": addr,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iSteamApps) UpToDateCheckV1(
	appid uint32,
	version uint32,
) (Response, error) {
	p := getPath("ISteamApps", "UpToDateCheck", 1)
	request := map[string]string{
		"appid":   fmt.Sprintf(`%v`, appid),
		"version": fmt.Sprintf(`%v`, version),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iSteamBroadcast struct {
}

type ISteamBroadcast interface {
	ViewerHeartbeatV1(
		steamid uint64,
		sessionid uint64,
		token uint64,
		stream int32,
	) (Response, error)
}

func NewISteamBroadcast() ISteamBroadcast {
	return &iSteamBroadcast{}
}

func (i *iSteamBroadcast) ViewerHeartbeatV1(
	steamid uint64,
	sessionid uint64,
	token uint64,
	stream int32,
) (Response, error) {
	p := getPath("ISteamBroadcast", "ViewerHeartbeat", 1)
	request := map[string]string{
		"steamid":   fmt.Sprintf(`%v`, steamid),
		"sessionid": fmt.Sprintf(`%v`, sessionid),
		"token":     fmt.Sprintf(`%v`, token),
		"stream":    fmt.Sprintf(`%v`, stream),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iSteamCdn struct {
}

type ISteamCDN interface {
	SetClientFiltersV1(
		key string,
		cdnname string,
		allowedipblocks string,
		allowedasns string,
		allowedipcountries string,
	) (Response, error)
	SetPerformanceStatsV1(
		key string,
		cdnname string,
		mbpsSent uint32,
		mbpsRecv uint32,
		cpuPercent uint32,
		cacheHitPercent uint32,
	) (Response, error)
}

func NewISteamCDN() ISteamCDN {
	return &iSteamCdn{}
}

func (i *iSteamCdn) SetClientFiltersV1(
	key string,
	cdnname string,
	allowedipblocks string,
	allowedasns string,
	allowedipcountries string,
) (Response, error) {
	p := getPath("ISteamCDN", "SetClientFilters", 1)
	request := map[string]string{
		"key":                key,
		"cdnname":            cdnname,
		"allowedipblocks":    allowedipblocks,
		"allowedasns":        allowedasns,
		"allowedipcountries": allowedipcountries,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iSteamCdn) SetPerformanceStatsV1(
	key string,
	cdnname string,
	mbpsSent uint32,
	mbpsRecv uint32,
	cpuPercent uint32,
	cacheHitPercent uint32,
) (Response, error) {
	p := getPath("ISteamCDN", "SetPerformanceStats", 1)
	request := map[string]string{
		"key":             key,
		"cdnname":         cdnname,
		"mbpsSent":        fmt.Sprintf(`%v`, mbpsSent),
		"mbpsRecv":        fmt.Sprintf(`%v`, mbpsRecv),
		"cpuPercent":      fmt.Sprintf(`%v`, cpuPercent),
		"cacheHitPercent": fmt.Sprintf(`%v`, cacheHitPercent),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iSteamDirectory struct {
}

type ISteamDirectory interface {
	GetCMListV1(
		cellid uint32,
		maxcount uint32,
	) (Response, error)
	GetCMListForConnectV1(
		cellid uint32,
		cmtype string,
		realm string,
		maxcount uint32,
	) (Response, error)
	GetSteamPipeDomainsV1() (Response, error)
}

func NewISteamDirectory() ISteamDirectory {
	return &iSteamDirectory{}
}

func (i *iSteamDirectory) GetCMListV1(
	cellid uint32,
	maxcount uint32,
) (Response, error) {
	p := getPath("ISteamDirectory", "GetCMList", 1)
	request := map[string]string{
		"cellid":   fmt.Sprintf(`%v`, cellid),
		"maxcount": fmt.Sprintf(`%v`, maxcount),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iSteamDirectory) GetCMListForConnectV1(
	cellid uint32,
	cmtype string,
	realm string,
	maxcount uint32,
) (Response, error) {
	p := getPath("ISteamDirectory", "GetCMListForConnect", 1)
	request := map[string]string{
		"cellid":   fmt.Sprintf(`%v`, cellid),
		"cmtype":   cmtype,
		"realm":    realm,
		"maxcount": fmt.Sprintf(`%v`, maxcount),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iSteamDirectory) GetSteamPipeDomainsV1() (Response, error) {
	p := getPath("ISteamDirectory", "GetSteamPipeDomains", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iSteamEconomy struct {
}

type ISteamEconomy interface {
	GetAssetClassInfoV1(
		appid uint32,
		language string,
		classCount uint32,
		classid0 uint64,
		instanceid0 uint64,
	) (Response, error)
	GetAssetPricesV1(
		appid uint32,
		currency string,
		language string,
	) (Response, error)
}

func NewISteamEconomy() ISteamEconomy {
	return &iSteamEconomy{}
}

func (i *iSteamEconomy) GetAssetClassInfoV1(
	appid uint32,
	language string,
	classCount uint32,
	classid0 uint64,
	instanceid0 uint64,
) (Response, error) {
	p := getPath("ISteamEconomy", "GetAssetClassInfo", 1)
	request := map[string]string{
		"appid":       fmt.Sprintf(`%v`, appid),
		"language":    language,
		"classCount":  fmt.Sprintf(`%v`, classCount),
		"classid0":    fmt.Sprintf(`%v`, classid0),
		"instanceid0": fmt.Sprintf(`%v`, instanceid0),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iSteamEconomy) GetAssetPricesV1(
	appid uint32,
	currency string,
	language string,
) (Response, error) {
	p := getPath("ISteamEconomy", "GetAssetPrices", 1)
	request := map[string]string{
		"appid":    fmt.Sprintf(`%v`, appid),
		"currency": currency,
		"language": language,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iSteamNews struct {
}

type ISteamNews interface {
	GetNewsForAppV1(
		appid uint32,
		maxlength uint32,
		enddate uint32,
		count uint32,
		tags string,
	) (Response, error)
	GetNewsForAppV2(
		appid uint32,
		maxlength uint32,
		enddate uint32,
		count uint32,
		feeds string,
		tags string,
	) (Response, error)
}

func NewISteamNews() ISteamNews {
	return &iSteamNews{}
}

func (i *iSteamNews) GetNewsForAppV1(
	appid uint32,
	maxlength uint32,
	enddate uint32,
	count uint32,
	tags string,
) (Response, error) {
	p := getPath("ISteamNews", "GetNewsForApp", 1)
	request := map[string]string{
		"appid":     fmt.Sprintf(`%v`, appid),
		"maxlength": fmt.Sprintf(`%v`, maxlength),
		"enddate":   fmt.Sprintf(`%v`, enddate),
		"count":     fmt.Sprintf(`%v`, count),
		"tags":      tags,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iSteamNews) GetNewsForAppV2(
	appid uint32,
	maxlength uint32,
	enddate uint32,
	count uint32,
	feeds string,
	tags string,
) (Response, error) {
	p := getPath("ISteamNews", "GetNewsForApp", 2)
	request := map[string]string{
		"appid":     fmt.Sprintf(`%v`, appid),
		"maxlength": fmt.Sprintf(`%v`, maxlength),
		"enddate":   fmt.Sprintf(`%v`, enddate),
		"count":     fmt.Sprintf(`%v`, count),
		"feeds":     feeds,
		"tags":      tags,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iSteamRemoteStorage struct {
}

type ISteamRemoteStorage interface {
	GetCollectionDetailsV1(
		collectioncount uint32,
		publishedfileids uint64,
	) (Response, error)
	GetPublishedFileDetailsV1(
		itemcount uint32,
		publishedfileids uint64,
	) (Response, error)
	GetUGCFileDetailsV1(
		steamid uint64,
		ugcid uint64,
		appid uint32,
	) (Response, error)
}

func NewISteamRemoteStorage() ISteamRemoteStorage {
	return &iSteamRemoteStorage{}
}

func (i *iSteamRemoteStorage) GetCollectionDetailsV1(
	collectioncount uint32,
	publishedfileids uint64,
) (Response, error) {
	p := getPath("ISteamRemoteStorage", "GetCollectionDetails", 1)
	request := map[string]string{
		"collectioncount":  fmt.Sprintf(`%v`, collectioncount),
		"publishedfileids": fmt.Sprintf(`%v`, publishedfileids),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iSteamRemoteStorage) GetPublishedFileDetailsV1(
	itemcount uint32,
	publishedfileids uint64,
) (Response, error) {
	p := getPath("ISteamRemoteStorage", "GetPublishedFileDetails", 1)
	request := map[string]string{
		"itemcount":        fmt.Sprintf(`%v`, itemcount),
		"publishedfileids": fmt.Sprintf(`%v`, publishedfileids),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iSteamRemoteStorage) GetUGCFileDetailsV1(
	steamid uint64,
	ugcid uint64,
	appid uint32,
) (Response, error) {
	p := getPath("ISteamRemoteStorage", "GetUGCFileDetails", 1)
	request := map[string]string{
		"steamid": fmt.Sprintf(`%v`, steamid),
		"ugcid":   fmt.Sprintf(`%v`, ugcid),
		"appid":   fmt.Sprintf(`%v`, appid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iSteamUser struct {
}

type ISteamUser interface {
	GetFriendListV1(
		key string,
		steamid uint64,
		relationship string,
	) (Response, error)
	GetPlayerBansV1(
		key string,
		steamids string,
	) (Response, error)
	GetPlayerSummariesV1(
		key string,
		steamids string,
	) (Response, error)
	GetPlayerSummariesV2(
		key string,
		steamids string,
	) (Response, error)
	GetUserGroupListV1(
		key string,
		steamid uint64,
	) (Response, error)
	ResolveVanityURLV1(
		key string,
		vanityurl string,
		urlType int32,
	) (Response, error)
}

func NewISteamUser() ISteamUser {
	return &iSteamUser{}
}

func (i *iSteamUser) GetFriendListV1(
	key string,
	steamid uint64,
	relationship string,
) (Response, error) {
	p := getPath("ISteamUser", "GetFriendList", 1)
	request := map[string]string{
		"key":          key,
		"steamid":      fmt.Sprintf(`%v`, steamid),
		"relationship": relationship,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iSteamUser) GetPlayerBansV1(
	key string,
	steamids string,
) (Response, error) {
	p := getPath("ISteamUser", "GetPlayerBans", 1)
	request := map[string]string{
		"key":      key,
		"steamids": steamids,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iSteamUser) GetPlayerSummariesV1(
	key string,
	steamids string,
) (Response, error) {
	p := getPath("ISteamUser", "GetPlayerSummaries", 1)
	request := map[string]string{
		"key":      key,
		"steamids": steamids,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iSteamUser) GetPlayerSummariesV2(
	key string,
	steamids string,
) (Response, error) {
	p := getPath("ISteamUser", "GetPlayerSummaries", 2)
	request := map[string]string{
		"key":      key,
		"steamids": steamids,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iSteamUser) GetUserGroupListV1(
	key string,
	steamid uint64,
) (Response, error) {
	p := getPath("ISteamUser", "GetUserGroupList", 1)
	request := map[string]string{
		"key":     key,
		"steamid": fmt.Sprintf(`%v`, steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iSteamUser) ResolveVanityURLV1(
	key string,
	vanityurl string,
	urlType int32,
) (Response, error) {
	p := getPath("ISteamUser", "ResolveVanityURL", 1)
	request := map[string]string{
		"key":       key,
		"vanityurl": vanityurl,
		"urlType":   fmt.Sprintf(`%v`, urlType),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iSteamUserAuth struct {
}

type ISteamUserAuth interface {
	AuthenticateUserV1(
		steamid uint64,
	) (Response, error)
	AuthenticateUserTicketV1(
		key string,
		appid uint32,
		ticket string,
	) (Response, error)
}

func NewISteamUserAuth() ISteamUserAuth {
	return &iSteamUserAuth{}
}

func (i *iSteamUserAuth) AuthenticateUserV1(
	steamid uint64,
) (Response, error) {
	p := getPath("ISteamUserAuth", "AuthenticateUser", 1)
	request := map[string]string{
		"steamid": fmt.Sprintf(`%v`, steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iSteamUserAuth) AuthenticateUserTicketV1(
	key string,
	appid uint32,
	ticket string,
) (Response, error) {
	p := getPath("ISteamUserAuth", "AuthenticateUserTicket", 1)
	request := map[string]string{
		"key":    key,
		"appid":  fmt.Sprintf(`%v`, appid),
		"ticket": ticket,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iSteamUserOAuth struct {
}

type ISteamUserOAuth interface {
	GetTokenDetailsV1(
		accessToken string,
	) (Response, error)
}

func NewISteamUserOAuth() ISteamUserOAuth {
	return &iSteamUserOAuth{}
}

func (i *iSteamUserOAuth) GetTokenDetailsV1(
	accessToken string,
) (Response, error) {
	p := getPath("ISteamUserOAuth", "GetTokenDetails", 1)
	request := map[string]string{
		"accessToken": accessToken,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iSteamUserStats struct {
}

type ISteamUserStats interface {
	GetGlobalAchievementPercentagesForAppV1(
		gameid uint64,
	) (Response, error)
	GetGlobalAchievementPercentagesForAppV2(
		gameid uint64,
	) (Response, error)
	GetGlobalStatsForGameV1(
		appid uint32,
		count uint32,
		name string,
		startdate uint32,
		enddate uint32,
	) (Response, error)
	GetNumberOfCurrentPlayersV1(
		appid uint32,
	) (Response, error)
	GetPlayerAchievementsV1(
		key string,
		steamid uint64,
		appid uint32,
		l string,
	) (Response, error)
	GetSchemaForGameV1(
		key string,
		appid uint32,
		l string,
	) (Response, error)
	GetSchemaForGameV2(
		key string,
		appid uint32,
		l string,
	) (Response, error)
	GetUserStatsForGameV1(
		key string,
		steamid uint64,
		appid uint32,
	) (Response, error)
	GetUserStatsForGameV2(
		key string,
		steamid uint64,
		appid uint32,
	) (Response, error)
}

func NewISteamUserStats() ISteamUserStats {
	return &iSteamUserStats{}
}

func (i *iSteamUserStats) GetGlobalAchievementPercentagesForAppV1(
	gameid uint64,
) (Response, error) {
	p := getPath("ISteamUserStats", "GetGlobalAchievementPercentagesForApp", 1)
	request := map[string]string{
		"gameid": fmt.Sprintf(`%v`, gameid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iSteamUserStats) GetGlobalAchievementPercentagesForAppV2(
	gameid uint64,
) (Response, error) {
	p := getPath("ISteamUserStats", "GetGlobalAchievementPercentagesForApp", 2)
	request := map[string]string{
		"gameid": fmt.Sprintf(`%v`, gameid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iSteamUserStats) GetGlobalStatsForGameV1(
	appid uint32,
	count uint32,
	name string,
	startdate uint32,
	enddate uint32,
) (Response, error) {
	p := getPath("ISteamUserStats", "GetGlobalStatsForGame", 1)
	request := map[string]string{
		"appid":     fmt.Sprintf(`%v`, appid),
		"count":     fmt.Sprintf(`%v`, count),
		"name":      name,
		"startdate": fmt.Sprintf(`%v`, startdate),
		"enddate":   fmt.Sprintf(`%v`, enddate),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iSteamUserStats) GetNumberOfCurrentPlayersV1(
	appid uint32,
) (Response, error) {
	p := getPath("ISteamUserStats", "GetNumberOfCurrentPlayers", 1)
	request := map[string]string{
		"appid": fmt.Sprintf(`%v`, appid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iSteamUserStats) GetPlayerAchievementsV1(
	key string,
	steamid uint64,
	appid uint32,
	l string,
) (Response, error) {
	p := getPath("ISteamUserStats", "GetPlayerAchievements", 1)
	request := map[string]string{
		"key":     key,
		"steamid": fmt.Sprintf(`%v`, steamid),
		"appid":   fmt.Sprintf(`%v`, appid),
		"l":       l,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iSteamUserStats) GetSchemaForGameV1(
	key string,
	appid uint32,
	l string,
) (Response, error) {
	p := getPath("ISteamUserStats", "GetSchemaForGame", 1)
	request := map[string]string{
		"key":   key,
		"appid": fmt.Sprintf(`%v`, appid),
		"l":     l,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iSteamUserStats) GetSchemaForGameV2(
	key string,
	appid uint32,
	l string,
) (Response, error) {
	p := getPath("ISteamUserStats", "GetSchemaForGame", 2)
	request := map[string]string{
		"key":   key,
		"appid": fmt.Sprintf(`%v`, appid),
		"l":     l,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iSteamUserStats) GetUserStatsForGameV1(
	key string,
	steamid uint64,
	appid uint32,
) (Response, error) {
	p := getPath("ISteamUserStats", "GetUserStatsForGame", 1)
	request := map[string]string{
		"key":     key,
		"steamid": fmt.Sprintf(`%v`, steamid),
		"appid":   fmt.Sprintf(`%v`, appid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iSteamUserStats) GetUserStatsForGameV2(
	key string,
	steamid uint64,
	appid uint32,
) (Response, error) {
	p := getPath("ISteamUserStats", "GetUserStatsForGame", 2)
	request := map[string]string{
		"key":     key,
		"steamid": fmt.Sprintf(`%v`, steamid),
		"appid":   fmt.Sprintf(`%v`, appid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iSteamWebApiUtil struct {
}

type ISteamWebAPIUtil interface {
	GetServerInfoV1() (Response, error)
	GetSupportedAPIListV1(
		key string,
	) (Response, error)
}

func NewISteamWebAPIUtil() ISteamWebAPIUtil {
	return &iSteamWebApiUtil{}
}

func (i *iSteamWebApiUtil) GetServerInfoV1() (Response, error) {
	p := getPath("ISteamWebAPIUtil", "GetServerInfo", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iSteamWebApiUtil) GetSupportedAPIListV1(
	key string,
) (Response, error) {
	p := getPath("ISteamWebAPIUtil", "GetSupportedAPIList", 1)
	request := map[string]string{
		"key": key,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type itfItems440 struct {
}

type ITFItems_440 interface {
	GetGoldenWrenchesV1() (Response, error)
	GetGoldenWrenchesV2() (Response, error)
}

func NewITFItems_440() ITFItems_440 {
	return &itfItems440{}
}

func (i *itfItems440) GetGoldenWrenchesV1() (Response, error) {
	p := getPath("ITFItems_440", "GetGoldenWrenches", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *itfItems440) GetGoldenWrenchesV2() (Response, error) {
	p := getPath("ITFItems_440", "GetGoldenWrenches", 2)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type itfPromos440 struct {
}

type ITFPromos_440 interface {
	GetItemIDV1(
		steamid uint64,
		promoid uint32,
	) (Response, error)
	GrantItemV1(
		steamid uint64,
		promoid uint32,
	) (Response, error)
}

func NewITFPromos_440() ITFPromos_440 {
	return &itfPromos440{}
}

func (i *itfPromos440) GetItemIDV1(
	steamid uint64,
	promoid uint32,
) (Response, error) {
	p := getPath("ITFPromos_440", "GetItemID", 1)
	request := map[string]string{
		"steamid": fmt.Sprintf(`%v`, steamid),
		"promoid": fmt.Sprintf(`%v`, promoid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *itfPromos440) GrantItemV1(
	steamid uint64,
	promoid uint32,
) (Response, error) {
	p := getPath("ITFPromos_440", "GrantItem", 1)
	request := map[string]string{
		"steamid": fmt.Sprintf(`%v`, steamid),
		"promoid": fmt.Sprintf(`%v`, promoid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type itfPromos620 struct {
}

type ITFPromos_620 interface {
	GetItemIDV1(
		steamid uint64,
		promoId uint32,
	) (Response, error)
	GrantItemV1(
		steamid uint64,
		promoId uint32,
	) (Response, error)
}

func NewITFPromos_620() ITFPromos_620 {
	return &itfPromos620{}
}

func (i *itfPromos620) GetItemIDV1(
	steamid uint64,
	promoId uint32,
) (Response, error) {
	p := getPath("ITFPromos_620", "GetItemID", 1)
	request := map[string]string{
		"steamid": fmt.Sprintf(`%v`, steamid),
		"promoId": fmt.Sprintf(`%v`, promoId),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *itfPromos620) GrantItemV1(
	steamid uint64,
	promoId uint32,
) (Response, error) {
	p := getPath("ITFPromos_620", "GrantItem", 1)
	request := map[string]string{
		"steamid": fmt.Sprintf(`%v`, steamid),
		"promoId": fmt.Sprintf(`%v`, promoId),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type itfSystem440 struct {
}

type ITFSystem_440 interface {
	GetWorldStatusV1() (Response, error)
}

func NewITFSystem_440() ITFSystem_440 {
	return &itfSystem440{}
}

func (i *itfSystem440) GetWorldStatusV1() (Response, error) {
	p := getPath("ITFSystem_440", "GetWorldStatus", 1)
	request := map[string]string{}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iGameServersService struct {
}

type IGameServersService interface {
	GetAccountListV1(
		key string,
	) (Response, error)
	CreateAccountV1(
		key string,
		appid uint32,
		memo string,
	) (Response, error)
	SetMemoV1(
		key string,
		steamid uint64,
		memo string,
	) (Response, error)
	ResetLoginTokenV1(
		key string,
		steamid uint64,
	) (Response, error)
	DeleteAccountV1(
		key string,
		steamid uint64,
	) (Response, error)
	GetAccountPublicInfoV1(
		key string,
		steamid uint64,
	) (Response, error)
	QueryLoginTokenV1(
		key string,
		loginToken string,
	) (Response, error)
	GetServerSteamIDsByIPV1(
		key string,
		serverIps string,
	) (Response, error)
	GetServerIPsBySteamIDV1(
		key string,
		serverSteamids uint64,
	) (Response, error)
	QueryByFakeIPV1(
		key string,
		fakeIp uint32,
		fakePort uint32,
		appId uint32,
	) (Response, error)
}

func NewIGameServersService() IGameServersService {
	return &iGameServersService{}
}

func (i *iGameServersService) GetAccountListV1(
	key string,
) (Response, error) {
	p := getPath("IGameServersService", "GetAccountList", 1)
	request := map[string]string{
		"key": key,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iGameServersService) CreateAccountV1(
	key string,
	appid uint32,
	memo string,
) (Response, error) {
	p := getPath("IGameServersService", "CreateAccount", 1)
	request := map[string]string{
		"key":   key,
		"appid": fmt.Sprintf(`%v`, appid),
		"memo":  memo,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iGameServersService) SetMemoV1(
	key string,
	steamid uint64,
	memo string,
) (Response, error) {
	p := getPath("IGameServersService", "SetMemo", 1)
	request := map[string]string{
		"key":     key,
		"steamid": fmt.Sprintf(`%v`, steamid),
		"memo":    memo,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iGameServersService) ResetLoginTokenV1(
	key string,
	steamid uint64,
) (Response, error) {
	p := getPath("IGameServersService", "ResetLoginToken", 1)
	request := map[string]string{
		"key":     key,
		"steamid": fmt.Sprintf(`%v`, steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iGameServersService) DeleteAccountV1(
	key string,
	steamid uint64,
) (Response, error) {
	p := getPath("IGameServersService", "DeleteAccount", 1)
	request := map[string]string{
		"key":     key,
		"steamid": fmt.Sprintf(`%v`, steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iGameServersService) GetAccountPublicInfoV1(
	key string,
	steamid uint64,
) (Response, error) {
	p := getPath("IGameServersService", "GetAccountPublicInfo", 1)
	request := map[string]string{
		"key":     key,
		"steamid": fmt.Sprintf(`%v`, steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iGameServersService) QueryLoginTokenV1(
	key string,
	loginToken string,
) (Response, error) {
	p := getPath("IGameServersService", "QueryLoginToken", 1)
	request := map[string]string{
		"key":        key,
		"loginToken": loginToken,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iGameServersService) GetServerSteamIDsByIPV1(
	key string,
	serverIps string,
) (Response, error) {
	p := getPath("IGameServersService", "GetServerSteamIDsByIP", 1)
	request := map[string]string{
		"key":       key,
		"serverIps": serverIps,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iGameServersService) GetServerIPsBySteamIDV1(
	key string,
	serverSteamids uint64,
) (Response, error) {
	p := getPath("IGameServersService", "GetServerIPsBySteamID", 1)
	request := map[string]string{
		"key":            key,
		"serverSteamids": fmt.Sprintf(`%v`, serverSteamids),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iGameServersService) QueryByFakeIPV1(
	key string,
	fakeIp uint32,
	fakePort uint32,
	appId uint32,
) (Response, error) {
	p := getPath("IGameServersService", "QueryByFakeIP", 1)
	request := map[string]string{
		"key":      key,
		"fakeIp":   fmt.Sprintf(`%v`, fakeIp),
		"fakePort": fmt.Sprintf(`%v`, fakePort),
		"appId":    fmt.Sprintf(`%v`, appId),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iPlayerService struct {
}

type IPlayerService interface {
	IsPlayingSharedGameV1(
		key string,
		steamid uint64,
		appidPlaying uint32,
	) (Response, error)
	RecordOfflinePlaytimeV1(
		steamid uint64,
		ticket string,
	) (Response, error)
	GetRecentlyPlayedGamesV1(
		key string,
		steamid uint64,
		count uint32,
	) (Response, error)
	GetOwnedGamesV1(
		key string,
		steamid uint64,
		includeAppinfo bool,
		includePlayedFreeGames bool,
		appidsFilter uint32,
		includeFreeSub bool,
		skipUnvettedApps bool,
		language string,
		includeExtendedAppinfo bool,
	) (Response, error)
	GetSteamLevelV1(
		key string,
		steamid uint64,
	) (Response, error)
	GetBadgesV1(
		key string,
		steamid uint64,
	) (Response, error)
	GetCommunityBadgeProgressV1(
		key string,
		steamid uint64,
		badgeid int32,
	) (Response, error)
}

func NewIPlayerService() IPlayerService {
	return &iPlayerService{}
}

func (i *iPlayerService) IsPlayingSharedGameV1(
	key string,
	steamid uint64,
	appidPlaying uint32,
) (Response, error) {
	p := getPath("IPlayerService", "IsPlayingSharedGame", 1)
	request := map[string]string{
		"key":          key,
		"steamid":      fmt.Sprintf(`%v`, steamid),
		"appidPlaying": fmt.Sprintf(`%v`, appidPlaying),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iPlayerService) RecordOfflinePlaytimeV1(
	steamid uint64,
	ticket string,
) (Response, error) {
	p := getPath("IPlayerService", "RecordOfflinePlaytime", 1)
	request := map[string]string{
		"steamid": fmt.Sprintf(`%v`, steamid),
		"ticket":  ticket,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iPlayerService) GetRecentlyPlayedGamesV1(
	key string,
	steamid uint64,
	count uint32,
) (Response, error) {
	p := getPath("IPlayerService", "GetRecentlyPlayedGames", 1)
	request := map[string]string{
		"key":     key,
		"steamid": fmt.Sprintf(`%v`, steamid),
		"count":   fmt.Sprintf(`%v`, count),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iPlayerService) GetOwnedGamesV1(
	key string,
	steamid uint64,
	includeAppinfo bool,
	includePlayedFreeGames bool,
	appidsFilter uint32,
	includeFreeSub bool,
	skipUnvettedApps bool,
	language string,
	includeExtendedAppinfo bool,
) (Response, error) {
	p := getPath("IPlayerService", "GetOwnedGames", 1)
	request := map[string]string{
		"key":                    key,
		"steamid":                fmt.Sprintf(`%v`, steamid),
		"includeAppinfo":         strconv.FormatBool(includeAppinfo),
		"includePlayedFreeGames": strconv.FormatBool(includePlayedFreeGames),
		"appidsFilter":           fmt.Sprintf(`%v`, appidsFilter),
		"includeFreeSub":         strconv.FormatBool(includeFreeSub),
		"skipUnvettedApps":       strconv.FormatBool(skipUnvettedApps),
		"language":               language,
		"includeExtendedAppinfo": strconv.FormatBool(includeExtendedAppinfo),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iPlayerService) GetSteamLevelV1(
	key string,
	steamid uint64,
) (Response, error) {
	p := getPath("IPlayerService", "GetSteamLevel", 1)
	request := map[string]string{
		"key":     key,
		"steamid": fmt.Sprintf(`%v`, steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iPlayerService) GetBadgesV1(
	key string,
	steamid uint64,
) (Response, error) {
	p := getPath("IPlayerService", "GetBadges", 1)
	request := map[string]string{
		"key":     key,
		"steamid": fmt.Sprintf(`%v`, steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iPlayerService) GetCommunityBadgeProgressV1(
	key string,
	steamid uint64,
	badgeid int32,
) (Response, error) {
	p := getPath("IPlayerService", "GetCommunityBadgeProgress", 1)
	request := map[string]string{
		"key":     key,
		"steamid": fmt.Sprintf(`%v`, steamid),
		"badgeid": fmt.Sprintf(`%v`, badgeid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iAuthenticationService struct {
}

type IAuthenticationService interface {
	PollAuthSessionStatusV1(
		clientId uint64,
		requestId string,
		tokenToRevoke uint64,
	) (Response, error)
	GetAuthSessionInfoV1(
		clientId uint64,
	) (Response, error)
	GetPasswordRSAPublicKeyV1(
		accountName string,
	) (Response, error)
	BeginAuthSessionViaCredentialsV1(
		deviceFriendlyName string,
		accountName string,
		encryptedPassword string,
		encryptionTimestamp uint64,
		rememberLogin bool,
		websiteId string,
		guardData string,
		language uint32,
		qosLevel int32,
	) (Response, error)
	UpdateAuthSessionWithSteamGuardCodeV1(
		clientId uint64,
		steamid uint64,
		code string,
	) (Response, error)
	BeginAuthSessionViaQRV1(
		deviceFriendlyName string,
		websiteId string,
	) (Response, error)
	UpdateAuthSessionWithMobileConfirmationV1(
		version int32,
		clientId uint64,
		steamid uint64,
		signature string,
		confirm bool,
	) (Response, error)
}

func NewIAuthenticationService() IAuthenticationService {
	return &iAuthenticationService{}
}

func (i *iAuthenticationService) PollAuthSessionStatusV1(
	clientId uint64,
	requestId string,
	tokenToRevoke uint64,
) (Response, error) {
	p := getPath("IAuthenticationService", "PollAuthSessionStatus", 1)
	request := map[string]string{
		"clientId":      fmt.Sprintf(`%v`, clientId),
		"requestId":     requestId,
		"tokenToRevoke": fmt.Sprintf(`%v`, tokenToRevoke),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iAuthenticationService) GetAuthSessionInfoV1(
	clientId uint64,
) (Response, error) {
	p := getPath("IAuthenticationService", "GetAuthSessionInfo", 1)
	request := map[string]string{
		"clientId": fmt.Sprintf(`%v`, clientId),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iAuthenticationService) GetPasswordRSAPublicKeyV1(
	accountName string,
) (Response, error) {
	p := getPath("IAuthenticationService", "GetPasswordRSAPublicKey", 1)
	request := map[string]string{
		"accountName": accountName,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iAuthenticationService) BeginAuthSessionViaCredentialsV1(
	deviceFriendlyName string,
	accountName string,
	encryptedPassword string,
	encryptionTimestamp uint64,
	rememberLogin bool,
	websiteId string,
	guardData string,
	language uint32,
	qosLevel int32,
) (Response, error) {
	p := getPath("IAuthenticationService", "BeginAuthSessionViaCredentials", 1)
	request := map[string]string{
		"deviceFriendlyName":  deviceFriendlyName,
		"accountName":         accountName,
		"encryptedPassword":   encryptedPassword,
		"encryptionTimestamp": fmt.Sprintf(`%v`, encryptionTimestamp),
		"rememberLogin":       strconv.FormatBool(rememberLogin),
		"websiteId":           websiteId,
		"guardData":           guardData,
		"language":            fmt.Sprintf(`%v`, language),
		"qosLevel":            fmt.Sprintf(`%v`, qosLevel),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iAuthenticationService) UpdateAuthSessionWithSteamGuardCodeV1(
	clientId uint64,
	steamid uint64,
	code string,
) (Response, error) {
	p := getPath("IAuthenticationService", "UpdateAuthSessionWithSteamGuardCode", 1)
	request := map[string]string{
		"clientId": fmt.Sprintf(`%v`, clientId),
		"steamid":  fmt.Sprintf(`%v`, steamid),
		"code":     code,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iAuthenticationService) BeginAuthSessionViaQRV1(
	deviceFriendlyName string,
	websiteId string,
) (Response, error) {
	p := getPath("IAuthenticationService", "BeginAuthSessionViaQR", 1)
	request := map[string]string{
		"deviceFriendlyName": deviceFriendlyName,
		"websiteId":          websiteId,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iAuthenticationService) UpdateAuthSessionWithMobileConfirmationV1(
	version int32,
	clientId uint64,
	steamid uint64,
	signature string,
	confirm bool,
) (Response, error) {
	p := getPath("IAuthenticationService", "UpdateAuthSessionWithMobileConfirmation", 1)
	request := map[string]string{
		"version":   fmt.Sprintf(`%v`, version),
		"clientId":  fmt.Sprintf(`%v`, clientId),
		"steamid":   fmt.Sprintf(`%v`, steamid),
		"signature": signature,
		"confirm":   strconv.FormatBool(confirm),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iBroadcastService struct {
}

type IBroadcastService interface {
	PostGameDataFrameRTMPV1(
		appid uint32,
		steamid uint64,
		rtmpToken string,
		frameData string,
	) (Response, error)
}

func NewIBroadcastService() IBroadcastService {
	return &iBroadcastService{}
}

func (i *iBroadcastService) PostGameDataFrameRTMPV1(
	appid uint32,
	steamid uint64,
	rtmpToken string,
	frameData string,
) (Response, error) {
	p := getPath("IBroadcastService", "PostGameDataFrameRTMP", 1)
	request := map[string]string{
		"appid":     fmt.Sprintf(`%v`, appid),
		"steamid":   fmt.Sprintf(`%v`, steamid),
		"rtmpToken": rtmpToken,
		"frameData": frameData,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iContentServerConfigService struct {
}

type IContentServerConfigService interface {
	SetSteamCacheClientFiltersV1(
		key string,
		cacheId uint32,
		cacheKey string,
		changeNotes string,
		allowedIpBlocks string,
	) (Response, error)
	GetSteamCacheNodeParamsV1(
		key string,
		cacheId uint32,
		cacheKey string,
	) (Response, error)
	SetSteamCachePerformanceStatsV1(
		key string,
		cacheId uint32,
		cacheKey string,
		mbpsSent uint32,
		mbpsRecv uint32,
		cpuPercent uint32,
		cacheHitPercent uint32,
		numConnectedIps uint32,
		upstreamEgressUtilization uint32,
	) (Response, error)
}

func NewIContentServerConfigService() IContentServerConfigService {
	return &iContentServerConfigService{}
}

func (i *iContentServerConfigService) SetSteamCacheClientFiltersV1(
	key string,
	cacheId uint32,
	cacheKey string,
	changeNotes string,
	allowedIpBlocks string,
) (Response, error) {
	p := getPath("IContentServerConfigService", "SetSteamCacheClientFilters", 1)
	request := map[string]string{
		"key":             key,
		"cacheId":         fmt.Sprintf(`%v`, cacheId),
		"cacheKey":        cacheKey,
		"changeNotes":     changeNotes,
		"allowedIpBlocks": allowedIpBlocks,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iContentServerConfigService) GetSteamCacheNodeParamsV1(
	key string,
	cacheId uint32,
	cacheKey string,
) (Response, error) {
	p := getPath("IContentServerConfigService", "GetSteamCacheNodeParams", 1)
	request := map[string]string{
		"key":      key,
		"cacheId":  fmt.Sprintf(`%v`, cacheId),
		"cacheKey": cacheKey,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iContentServerConfigService) SetSteamCachePerformanceStatsV1(
	key string,
	cacheId uint32,
	cacheKey string,
	mbpsSent uint32,
	mbpsRecv uint32,
	cpuPercent uint32,
	cacheHitPercent uint32,
	numConnectedIps uint32,
	upstreamEgressUtilization uint32,
) (Response, error) {
	p := getPath("IContentServerConfigService", "SetSteamCachePerformanceStats", 1)
	request := map[string]string{
		"key":                       key,
		"cacheId":                   fmt.Sprintf(`%v`, cacheId),
		"cacheKey":                  cacheKey,
		"mbpsSent":                  fmt.Sprintf(`%v`, mbpsSent),
		"mbpsRecv":                  fmt.Sprintf(`%v`, mbpsRecv),
		"cpuPercent":                fmt.Sprintf(`%v`, cpuPercent),
		"cacheHitPercent":           fmt.Sprintf(`%v`, cacheHitPercent),
		"numConnectedIps":           fmt.Sprintf(`%v`, numConnectedIps),
		"upstreamEgressUtilization": fmt.Sprintf(`%v`, upstreamEgressUtilization),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iContentServerDirectoryService struct {
}

type IContentServerDirectoryService interface {
	GetServersForSteamPipeV1(
		cellId uint32,
		maxServers uint32,
		ipOverride string,
		launcherType int32,
		ipv6Public string,
	) (Response, error)
	GetClientUpdateHostsV1(
		cachedSignature string,
	) (Response, error)
	GetDepotPatchInfoV1(
		appid uint32,
		depotid uint32,
		sourceManifestid uint64,
		targetManifestid uint64,
	) (Response, error)
}

func NewIContentServerDirectoryService() IContentServerDirectoryService {
	return &iContentServerDirectoryService{}
}

func (i *iContentServerDirectoryService) GetServersForSteamPipeV1(
	cellId uint32,
	maxServers uint32,
	ipOverride string,
	launcherType int32,
	ipv6Public string,
) (Response, error) {
	p := getPath("IContentServerDirectoryService", "GetServersForSteamPipe", 1)
	request := map[string]string{
		"cellId":       fmt.Sprintf(`%v`, cellId),
		"maxServers":   fmt.Sprintf(`%v`, maxServers),
		"ipOverride":   ipOverride,
		"launcherType": fmt.Sprintf(`%v`, launcherType),
		"ipv6Public":   ipv6Public,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iContentServerDirectoryService) GetClientUpdateHostsV1(
	cachedSignature string,
) (Response, error) {
	p := getPath("IContentServerDirectoryService", "GetClientUpdateHosts", 1)
	request := map[string]string{
		"cachedSignature": cachedSignature,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iContentServerDirectoryService) GetDepotPatchInfoV1(
	appid uint32,
	depotid uint32,
	sourceManifestid uint64,
	targetManifestid uint64,
) (Response, error) {
	p := getPath("IContentServerDirectoryService", "GetDepotPatchInfo", 1)
	request := map[string]string{
		"appid":            fmt.Sprintf(`%v`, appid),
		"depotid":          fmt.Sprintf(`%v`, depotid),
		"sourceManifestid": fmt.Sprintf(`%v`, sourceManifestid),
		"targetManifestid": fmt.Sprintf(`%v`, targetManifestid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iPublishedFileService struct {
}

type IPublishedFileService interface {
	GetUserVoteSummaryV1(
		publishedfileids uint64,
	) (Response, error)
	QueryFilesV1(
		key string,
		queryType uint32,
		page uint32,
		cursor string,
		numperpage uint32,
		creatorAppid uint32,
		appid uint32,
		requiredtags string,
		excludedtags string,
		matchAllTags bool,
		requiredFlags string,
		omittedFlags string,
		searchText string,
		filetype uint32,
		childPublishedfileid uint64,
		days uint32,
		includeRecentVotesOnly bool,
		cacheMaxAgeSeconds uint32,
		language int32,
		totalonly bool,
		idsOnly bool,
		returnVoteData bool,
		returnTags bool,
		returnKvTags bool,
		returnPreviews bool,
		returnChildren bool,
		returnShortDescription bool,
		returnForSaleData bool,
		returnMetadata bool,
		returnPlaytimeStats uint32,
		returnDetails bool,
		stripDescriptionBbcode bool,
		returnReactions bool,
	) (Response, error)
	GetSubSectionDataV1(
		key string,
		publishedfileid uint64,
		forTableOfContents bool,
		specificSectionid uint64,
	) (Response, error)
	GetDetailsV1(
		key string,
		publishedfileids uint64,
		includetags bool,
		includeadditionalpreviews bool,
		includechildren bool,
		includekvtags bool,
		includevotes bool,
		shortDescription bool,
		includeforsaledata bool,
		includemetadata bool,
		language int32,
		returnPlaytimeStats uint32,
		appid uint32,
		stripDescriptionBbcode bool,
		includereactions bool,
	) (Response, error)
	GetUserFilesV1(
		key string,
		steamid uint64,
		appid uint32,
		shortcutid uint32,
		page uint32,
		numperpage uint32,
		t string,
		sortmethod string,
		privacy uint32,
		requiredtags string,
		excludedtags string,
		filetype uint32,
		creatorAppid uint32,
		matchCloudFilename string,
		cacheMaxAgeSeconds uint32,
		language int32,
		totalonly bool,
		idsOnly bool,
		returnVoteData bool,
		returnTags bool,
		returnKvTags bool,
		returnPreviews bool,
		returnChildren bool,
		returnShortDescription bool,
		returnForSaleData bool,
		returnMetadata bool,
		returnPlaytimeStats uint32,
		stripDescriptionBbcode bool,
		returnReactions bool,
		startindexOverride uint32,
		returnApps bool,
	) (Response, error)
	GetUserFileCountV1(
		key string,
		steamid uint64,
		appid uint32,
		shortcutid uint32,
		page uint32,
		numperpage uint32,
		t string,
		sortmethod string,
		privacy uint32,
		requiredtags string,
		excludedtags string,
		filetype uint32,
		creatorAppid uint32,
		matchCloudFilename string,
		cacheMaxAgeSeconds uint32,
		language int32,
		totalonly bool,
		idsOnly bool,
		returnVoteData bool,
		returnTags bool,
		returnKvTags bool,
		returnPreviews bool,
		returnChildren bool,
		returnShortDescription bool,
		returnForSaleData bool,
		returnMetadata bool,
		returnPlaytimeStats uint32,
		stripDescriptionBbcode bool,
		returnReactions bool,
		startindexOverride uint32,
		returnApps bool,
	) (Response, error)
}

func NewIPublishedFileService() IPublishedFileService {
	return &iPublishedFileService{}
}

func (i *iPublishedFileService) GetUserVoteSummaryV1(
	publishedfileids uint64,
) (Response, error) {
	p := getPath("IPublishedFileService", "GetUserVoteSummary", 1)
	request := map[string]string{
		"publishedfileids": fmt.Sprintf(`%v`, publishedfileids),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iPublishedFileService) QueryFilesV1(
	key string,
	queryType uint32,
	page uint32,
	cursor string,
	numperpage uint32,
	creatorAppid uint32,
	appid uint32,
	requiredtags string,
	excludedtags string,
	matchAllTags bool,
	requiredFlags string,
	omittedFlags string,
	searchText string,
	filetype uint32,
	childPublishedfileid uint64,
	days uint32,
	includeRecentVotesOnly bool,
	cacheMaxAgeSeconds uint32,
	language int32,
	totalonly bool,
	idsOnly bool,
	returnVoteData bool,
	returnTags bool,
	returnKvTags bool,
	returnPreviews bool,
	returnChildren bool,
	returnShortDescription bool,
	returnForSaleData bool,
	returnMetadata bool,
	returnPlaytimeStats uint32,
	returnDetails bool,
	stripDescriptionBbcode bool,
	returnReactions bool,
) (Response, error) {
	p := getPath("IPublishedFileService", "QueryFiles", 1)
	request := map[string]string{
		"key":                    key,
		"queryType":              fmt.Sprintf(`%v`, queryType),
		"page":                   fmt.Sprintf(`%v`, page),
		"cursor":                 cursor,
		"numperpage":             fmt.Sprintf(`%v`, numperpage),
		"creatorAppid":           fmt.Sprintf(`%v`, creatorAppid),
		"appid":                  fmt.Sprintf(`%v`, appid),
		"requiredtags":           requiredtags,
		"excludedtags":           excludedtags,
		"matchAllTags":           strconv.FormatBool(matchAllTags),
		"requiredFlags":          requiredFlags,
		"omittedFlags":           omittedFlags,
		"searchText":             searchText,
		"filetype":               fmt.Sprintf(`%v`, filetype),
		"childPublishedfileid":   fmt.Sprintf(`%v`, childPublishedfileid),
		"days":                   fmt.Sprintf(`%v`, days),
		"includeRecentVotesOnly": strconv.FormatBool(includeRecentVotesOnly),
		"cacheMaxAgeSeconds":     fmt.Sprintf(`%v`, cacheMaxAgeSeconds),
		"language":               fmt.Sprintf(`%v`, language),
		"totalonly":              strconv.FormatBool(totalonly),
		"idsOnly":                strconv.FormatBool(idsOnly),
		"returnVoteData":         strconv.FormatBool(returnVoteData),
		"returnTags":             strconv.FormatBool(returnTags),
		"returnKvTags":           strconv.FormatBool(returnKvTags),
		"returnPreviews":         strconv.FormatBool(returnPreviews),
		"returnChildren":         strconv.FormatBool(returnChildren),
		"returnShortDescription": strconv.FormatBool(returnShortDescription),
		"returnForSaleData":      strconv.FormatBool(returnForSaleData),
		"returnMetadata":         strconv.FormatBool(returnMetadata),
		"returnPlaytimeStats":    fmt.Sprintf(`%v`, returnPlaytimeStats),
		"returnDetails":          strconv.FormatBool(returnDetails),
		"stripDescriptionBbcode": strconv.FormatBool(stripDescriptionBbcode),
		"returnReactions":        strconv.FormatBool(returnReactions),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iPublishedFileService) GetSubSectionDataV1(
	key string,
	publishedfileid uint64,
	forTableOfContents bool,
	specificSectionid uint64,
) (Response, error) {
	p := getPath("IPublishedFileService", "GetSubSectionData", 1)
	request := map[string]string{
		"key":                key,
		"publishedfileid":    fmt.Sprintf(`%v`, publishedfileid),
		"forTableOfContents": strconv.FormatBool(forTableOfContents),
		"specificSectionid":  fmt.Sprintf(`%v`, specificSectionid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iPublishedFileService) GetDetailsV1(
	key string,
	publishedfileids uint64,
	includetags bool,
	includeadditionalpreviews bool,
	includechildren bool,
	includekvtags bool,
	includevotes bool,
	shortDescription bool,
	includeforsaledata bool,
	includemetadata bool,
	language int32,
	returnPlaytimeStats uint32,
	appid uint32,
	stripDescriptionBbcode bool,
	includereactions bool,
) (Response, error) {
	p := getPath("IPublishedFileService", "GetDetails", 1)
	request := map[string]string{
		"key":                       key,
		"publishedfileids":          fmt.Sprintf(`%v`, publishedfileids),
		"includetags":               strconv.FormatBool(includetags),
		"includeadditionalpreviews": strconv.FormatBool(includeadditionalpreviews),
		"includechildren":           strconv.FormatBool(includechildren),
		"includekvtags":             strconv.FormatBool(includekvtags),
		"includevotes":              strconv.FormatBool(includevotes),
		"shortDescription":          strconv.FormatBool(shortDescription),
		"includeforsaledata":        strconv.FormatBool(includeforsaledata),
		"includemetadata":           strconv.FormatBool(includemetadata),
		"language":                  fmt.Sprintf(`%v`, language),
		"returnPlaytimeStats":       fmt.Sprintf(`%v`, returnPlaytimeStats),
		"appid":                     fmt.Sprintf(`%v`, appid),
		"stripDescriptionBbcode":    strconv.FormatBool(stripDescriptionBbcode),
		"includereactions":          strconv.FormatBool(includereactions),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iPublishedFileService) GetUserFilesV1(
	key string,
	steamid uint64,
	appid uint32,
	shortcutid uint32,
	page uint32,
	numperpage uint32,
	t string,
	sortmethod string,
	privacy uint32,
	requiredtags string,
	excludedtags string,
	filetype uint32,
	creatorAppid uint32,
	matchCloudFilename string,
	cacheMaxAgeSeconds uint32,
	language int32,
	totalonly bool,
	idsOnly bool,
	returnVoteData bool,
	returnTags bool,
	returnKvTags bool,
	returnPreviews bool,
	returnChildren bool,
	returnShortDescription bool,
	returnForSaleData bool,
	returnMetadata bool,
	returnPlaytimeStats uint32,
	stripDescriptionBbcode bool,
	returnReactions bool,
	startindexOverride uint32,
	returnApps bool,
) (Response, error) {
	p := getPath("IPublishedFileService", "GetUserFiles", 1)
	request := map[string]string{
		"key":                    key,
		"steamid":                fmt.Sprintf(`%v`, steamid),
		"appid":                  fmt.Sprintf(`%v`, appid),
		"shortcutid":             fmt.Sprintf(`%v`, shortcutid),
		"page":                   fmt.Sprintf(`%v`, page),
		"numperpage":             fmt.Sprintf(`%v`, numperpage),
		"t":                      t,
		"sortmethod":             sortmethod,
		"privacy":                fmt.Sprintf(`%v`, privacy),
		"requiredtags":           requiredtags,
		"excludedtags":           excludedtags,
		"filetype":               fmt.Sprintf(`%v`, filetype),
		"creatorAppid":           fmt.Sprintf(`%v`, creatorAppid),
		"matchCloudFilename":     matchCloudFilename,
		"cacheMaxAgeSeconds":     fmt.Sprintf(`%v`, cacheMaxAgeSeconds),
		"language":               fmt.Sprintf(`%v`, language),
		"totalonly":              strconv.FormatBool(totalonly),
		"idsOnly":                strconv.FormatBool(idsOnly),
		"returnVoteData":         strconv.FormatBool(returnVoteData),
		"returnTags":             strconv.FormatBool(returnTags),
		"returnKvTags":           strconv.FormatBool(returnKvTags),
		"returnPreviews":         strconv.FormatBool(returnPreviews),
		"returnChildren":         strconv.FormatBool(returnChildren),
		"returnShortDescription": strconv.FormatBool(returnShortDescription),
		"returnForSaleData":      strconv.FormatBool(returnForSaleData),
		"returnMetadata":         strconv.FormatBool(returnMetadata),
		"returnPlaytimeStats":    fmt.Sprintf(`%v`, returnPlaytimeStats),
		"stripDescriptionBbcode": strconv.FormatBool(stripDescriptionBbcode),
		"returnReactions":        strconv.FormatBool(returnReactions),
		"startindexOverride":     fmt.Sprintf(`%v`, startindexOverride),
		"returnApps":             strconv.FormatBool(returnApps),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iPublishedFileService) GetUserFileCountV1(
	key string,
	steamid uint64,
	appid uint32,
	shortcutid uint32,
	page uint32,
	numperpage uint32,
	t string,
	sortmethod string,
	privacy uint32,
	requiredtags string,
	excludedtags string,
	filetype uint32,
	creatorAppid uint32,
	matchCloudFilename string,
	cacheMaxAgeSeconds uint32,
	language int32,
	totalonly bool,
	idsOnly bool,
	returnVoteData bool,
	returnTags bool,
	returnKvTags bool,
	returnPreviews bool,
	returnChildren bool,
	returnShortDescription bool,
	returnForSaleData bool,
	returnMetadata bool,
	returnPlaytimeStats uint32,
	stripDescriptionBbcode bool,
	returnReactions bool,
	startindexOverride uint32,
	returnApps bool,
) (Response, error) {
	p := getPath("IPublishedFileService", "GetUserFileCount", 1)
	request := map[string]string{
		"key":                    key,
		"steamid":                fmt.Sprintf(`%v`, steamid),
		"appid":                  fmt.Sprintf(`%v`, appid),
		"shortcutid":             fmt.Sprintf(`%v`, shortcutid),
		"page":                   fmt.Sprintf(`%v`, page),
		"numperpage":             fmt.Sprintf(`%v`, numperpage),
		"t":                      t,
		"sortmethod":             sortmethod,
		"privacy":                fmt.Sprintf(`%v`, privacy),
		"requiredtags":           requiredtags,
		"excludedtags":           excludedtags,
		"filetype":               fmt.Sprintf(`%v`, filetype),
		"creatorAppid":           fmt.Sprintf(`%v`, creatorAppid),
		"matchCloudFilename":     matchCloudFilename,
		"cacheMaxAgeSeconds":     fmt.Sprintf(`%v`, cacheMaxAgeSeconds),
		"language":               fmt.Sprintf(`%v`, language),
		"totalonly":              strconv.FormatBool(totalonly),
		"idsOnly":                strconv.FormatBool(idsOnly),
		"returnVoteData":         strconv.FormatBool(returnVoteData),
		"returnTags":             strconv.FormatBool(returnTags),
		"returnKvTags":           strconv.FormatBool(returnKvTags),
		"returnPreviews":         strconv.FormatBool(returnPreviews),
		"returnChildren":         strconv.FormatBool(returnChildren),
		"returnShortDescription": strconv.FormatBool(returnShortDescription),
		"returnForSaleData":      strconv.FormatBool(returnForSaleData),
		"returnMetadata":         strconv.FormatBool(returnMetadata),
		"returnPlaytimeStats":    fmt.Sprintf(`%v`, returnPlaytimeStats),
		"stripDescriptionBbcode": strconv.FormatBool(stripDescriptionBbcode),
		"returnReactions":        strconv.FormatBool(returnReactions),
		"startindexOverride":     fmt.Sprintf(`%v`, startindexOverride),
		"returnApps":             strconv.FormatBool(returnApps),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iEconService struct {
}

type IEconService interface {
	GetTradeHistoryV1(
		key string,
		maxTrades uint32,
		startAfterTime uint32,
		startAfterTradeid uint64,
		navigatingBack bool,
		getDescriptions bool,
		language string,
		includeFailed bool,
		includeTotal bool,
	) (Response, error)
	GetTradeStatusV1(
		key string,
		tradeid uint64,
		getDescriptions bool,
		language string,
	) (Response, error)
	GetTradeOffersV1(
		key string,
		getSentOffers bool,
		getReceivedOffers bool,
		getDescriptions bool,
		language string,
		activeOnly bool,
		historicalOnly bool,
		timeHistoricalCutoff uint32,
		cursor uint32,
	) (Response, error)
	GetTradeOfferV1(
		key string,
		tradeofferid uint64,
		language string,
		getDescriptions bool,
	) (Response, error)
	GetTradeOffersSummaryV1(
		key string,
		timeLastVisit uint32,
	) (Response, error)
	GetTradeHoldDurationsV1(
		key string,
		steamidTarget uint64,
		tradeOfferAccessToken string,
	) (Response, error)
}

func NewIEconService() IEconService {
	return &iEconService{}
}

func (i *iEconService) GetTradeHistoryV1(
	key string,
	maxTrades uint32,
	startAfterTime uint32,
	startAfterTradeid uint64,
	navigatingBack bool,
	getDescriptions bool,
	language string,
	includeFailed bool,
	includeTotal bool,
) (Response, error) {
	p := getPath("IEconService", "GetTradeHistory", 1)
	request := map[string]string{
		"key":               key,
		"maxTrades":         fmt.Sprintf(`%v`, maxTrades),
		"startAfterTime":    fmt.Sprintf(`%v`, startAfterTime),
		"startAfterTradeid": fmt.Sprintf(`%v`, startAfterTradeid),
		"navigatingBack":    strconv.FormatBool(navigatingBack),
		"getDescriptions":   strconv.FormatBool(getDescriptions),
		"language":          language,
		"includeFailed":     strconv.FormatBool(includeFailed),
		"includeTotal":      strconv.FormatBool(includeTotal),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iEconService) GetTradeStatusV1(
	key string,
	tradeid uint64,
	getDescriptions bool,
	language string,
) (Response, error) {
	p := getPath("IEconService", "GetTradeStatus", 1)
	request := map[string]string{
		"key":             key,
		"tradeid":         fmt.Sprintf(`%v`, tradeid),
		"getDescriptions": strconv.FormatBool(getDescriptions),
		"language":        language,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iEconService) GetTradeOffersV1(
	key string,
	getSentOffers bool,
	getReceivedOffers bool,
	getDescriptions bool,
	language string,
	activeOnly bool,
	historicalOnly bool,
	timeHistoricalCutoff uint32,
	cursor uint32,
) (Response, error) {
	p := getPath("IEconService", "GetTradeOffers", 1)
	request := map[string]string{
		"key":                  key,
		"getSentOffers":        strconv.FormatBool(getSentOffers),
		"getReceivedOffers":    strconv.FormatBool(getReceivedOffers),
		"getDescriptions":      strconv.FormatBool(getDescriptions),
		"language":             language,
		"activeOnly":           strconv.FormatBool(activeOnly),
		"historicalOnly":       strconv.FormatBool(historicalOnly),
		"timeHistoricalCutoff": fmt.Sprintf(`%v`, timeHistoricalCutoff),
		"cursor":               fmt.Sprintf(`%v`, cursor),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iEconService) GetTradeOfferV1(
	key string,
	tradeofferid uint64,
	language string,
	getDescriptions bool,
) (Response, error) {
	p := getPath("IEconService", "GetTradeOffer", 1)
	request := map[string]string{
		"key":             key,
		"tradeofferid":    fmt.Sprintf(`%v`, tradeofferid),
		"language":        language,
		"getDescriptions": strconv.FormatBool(getDescriptions),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iEconService) GetTradeOffersSummaryV1(
	key string,
	timeLastVisit uint32,
) (Response, error) {
	p := getPath("IEconService", "GetTradeOffersSummary", 1)
	request := map[string]string{
		"key":           key,
		"timeLastVisit": fmt.Sprintf(`%v`, timeLastVisit),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iEconService) GetTradeHoldDurationsV1(
	key string,
	steamidTarget uint64,
	tradeOfferAccessToken string,
) (Response, error) {
	p := getPath("IEconService", "GetTradeHoldDurations", 1)
	request := map[string]string{
		"key":                   key,
		"steamidTarget":         fmt.Sprintf(`%v`, steamidTarget),
		"tradeOfferAccessToken": tradeOfferAccessToken,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iGameNotificationsService struct {
}

type IGameNotificationsService interface {
	UserCreateSessionV1(
		appid uint32,
		context uint64,
		steamid uint64,
	) (Response, error)
	UserUpdateSessionV1(
		sessionid uint64,
		appid uint32,
		steamid uint64,
	) (Response, error)
	UserDeleteSessionV1(
		sessionid uint64,
		appid uint32,
		steamid uint64,
	) (Response, error)
}

func NewIGameNotificationsService() IGameNotificationsService {
	return &iGameNotificationsService{}
}

func (i *iGameNotificationsService) UserCreateSessionV1(
	appid uint32,
	context uint64,
	steamid uint64,
) (Response, error) {
	p := getPath("IGameNotificationsService", "UserCreateSession", 1)
	request := map[string]string{
		"appid":   fmt.Sprintf(`%v`, appid),
		"context": fmt.Sprintf(`%v`, context),
		"steamid": fmt.Sprintf(`%v`, steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iGameNotificationsService) UserUpdateSessionV1(
	sessionid uint64,
	appid uint32,
	steamid uint64,
) (Response, error) {
	p := getPath("IGameNotificationsService", "UserUpdateSession", 1)
	request := map[string]string{
		"sessionid": fmt.Sprintf(`%v`, sessionid),
		"appid":     fmt.Sprintf(`%v`, appid),
		"steamid":   fmt.Sprintf(`%v`, steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iGameNotificationsService) UserDeleteSessionV1(
	sessionid uint64,
	appid uint32,
	steamid uint64,
) (Response, error) {
	p := getPath("IGameNotificationsService", "UserDeleteSession", 1)
	request := map[string]string{
		"sessionid": fmt.Sprintf(`%v`, sessionid),
		"appid":     fmt.Sprintf(`%v`, appid),
		"steamid":   fmt.Sprintf(`%v`, steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iInventoryService struct {
}

type IInventoryService interface {
	SplitItemStackV1(
		key string,
		appid uint32,
		itemid uint64,
		quantity uint32,
		steamid uint64,
	) (Response, error)
	CombineItemStacksV1(
		key string,
		appid uint32,
		fromitemid uint64,
		destitemid uint64,
		quantity uint32,
		steamid uint64,
	) (Response, error)
	GetPriceSheetV1(
		key string,
		ecurrency int32,
		currencyCode string,
	) (Response, error)
}

func NewIInventoryService() IInventoryService {
	return &iInventoryService{}
}

func (i *iInventoryService) SplitItemStackV1(
	key string,
	appid uint32,
	itemid uint64,
	quantity uint32,
	steamid uint64,
) (Response, error) {
	p := getPath("IInventoryService", "SplitItemStack", 1)
	request := map[string]string{
		"key":      key,
		"appid":    fmt.Sprintf(`%v`, appid),
		"itemid":   fmt.Sprintf(`%v`, itemid),
		"quantity": fmt.Sprintf(`%v`, quantity),
		"steamid":  fmt.Sprintf(`%v`, steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iInventoryService) CombineItemStacksV1(
	key string,
	appid uint32,
	fromitemid uint64,
	destitemid uint64,
	quantity uint32,
	steamid uint64,
) (Response, error) {
	p := getPath("IInventoryService", "CombineItemStacks", 1)
	request := map[string]string{
		"key":        key,
		"appid":      fmt.Sprintf(`%v`, appid),
		"fromitemid": fmt.Sprintf(`%v`, fromitemid),
		"destitemid": fmt.Sprintf(`%v`, destitemid),
		"quantity":   fmt.Sprintf(`%v`, quantity),
		"steamid":    fmt.Sprintf(`%v`, steamid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iInventoryService) GetPriceSheetV1(
	key string,
	ecurrency int32,
	currencyCode string,
) (Response, error) {
	p := getPath("IInventoryService", "GetPriceSheet", 1)
	request := map[string]string{
		"key":          key,
		"ecurrency":    fmt.Sprintf(`%v`, ecurrency),
		"currencyCode": currencyCode,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iStoreService struct {
}

type IStoreService interface {
	GetAppListV1(
		key string,
		ifModifiedSince uint32,
		haveDescriptionLanguage string,
		includeGames bool,
		includeDlc bool,
		includeSoftware bool,
		includeVideos bool,
		includeHardware bool,
		lastAppid uint32,
		maxResults uint32,
	) (Response, error)
}

func NewIStoreService() IStoreService {
	return &iStoreService{}
}

func (i *iStoreService) GetAppListV1(
	key string,
	ifModifiedSince uint32,
	haveDescriptionLanguage string,
	includeGames bool,
	includeDlc bool,
	includeSoftware bool,
	includeVideos bool,
	includeHardware bool,
	lastAppid uint32,
	maxResults uint32,
) (Response, error) {
	p := getPath("IStoreService", "GetAppList", 1)
	request := map[string]string{
		"key":                     key,
		"ifModifiedSince":         fmt.Sprintf(`%v`, ifModifiedSince),
		"haveDescriptionLanguage": haveDescriptionLanguage,
		"includeGames":            strconv.FormatBool(includeGames),
		"includeDlc":              strconv.FormatBool(includeDlc),
		"includeSoftware":         strconv.FormatBool(includeSoftware),
		"includeVideos":           strconv.FormatBool(includeVideos),
		"includeHardware":         strconv.FormatBool(includeHardware),
		"lastAppid":               fmt.Sprintf(`%v`, lastAppid),
		"maxResults":              fmt.Sprintf(`%v`, maxResults),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := get(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iHelpRequestLogsService struct {
}

type IHelpRequestLogsService interface {
	UploadUserApplicationLogV1(
		appid uint32,
		logType string,
		versionString string,
		logContents string,
		requestId uint64,
	) (Response, error)
	GetApplicationLogDemandV1(
		appid uint32,
	) (Response, error)
}

func NewIHelpRequestLogsService() IHelpRequestLogsService {
	return &iHelpRequestLogsService{}
}

func (i *iHelpRequestLogsService) UploadUserApplicationLogV1(
	appid uint32,
	logType string,
	versionString string,
	logContents string,
	requestId uint64,
) (Response, error) {
	p := getPath("IHelpRequestLogsService", "UploadUserApplicationLog", 1)
	request := map[string]string{
		"appid":         fmt.Sprintf(`%v`, appid),
		"logType":       logType,
		"versionString": versionString,
		"logContents":   logContents,
		"requestId":     fmt.Sprintf(`%v`, requestId),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
func (i *iHelpRequestLogsService) GetApplicationLogDemandV1(
	appid uint32,
) (Response, error) {
	p := getPath("IHelpRequestLogsService", "GetApplicationLogDemand", 1)
	request := map[string]string{
		"appid": fmt.Sprintf(`%v`, appid),
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}

type iCheatReportingService struct {
}

type ICheatReportingService interface {
	ReportCheatDataV1(
		key string,
		steamid uint64,
		appid uint32,
		pathandfilename string,
		webcheaturl string,
		timeNow uint64,
		timeStarted uint64,
		timeStopped uint64,
		cheatname string,
		gameProcessId uint32,
		cheatProcessId uint32,
		cheatParam1 uint64,
		cheatParam2 uint64,
		cheatDataDump string,
	) (Response, error)
}

func NewICheatReportingService() ICheatReportingService {
	return &iCheatReportingService{}
}

func (i *iCheatReportingService) ReportCheatDataV1(
	key string,
	steamid uint64,
	appid uint32,
	pathandfilename string,
	webcheaturl string,
	timeNow uint64,
	timeStarted uint64,
	timeStopped uint64,
	cheatname string,
	gameProcessId uint32,
	cheatProcessId uint32,
	cheatParam1 uint64,
	cheatParam2 uint64,
	cheatDataDump string,
) (Response, error) {
	p := getPath("ICheatReportingService", "ReportCheatData", 1)
	request := map[string]string{
		"key":             key,
		"steamid":         fmt.Sprintf(`%v`, steamid),
		"appid":           fmt.Sprintf(`%v`, appid),
		"pathandfilename": pathandfilename,
		"webcheaturl":     webcheaturl,
		"timeNow":         fmt.Sprintf(`%v`, timeNow),
		"timeStarted":     fmt.Sprintf(`%v`, timeStarted),
		"timeStopped":     fmt.Sprintf(`%v`, timeStopped),
		"cheatname":       cheatname,
		"gameProcessId":   fmt.Sprintf(`%v`, gameProcessId),
		"cheatProcessId":  fmt.Sprintf(`%v`, cheatProcessId),
		"cheatParam1":     fmt.Sprintf(`%v`, cheatParam1),
		"cheatParam2":     fmt.Sprintf(`%v`, cheatParam2),
		"cheatDataDump":   cheatDataDump,
	}
	response := Response{}
	uri := buildURL(p, request)

	if err := post(uri, &response); err != nil {
		return nil, err
	}

	return response, nil
}
